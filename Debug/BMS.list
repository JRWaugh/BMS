
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5ac  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800d774  0800d774  0001d774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daf4  0800daf4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800daf4  0800daf4  0001daf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dafc  0800dafc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dafc  0800dafc  0001dafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db00  0800db00  0001db00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800db04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000074  0800db78  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0800db78  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fa0a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004536  00000000  00000000  0005faae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a30  00000000  00000000  00063fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001898  00000000  00000000  00065a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0ab  00000000  00000000  000672b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014716  00000000  00000000  0009135b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbd6c  00000000  00000000  000a5a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a17dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074c4  00000000  00000000  001a1858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000074 	.word	0x20000074
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800d75c 	.word	0x0800d75c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000078 	.word	0x20000078
 8000204:	0800d75c 	.word	0x0800d75c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b972 	b.w	800091c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9e08      	ldr	r6, [sp, #32]
 8000656:	4604      	mov	r4, r0
 8000658:	4688      	mov	r8, r1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d14b      	bne.n	80006f6 <__udivmoddi4+0xa6>
 800065e:	428a      	cmp	r2, r1
 8000660:	4615      	mov	r5, r2
 8000662:	d967      	bls.n	8000734 <__udivmoddi4+0xe4>
 8000664:	fab2 f282 	clz	r2, r2
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0720 	rsb	r7, r2, #32
 800066e:	fa01 f302 	lsl.w	r3, r1, r2
 8000672:	fa20 f707 	lsr.w	r7, r0, r7
 8000676:	4095      	lsls	r5, r2
 8000678:	ea47 0803 	orr.w	r8, r7, r3
 800067c:	4094      	lsls	r4, r2
 800067e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000682:	0c23      	lsrs	r3, r4, #16
 8000684:	fbb8 f7fe 	udiv	r7, r8, lr
 8000688:	fa1f fc85 	uxth.w	ip, r5
 800068c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000690:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000694:	fb07 f10c 	mul.w	r1, r7, ip
 8000698:	4299      	cmp	r1, r3
 800069a:	d909      	bls.n	80006b0 <__udivmoddi4+0x60>
 800069c:	18eb      	adds	r3, r5, r3
 800069e:	f107 30ff 	add.w	r0, r7, #4294967295
 80006a2:	f080 811b 	bcs.w	80008dc <__udivmoddi4+0x28c>
 80006a6:	4299      	cmp	r1, r3
 80006a8:	f240 8118 	bls.w	80008dc <__udivmoddi4+0x28c>
 80006ac:	3f02      	subs	r7, #2
 80006ae:	442b      	add	r3, r5
 80006b0:	1a5b      	subs	r3, r3, r1
 80006b2:	b2a4      	uxth	r4, r4
 80006b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80006b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80006bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80006c4:	45a4      	cmp	ip, r4
 80006c6:	d909      	bls.n	80006dc <__udivmoddi4+0x8c>
 80006c8:	192c      	adds	r4, r5, r4
 80006ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ce:	f080 8107 	bcs.w	80008e0 <__udivmoddi4+0x290>
 80006d2:	45a4      	cmp	ip, r4
 80006d4:	f240 8104 	bls.w	80008e0 <__udivmoddi4+0x290>
 80006d8:	3802      	subs	r0, #2
 80006da:	442c      	add	r4, r5
 80006dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006e0:	eba4 040c 	sub.w	r4, r4, ip
 80006e4:	2700      	movs	r7, #0
 80006e6:	b11e      	cbz	r6, 80006f0 <__udivmoddi4+0xa0>
 80006e8:	40d4      	lsrs	r4, r2
 80006ea:	2300      	movs	r3, #0
 80006ec:	e9c6 4300 	strd	r4, r3, [r6]
 80006f0:	4639      	mov	r1, r7
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d909      	bls.n	800070e <__udivmoddi4+0xbe>
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	f000 80eb 	beq.w	80008d6 <__udivmoddi4+0x286>
 8000700:	2700      	movs	r7, #0
 8000702:	e9c6 0100 	strd	r0, r1, [r6]
 8000706:	4638      	mov	r0, r7
 8000708:	4639      	mov	r1, r7
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	fab3 f783 	clz	r7, r3
 8000712:	2f00      	cmp	r7, #0
 8000714:	d147      	bne.n	80007a6 <__udivmoddi4+0x156>
 8000716:	428b      	cmp	r3, r1
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0xd0>
 800071a:	4282      	cmp	r2, r0
 800071c:	f200 80fa 	bhi.w	8000914 <__udivmoddi4+0x2c4>
 8000720:	1a84      	subs	r4, r0, r2
 8000722:	eb61 0303 	sbc.w	r3, r1, r3
 8000726:	2001      	movs	r0, #1
 8000728:	4698      	mov	r8, r3
 800072a:	2e00      	cmp	r6, #0
 800072c:	d0e0      	beq.n	80006f0 <__udivmoddi4+0xa0>
 800072e:	e9c6 4800 	strd	r4, r8, [r6]
 8000732:	e7dd      	b.n	80006f0 <__udivmoddi4+0xa0>
 8000734:	b902      	cbnz	r2, 8000738 <__udivmoddi4+0xe8>
 8000736:	deff      	udf	#255	; 0xff
 8000738:	fab2 f282 	clz	r2, r2
 800073c:	2a00      	cmp	r2, #0
 800073e:	f040 808f 	bne.w	8000860 <__udivmoddi4+0x210>
 8000742:	1b49      	subs	r1, r1, r5
 8000744:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000748:	fa1f f885 	uxth.w	r8, r5
 800074c:	2701      	movs	r7, #1
 800074e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000752:	0c23      	lsrs	r3, r4, #16
 8000754:	fb0e 111c 	mls	r1, lr, ip, r1
 8000758:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800075c:	fb08 f10c 	mul.w	r1, r8, ip
 8000760:	4299      	cmp	r1, r3
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x124>
 8000764:	18eb      	adds	r3, r5, r3
 8000766:	f10c 30ff 	add.w	r0, ip, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x122>
 800076c:	4299      	cmp	r1, r3
 800076e:	f200 80cd 	bhi.w	800090c <__udivmoddi4+0x2bc>
 8000772:	4684      	mov	ip, r0
 8000774:	1a59      	subs	r1, r3, r1
 8000776:	b2a3      	uxth	r3, r4
 8000778:	fbb1 f0fe 	udiv	r0, r1, lr
 800077c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000780:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000784:	fb08 f800 	mul.w	r8, r8, r0
 8000788:	45a0      	cmp	r8, r4
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x14c>
 800078c:	192c      	adds	r4, r5, r4
 800078e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x14a>
 8000794:	45a0      	cmp	r8, r4
 8000796:	f200 80b6 	bhi.w	8000906 <__udivmoddi4+0x2b6>
 800079a:	4618      	mov	r0, r3
 800079c:	eba4 0408 	sub.w	r4, r4, r8
 80007a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007a4:	e79f      	b.n	80006e6 <__udivmoddi4+0x96>
 80007a6:	f1c7 0c20 	rsb	ip, r7, #32
 80007aa:	40bb      	lsls	r3, r7
 80007ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80007b4:	fa01 f407 	lsl.w	r4, r1, r7
 80007b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80007bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80007c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007c4:	4325      	orrs	r5, r4
 80007c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80007ca:	0c2c      	lsrs	r4, r5, #16
 80007cc:	fb08 3319 	mls	r3, r8, r9, r3
 80007d0:	fa1f fa8e 	uxth.w	sl, lr
 80007d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007d8:	fb09 f40a 	mul.w	r4, r9, sl
 80007dc:	429c      	cmp	r4, r3
 80007de:	fa02 f207 	lsl.w	r2, r2, r7
 80007e2:	fa00 f107 	lsl.w	r1, r0, r7
 80007e6:	d90b      	bls.n	8000800 <__udivmoddi4+0x1b0>
 80007e8:	eb1e 0303 	adds.w	r3, lr, r3
 80007ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80007f0:	f080 8087 	bcs.w	8000902 <__udivmoddi4+0x2b2>
 80007f4:	429c      	cmp	r4, r3
 80007f6:	f240 8084 	bls.w	8000902 <__udivmoddi4+0x2b2>
 80007fa:	f1a9 0902 	sub.w	r9, r9, #2
 80007fe:	4473      	add	r3, lr
 8000800:	1b1b      	subs	r3, r3, r4
 8000802:	b2ad      	uxth	r5, r5
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3310 	mls	r3, r8, r0, r3
 800080c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000810:	fb00 fa0a 	mul.w	sl, r0, sl
 8000814:	45a2      	cmp	sl, r4
 8000816:	d908      	bls.n	800082a <__udivmoddi4+0x1da>
 8000818:	eb1e 0404 	adds.w	r4, lr, r4
 800081c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000820:	d26b      	bcs.n	80008fa <__udivmoddi4+0x2aa>
 8000822:	45a2      	cmp	sl, r4
 8000824:	d969      	bls.n	80008fa <__udivmoddi4+0x2aa>
 8000826:	3802      	subs	r0, #2
 8000828:	4474      	add	r4, lr
 800082a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800082e:	fba0 8902 	umull	r8, r9, r0, r2
 8000832:	eba4 040a 	sub.w	r4, r4, sl
 8000836:	454c      	cmp	r4, r9
 8000838:	46c2      	mov	sl, r8
 800083a:	464b      	mov	r3, r9
 800083c:	d354      	bcc.n	80008e8 <__udivmoddi4+0x298>
 800083e:	d051      	beq.n	80008e4 <__udivmoddi4+0x294>
 8000840:	2e00      	cmp	r6, #0
 8000842:	d069      	beq.n	8000918 <__udivmoddi4+0x2c8>
 8000844:	ebb1 050a 	subs.w	r5, r1, sl
 8000848:	eb64 0403 	sbc.w	r4, r4, r3
 800084c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000850:	40fd      	lsrs	r5, r7
 8000852:	40fc      	lsrs	r4, r7
 8000854:	ea4c 0505 	orr.w	r5, ip, r5
 8000858:	e9c6 5400 	strd	r5, r4, [r6]
 800085c:	2700      	movs	r7, #0
 800085e:	e747      	b.n	80006f0 <__udivmoddi4+0xa0>
 8000860:	f1c2 0320 	rsb	r3, r2, #32
 8000864:	fa20 f703 	lsr.w	r7, r0, r3
 8000868:	4095      	lsls	r5, r2
 800086a:	fa01 f002 	lsl.w	r0, r1, r2
 800086e:	fa21 f303 	lsr.w	r3, r1, r3
 8000872:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000876:	4338      	orrs	r0, r7
 8000878:	0c01      	lsrs	r1, r0, #16
 800087a:	fbb3 f7fe 	udiv	r7, r3, lr
 800087e:	fa1f f885 	uxth.w	r8, r5
 8000882:	fb0e 3317 	mls	r3, lr, r7, r3
 8000886:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800088a:	fb07 f308 	mul.w	r3, r7, r8
 800088e:	428b      	cmp	r3, r1
 8000890:	fa04 f402 	lsl.w	r4, r4, r2
 8000894:	d907      	bls.n	80008a6 <__udivmoddi4+0x256>
 8000896:	1869      	adds	r1, r5, r1
 8000898:	f107 3cff 	add.w	ip, r7, #4294967295
 800089c:	d22f      	bcs.n	80008fe <__udivmoddi4+0x2ae>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d92d      	bls.n	80008fe <__udivmoddi4+0x2ae>
 80008a2:	3f02      	subs	r7, #2
 80008a4:	4429      	add	r1, r5
 80008a6:	1acb      	subs	r3, r1, r3
 80008a8:	b281      	uxth	r1, r0
 80008aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b6:	fb00 f308 	mul.w	r3, r0, r8
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d907      	bls.n	80008ce <__udivmoddi4+0x27e>
 80008be:	1869      	adds	r1, r5, r1
 80008c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c4:	d217      	bcs.n	80008f6 <__udivmoddi4+0x2a6>
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d915      	bls.n	80008f6 <__udivmoddi4+0x2a6>
 80008ca:	3802      	subs	r0, #2
 80008cc:	4429      	add	r1, r5
 80008ce:	1ac9      	subs	r1, r1, r3
 80008d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008d4:	e73b      	b.n	800074e <__udivmoddi4+0xfe>
 80008d6:	4637      	mov	r7, r6
 80008d8:	4630      	mov	r0, r6
 80008da:	e709      	b.n	80006f0 <__udivmoddi4+0xa0>
 80008dc:	4607      	mov	r7, r0
 80008de:	e6e7      	b.n	80006b0 <__udivmoddi4+0x60>
 80008e0:	4618      	mov	r0, r3
 80008e2:	e6fb      	b.n	80006dc <__udivmoddi4+0x8c>
 80008e4:	4541      	cmp	r1, r8
 80008e6:	d2ab      	bcs.n	8000840 <__udivmoddi4+0x1f0>
 80008e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008ec:	eb69 020e 	sbc.w	r2, r9, lr
 80008f0:	3801      	subs	r0, #1
 80008f2:	4613      	mov	r3, r2
 80008f4:	e7a4      	b.n	8000840 <__udivmoddi4+0x1f0>
 80008f6:	4660      	mov	r0, ip
 80008f8:	e7e9      	b.n	80008ce <__udivmoddi4+0x27e>
 80008fa:	4618      	mov	r0, r3
 80008fc:	e795      	b.n	800082a <__udivmoddi4+0x1da>
 80008fe:	4667      	mov	r7, ip
 8000900:	e7d1      	b.n	80008a6 <__udivmoddi4+0x256>
 8000902:	4681      	mov	r9, r0
 8000904:	e77c      	b.n	8000800 <__udivmoddi4+0x1b0>
 8000906:	3802      	subs	r0, #2
 8000908:	442c      	add	r4, r5
 800090a:	e747      	b.n	800079c <__udivmoddi4+0x14c>
 800090c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000910:	442b      	add	r3, r5
 8000912:	e72f      	b.n	8000774 <__udivmoddi4+0x124>
 8000914:	4638      	mov	r0, r7
 8000916:	e708      	b.n	800072a <__udivmoddi4+0xda>
 8000918:	4637      	mov	r7, r6
 800091a:	e6e9      	b.n	80006f0 <__udivmoddi4+0xa0>

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <HAL_Init+0x40>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_Init+0x40>)
 8000936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_Init+0x40>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 ff21 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f808 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f00c f98a 	bl	800cc6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023c00 	.word	0x40023c00

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x54>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x58>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	fbb3 f3f1 	udiv	r3, r3, r1
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 ff39 	bl	80017fa <HAL_SYSTICK_Config>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e00e      	b.n	80009b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d80a      	bhi.n	80009ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f000 ff01 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <HAL_InitTick+0x5c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004
 80009c0:	20000000 	.word	0x20000000

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000274 	.word	0x20000274

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff ffee 	bl	80009c4 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_Delay+0x40>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffde 	bl	80009c4 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d101      	bne.n	8000a32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e0ed      	b.n	8000c0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d102      	bne.n	8000a44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f00c f93c 	bl	800ccbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f022 0202 	bic.w	r2, r2, #2
 8000a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a54:	f7ff ffb6 	bl	80009c4 <HAL_GetTick>
 8000a58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a5a:	e012      	b.n	8000a82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a5c:	f7ff ffb2 	bl	80009c4 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	2b0a      	cmp	r3, #10
 8000a68:	d90b      	bls.n	8000a82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2205      	movs	r2, #5
 8000a7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e0c5      	b.n	8000c0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1e5      	bne.n	8000a5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0201 	orr.w	r2, r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aa0:	f7ff ff90 	bl	80009c4 <HAL_GetTick>
 8000aa4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aa6:	e012      	b.n	8000ace <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aa8:	f7ff ff8c 	bl	80009c4 <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	2b0a      	cmp	r3, #10
 8000ab4:	d90b      	bls.n	8000ace <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e09f      	b.n	8000c0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0e5      	beq.n	8000aa8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7e1b      	ldrb	r3, [r3, #24]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d108      	bne.n	8000af6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e007      	b.n	8000b06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7e5b      	ldrb	r3, [r3, #25]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d108      	bne.n	8000b20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e007      	b.n	8000b30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e9b      	ldrb	r3, [r3, #26]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d108      	bne.n	8000b4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f042 0220 	orr.w	r2, r2, #32
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e007      	b.n	8000b5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 0220 	bic.w	r2, r2, #32
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7edb      	ldrb	r3, [r3, #27]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d108      	bne.n	8000b74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0210 	bic.w	r2, r2, #16
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	e007      	b.n	8000b84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 0210 	orr.w	r2, r2, #16
 8000b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7f1b      	ldrb	r3, [r3, #28]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d108      	bne.n	8000b9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 0208 	orr.w	r2, r2, #8
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	e007      	b.n	8000bae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0208 	bic.w	r2, r2, #8
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7f5b      	ldrb	r3, [r3, #29]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d108      	bne.n	8000bc8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f042 0204 	orr.w	r2, r2, #4
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 0204 	bic.w	r2, r2, #4
 8000bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	431a      	orrs	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	431a      	orrs	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	ea42 0103 	orr.w	r1, r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	1e5a      	subs	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c30:	7cfb      	ldrb	r3, [r7, #19]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d003      	beq.n	8000c3e <HAL_CAN_ConfigFilter+0x26>
 8000c36:	7cfb      	ldrb	r3, [r7, #19]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	f040 80be 	bne.w	8000dba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000c3e:	4b65      	ldr	r3, [pc, #404]	; (8000dd4 <HAL_CAN_ConfigFilter+0x1bc>)
 8000c40:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c48:	f043 0201 	orr.w	r2, r3, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f003 031f 	and.w	r3, r3, #31
 8000c7e:	2201      	movs	r2, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	401a      	ands	r2, r3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d123      	bne.n	8000ce8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cc2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3248      	adds	r2, #72	; 0x48
 8000cc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cdc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cde:	6979      	ldr	r1, [r7, #20]
 8000ce0:	3348      	adds	r3, #72	; 0x48
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	440b      	add	r3, r1
 8000ce6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d122      	bne.n	8000d36 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d10:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3248      	adds	r2, #72	; 0x48
 8000d16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d2c:	6979      	ldr	r1, [r7, #20]
 8000d2e:	3348      	adds	r3, #72	; 0x48
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	440b      	add	r3, r1
 8000d34:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d109      	bne.n	8000d52 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	401a      	ands	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d50:	e007      	b.n	8000d62 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d109      	bne.n	8000d7e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	401a      	ands	r2, r3
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000d7c:	e007      	b.n	8000d8e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	431a      	orrs	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	6a1b      	ldr	r3, [r3, #32]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d107      	bne.n	8000da6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dac:	f023 0201 	bic.w	r2, r3, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e006      	b.n	8000dc8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
  }
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	371c      	adds	r7, #28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40006400 	.word	0x40006400

08000dd8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000df6:	7ffb      	ldrb	r3, [r7, #31]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d003      	beq.n	8000e04 <HAL_CAN_AddTxMessage+0x2c>
 8000dfc:	7ffb      	ldrb	r3, [r7, #31]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	f040 80b8 	bne.w	8000f74 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10a      	bne.n	8000e24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d105      	bne.n	8000e24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80a0 	beq.w	8000f64 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	0e1b      	lsrs	r3, r3, #24
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d907      	bls.n	8000e44 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e09e      	b.n	8000f82 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e44:	2201      	movs	r2, #1
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	409a      	lsls	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10d      	bne.n	8000e72 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e60:	68f9      	ldr	r1, [r7, #12]
 8000e62:	6809      	ldr	r1, [r1, #0]
 8000e64:	431a      	orrs	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3318      	adds	r3, #24
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	440b      	add	r3, r1
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e00f      	b.n	8000e92 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e7c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e82:	68f9      	ldr	r1, [r7, #12]
 8000e84:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e86:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3318      	adds	r3, #24
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	440b      	add	r3, r1
 8000e90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	691a      	ldr	r2, [r3, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3318      	adds	r3, #24
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	440b      	add	r3, r1
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	7d1b      	ldrb	r3, [r3, #20]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d111      	bne.n	8000ed2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3318      	adds	r3, #24
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	4413      	add	r3, r2
 8000eba:	3304      	adds	r3, #4
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	6811      	ldr	r1, [r2, #0]
 8000ec2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3318      	adds	r3, #24
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	440b      	add	r3, r1
 8000ece:	3304      	adds	r3, #4
 8000ed0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3307      	adds	r3, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	061a      	lsls	r2, r3, #24
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3306      	adds	r3, #6
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	041b      	lsls	r3, r3, #16
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3305      	adds	r3, #5
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	4313      	orrs	r3, r2
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	3204      	adds	r2, #4
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	6811      	ldr	r1, [r2, #0]
 8000efa:	ea43 0200 	orr.w	r2, r3, r0
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	011b      	lsls	r3, r3, #4
 8000f02:	440b      	add	r3, r1
 8000f04:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3303      	adds	r3, #3
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	061a      	lsls	r2, r3, #24
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3302      	adds	r3, #2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	4313      	orrs	r3, r2
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	7812      	ldrb	r2, [r2, #0]
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	6811      	ldr	r1, [r2, #0]
 8000f30:	ea43 0200 	orr.w	r2, r3, r0
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	440b      	add	r3, r1
 8000f3a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3318      	adds	r3, #24
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	4413      	add	r3, r2
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	6811      	ldr	r1, [r2, #0]
 8000f52:	f043 0201 	orr.w	r2, r3, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3318      	adds	r3, #24
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	440b      	add	r3, r1
 8000f5e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	e00e      	b.n	8000f82 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e006      	b.n	8000f82 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
  }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b087      	sub	sp, #28
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d003      	beq.n	8000fb2 <HAL_CAN_GetRxMessage+0x24>
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	f040 80f3 	bne.w	8001198 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10e      	bne.n	8000fd6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d116      	bne.n	8000ff4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0e7      	b.n	80011a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d107      	bne.n	8000ff4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e0d8      	b.n	80011a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	331b      	adds	r3, #27
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	4413      	add	r3, r2
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0204 	and.w	r2, r3, #4
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10c      	bne.n	800102c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	331b      	adds	r3, #27
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	4413      	add	r3, r2
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0d5b      	lsrs	r3, r3, #21
 8001022:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	e00b      	b.n	8001044 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	331b      	adds	r3, #27
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	4413      	add	r3, r2
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	331b      	adds	r3, #27
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	4413      	add	r3, r2
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0202 	and.w	r2, r3, #2
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	331b      	adds	r3, #27
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	4413      	add	r3, r2
 8001066:	3304      	adds	r3, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 020f 	and.w	r2, r3, #15
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	331b      	adds	r3, #27
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	3304      	adds	r3, #4
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	b2da      	uxtb	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	331b      	adds	r3, #27
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	4413      	add	r3, r2
 8001096:	3304      	adds	r3, #4
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0c1b      	lsrs	r3, r3, #16
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	4413      	add	r3, r2
 80010ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4413      	add	r3, r2
 80010c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0a1a      	lsrs	r2, r3, #8
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	4413      	add	r3, r2
 80010dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	0c1a      	lsrs	r2, r3, #16
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	3302      	adds	r3, #2
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	4413      	add	r3, r2
 80010f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	0e1a      	lsrs	r2, r3, #24
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	3303      	adds	r3, #3
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	4413      	add	r3, r2
 8001110:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	3304      	adds	r3, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	4413      	add	r3, r2
 8001128:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0a1a      	lsrs	r2, r3, #8
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	3305      	adds	r3, #5
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	4413      	add	r3, r2
 8001142:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	0c1a      	lsrs	r2, r3, #16
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	3306      	adds	r3, #6
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	4413      	add	r3, r2
 800115c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0e1a      	lsrs	r2, r3, #24
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	3307      	adds	r3, #7
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d108      	bne.n	8001184 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0220 	orr.w	r2, r2, #32
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	e007      	b.n	8001194 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0220 	orr.w	r2, r2, #32
 8001192:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	e006      	b.n	80011a6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
  }
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b08a      	sub	sp, #40	; 0x28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d07c      	beq.n	80012f2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d023      	beq.n	800124a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2201      	movs	r2, #1
 8001208:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f97d 	bl	8001514 <HAL_CAN_TxMailbox0CompleteCallback>
 800121a:	e016      	b.n	800124a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	e00c      	b.n	800124a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d004      	beq.n	8001244 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
 8001242:	e002      	b.n	800124a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f983 	bl	8001550 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d024      	beq.n	800129e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f95d 	bl	8001528 <HAL_CAN_TxMailbox1CompleteCallback>
 800126e:	e016      	b.n	800129e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	e00c      	b.n	800129e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
 8001296:	e002      	b.n	800129e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f963 	bl	8001564 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d024      	beq.n	80012f2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f93d 	bl	800153c <HAL_CAN_TxMailbox2CompleteCallback>
 80012c2:	e016      	b.n	80012f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
 80012d6:	e00c      	b.n	80012f2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	e002      	b.n	80012f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f943 	bl	8001578 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00c      	beq.n	8001316 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2210      	movs	r2, #16
 8001314:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00b      	beq.n	8001338 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2208      	movs	r2, #8
 8001330:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f92a 	bl	800158c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f00a fc6f 	bl	800bc34 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00c      	beq.n	800137a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001370:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2210      	movs	r2, #16
 8001378:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00b      	beq.n	800139c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2208      	movs	r2, #8
 8001394:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f902 	bl	80015a0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d009      	beq.n	80013ba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f00a fcd3 	bl	800bd60 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00b      	beq.n	80013dc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d006      	beq.n	80013dc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2210      	movs	r2, #16
 80013d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f8ec 	bl	80015b4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2208      	movs	r2, #8
 80013f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f8e5 	bl	80015c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d075      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d06c      	beq.n	80014ec <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d008      	beq.n	8001466 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800146c:	2b00      	cmp	r3, #0
 800146e:	d03d      	beq.n	80014ec <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001476:	2b00      	cmp	r3, #0
 8001478:	d038      	beq.n	80014ec <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001480:	2b30      	cmp	r3, #48	; 0x30
 8001482:	d017      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x302>
 8001484:	2b30      	cmp	r3, #48	; 0x30
 8001486:	d804      	bhi.n	8001492 <HAL_CAN_IRQHandler+0x2e0>
 8001488:	2b10      	cmp	r3, #16
 800148a:	d009      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x2ee>
 800148c:	2b20      	cmp	r3, #32
 800148e:	d00c      	beq.n	80014aa <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001490:	e024      	b.n	80014dc <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001492:	2b50      	cmp	r3, #80	; 0x50
 8001494:	d018      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x316>
 8001496:	2b60      	cmp	r3, #96	; 0x60
 8001498:	d01b      	beq.n	80014d2 <HAL_CAN_IRQHandler+0x320>
 800149a:	2b40      	cmp	r3, #64	; 0x40
 800149c:	d00f      	beq.n	80014be <HAL_CAN_IRQHandler+0x30c>
            break;
 800149e:	e01d      	b.n	80014dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014a8:	e018      	b.n	80014dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	f043 0310 	orr.w	r3, r3, #16
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014b2:	e013      	b.n	80014dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	f043 0320 	orr.w	r3, r3, #32
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014bc:	e00e      	b.n	80014dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014c6:	e009      	b.n	80014dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014d0:	e004      	b.n	80014dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699a      	ldr	r2, [r3, #24]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2204      	movs	r2, #4
 80014f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f868 	bl	80015dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff29 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff3e 	bl	8001638 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff8e 	bl	80016e4 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff31 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	e165      	b.n	8001afc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	429a      	cmp	r2, r3
 800184a:	f040 8154 	bne.w	8001af6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d00b      	beq.n	800186e <HAL_GPIO_Init+0x5a>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d007      	beq.n	800186e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001862:	2b11      	cmp	r3, #17
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b12      	cmp	r3, #18
 800186c:	d130      	bne.n	80018d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a4:	2201      	movs	r2, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 0201 	and.w	r2, r3, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0xfc>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b12      	cmp	r3, #18
 800190e:	d123      	bne.n	8001958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	08da      	lsrs	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3208      	adds	r2, #8
 8001918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	220f      	movs	r2, #15
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	08da      	lsrs	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3208      	adds	r2, #8
 8001952:	69b9      	ldr	r1, [r7, #24]
 8001954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0203 	and.w	r2, r3, #3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80ae 	beq.w	8001af6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <HAL_GPIO_Init+0x2fc>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a5b      	ldr	r2, [pc, #364]	; (8001b10 <HAL_GPIO_Init+0x2fc>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_GPIO_Init+0x2fc>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019b6:	4a57      	ldr	r2, [pc, #348]	; (8001b14 <HAL_GPIO_Init+0x300>)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	220f      	movs	r2, #15
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4e      	ldr	r2, [pc, #312]	; (8001b18 <HAL_GPIO_Init+0x304>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d025      	beq.n	8001a2e <HAL_GPIO_Init+0x21a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4d      	ldr	r2, [pc, #308]	; (8001b1c <HAL_GPIO_Init+0x308>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d01f      	beq.n	8001a2a <HAL_GPIO_Init+0x216>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <HAL_GPIO_Init+0x30c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d019      	beq.n	8001a26 <HAL_GPIO_Init+0x212>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_GPIO_Init+0x310>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0x20e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4a      	ldr	r2, [pc, #296]	; (8001b28 <HAL_GPIO_Init+0x314>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00d      	beq.n	8001a1e <HAL_GPIO_Init+0x20a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <HAL_GPIO_Init+0x318>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x206>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a48      	ldr	r2, [pc, #288]	; (8001b30 <HAL_GPIO_Init+0x31c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_GPIO_Init+0x202>
 8001a12:	2306      	movs	r3, #6
 8001a14:	e00c      	b.n	8001a30 <HAL_GPIO_Init+0x21c>
 8001a16:	2307      	movs	r3, #7
 8001a18:	e00a      	b.n	8001a30 <HAL_GPIO_Init+0x21c>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	e008      	b.n	8001a30 <HAL_GPIO_Init+0x21c>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x21c>
 8001a22:	2303      	movs	r3, #3
 8001a24:	e004      	b.n	8001a30 <HAL_GPIO_Init+0x21c>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_Init+0x21c>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x21c>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	f002 0203 	and.w	r2, r2, #3
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a40:	4934      	ldr	r1, [pc, #208]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_GPIO_Init+0x320>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a72:	4a30      	ldr	r2, [pc, #192]	; (8001b34 <HAL_GPIO_Init+0x320>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_GPIO_Init+0x320>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a9c:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <HAL_GPIO_Init+0x320>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_GPIO_Init+0x320>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_GPIO_Init+0x320>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_GPIO_Init+0x320>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af0:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_GPIO_Init+0x320>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b0f      	cmp	r3, #15
 8001b00:	f67f ae96 	bls.w	8001830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b04:	bf00      	nop
 8001b06:	3724      	adds	r7, #36	; 0x24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40013800 	.word	0x40013800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020c00 	.word	0x40020c00
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40021400 	.word	0x40021400
 8001b30:	40021800 	.word	0x40021800
 8001b34:	40013c00 	.word	0x40013c00

08001b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e001      	b.n	8001b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	619a      	str	r2, [r3, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	401a      	ands	r2, r3
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d104      	bne.n	8001bbe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	041a      	lsls	r2, r3, #16
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0cc      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be4:	4b68      	ldr	r3, [pc, #416]	; (8001d88 <HAL_RCC_ClockConfig+0x1b8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d90c      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b65      	ldr	r3, [pc, #404]	; (8001d88 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0b8      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c24:	4b59      	ldr	r3, [pc, #356]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4a58      	ldr	r2, [pc, #352]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c3c:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c48:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	494d      	ldr	r1, [pc, #308]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d044      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d119      	bne.n	8001cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e07f      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d003      	beq.n	8001c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8e:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e06f      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9e:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e067      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cae:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f023 0203 	bic.w	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4934      	ldr	r1, [pc, #208]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc0:	f7fe fe80 	bl	80009c4 <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc8:	f7fe fe7c 	bl	80009c4 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e04f      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 020c 	and.w	r2, r3, #12
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d1eb      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d20c      	bcs.n	8001d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <HAL_RCC_ClockConfig+0x1b8>)
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_RCC_ClockConfig+0x1b8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e032      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4916      	ldr	r1, [pc, #88]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	490e      	ldr	r1, [pc, #56]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d56:	f000 fb4b 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d6e:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fdf4 	bl	8000964 <HAL_InitTick>

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023c00 	.word	0x40023c00
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	0800dadc 	.word	0x0800dadc
 8001d94:	20000008 	.word	0x20000008
 8001d98:	20000000 	.word	0x20000000

08001d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d010      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dda:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	496c      	ldr	r1, [pc, #432]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001df2:	2301      	movs	r3, #1
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d010      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001e02:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e08:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	4960      	ldr	r1, [pc, #384]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001e20:	2301      	movs	r3, #1
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d017      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e30:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4955      	ldr	r1, [pc, #340]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001e50:	2301      	movs	r3, #1
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d017      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e6c:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7a:	4946      	ldr	r1, [pc, #280]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 808a 	beq.w	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a38      	ldr	r2, [pc, #224]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a33      	ldr	r2, [pc, #204]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ed2:	f7fe fd77 	bl	80009c4 <HAL_GetTick>
 8001ed6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001eda:	f7fe fd73 	bl	80009c4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e278      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001eec:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f00:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02f      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f10:	6a3a      	ldr	r2, [r7, #32]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d028      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f1e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001f2c:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d114      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fd41 	bl	80009c4 <HAL_GetTick>
 8001f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fd3d 	bl	80009c4 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e240      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ee      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f74:	d114      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8a:	4902      	ldr	r1, [pc, #8]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
 8001f90:	e00c      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	42470e40 	.word	0x42470e40
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a49      	ldr	r2, [pc, #292]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fa6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001faa:	6093      	str	r3, [r2, #8]
 8001fac:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb8:	4944      	ldr	r1, [pc, #272]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001fd0:	4b3f      	ldr	r3, [pc, #252]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001fd2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	4937      	ldr	r1, [pc, #220]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002002:	4b32      	ldr	r3, [pc, #200]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002008:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002010:	492e      	ldr	r1, [pc, #184]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d011      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	4926      	ldr	r1, [pc, #152]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002042:	d101      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002044:	2301      	movs	r3, #1
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	491a      	ldr	r1, [pc, #104]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002072:	2b00      	cmp	r3, #0
 8002074:	d011      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002084:	4911      	ldr	r1, [pc, #68]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002094:	d101      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002096:	2301      	movs	r3, #1
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	2b01      	cmp	r3, #1
 800209e:	d005      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020a8:	f040 80ff 	bne.w	80022aa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020b2:	f7fe fc87 	bl	80009c4 <HAL_GetTick>
 80020b6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020b8:	e00e      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020ba:	f7fe fc83 	bl	80009c4 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d907      	bls.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e188      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
 80020cc:	40023800 	.word	0x40023800
 80020d0:	424711e0 	.word	0x424711e0
 80020d4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020d8:	4b7e      	ldr	r3, [pc, #504]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ea      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002100:	2b00      	cmp	r3, #0
 8002102:	d028      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d124      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800210c:	4b71      	ldr	r3, [pc, #452]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800210e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	3301      	adds	r3, #1
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800211e:	4b6d      	ldr	r3, [pc, #436]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002124:	0e1b      	lsrs	r3, r3, #24
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	431a      	orrs	r2, r3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	3b01      	subs	r3, #1
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	431a      	orrs	r2, r3
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	071b      	lsls	r3, r3, #28
 800214e:	4961      	ldr	r1, [pc, #388]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d004      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002174:	2b00      	cmp	r3, #0
 8002176:	d035      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002180:	d130      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002182:	4b54      	ldr	r3, [pc, #336]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	3301      	adds	r3, #1
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002194:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800219a:	0f1b      	lsrs	r3, r3, #28
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	019b      	lsls	r3, r3, #6
 80021ac:	431a      	orrs	r2, r3
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	431a      	orrs	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	071b      	lsls	r3, r3, #28
 80021c4:	4943      	ldr	r1, [pc, #268]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021cc:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d2:	f023 021f 	bic.w	r2, r3, #31
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	3b01      	subs	r3, #1
 80021dc:	493d      	ldr	r1, [pc, #244]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d029      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021f8:	d124      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80021fa:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	3301      	adds	r3, #1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800220e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002212:	0f1b      	lsrs	r3, r3, #28
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	019b      	lsls	r3, r3, #6
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	3b01      	subs	r3, #1
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	431a      	orrs	r2, r3
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	431a      	orrs	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	071b      	lsls	r3, r3, #28
 800223c:	4925      	ldr	r1, [pc, #148]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800224c:	2b00      	cmp	r3, #0
 800224e:	d016      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	019b      	lsls	r3, r3, #6
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	3b01      	subs	r3, #1
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	071b      	lsls	r3, r3, #28
 8002276:	4917      	ldr	r1, [pc, #92]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002284:	f7fe fb9e 	bl	80009c4 <HAL_GetTick>
 8002288:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800228c:	f7fe fb9a 	bl	80009c4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e09f      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	f040 8095 	bne.w	80023dc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022b8:	f7fe fb84 	bl	80009c4 <HAL_GetTick>
 80022bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022be:	e00f      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80022c0:	f7fe fb80 	bl	80009c4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d908      	bls.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e085      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	42470068 	.word	0x42470068
 80022dc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022e0:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ec:	d0e8      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800230a:	2b00      	cmp	r3, #0
 800230c:	d02b      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002312:	2b00      	cmp	r3, #0
 8002314:	d127      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002316:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	3301      	adds	r3, #1
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	019b      	lsls	r3, r3, #6
 8002332:	431a      	orrs	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	3b01      	subs	r3, #1
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	061b      	lsls	r3, r3, #24
 8002344:	4928      	ldr	r1, [pc, #160]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800234e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002352:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	3b01      	subs	r3, #1
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	4922      	ldr	r1, [pc, #136]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01d      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800237a:	d118      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	0e1b      	lsrs	r3, r3, #24
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	019b      	lsls	r3, r3, #6
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	3b01      	subs	r3, #1
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	4910      	ldr	r1, [pc, #64]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023b4:	f7fe fb06 	bl	80009c4 <HAL_GetTick>
 80023b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80023bc:	f7fe fb02 	bl	80009c4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e007      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023da:	d1ef      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3730      	adds	r7, #48	; 0x30
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	42470070 	.word	0x42470070

080023f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800240a:	4b9f      	ldr	r3, [pc, #636]	; (8002688 <HAL_RCC_GetSysClockFreq+0x298>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b0c      	cmp	r3, #12
 8002414:	f200 8130 	bhi.w	8002678 <HAL_RCC_GetSysClockFreq+0x288>
 8002418:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <HAL_RCC_GetSysClockFreq+0x30>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	08002455 	.word	0x08002455
 8002424:	08002679 	.word	0x08002679
 8002428:	08002679 	.word	0x08002679
 800242c:	08002679 	.word	0x08002679
 8002430:	0800245b 	.word	0x0800245b
 8002434:	08002679 	.word	0x08002679
 8002438:	08002679 	.word	0x08002679
 800243c:	08002679 	.word	0x08002679
 8002440:	08002461 	.word	0x08002461
 8002444:	08002679 	.word	0x08002679
 8002448:	08002679 	.word	0x08002679
 800244c:	08002679 	.word	0x08002679
 8002450:	0800256f 	.word	0x0800256f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002454:	4b8d      	ldr	r3, [pc, #564]	; (800268c <HAL_RCC_GetSysClockFreq+0x29c>)
 8002456:	613b      	str	r3, [r7, #16]
       break;
 8002458:	e111      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800245a:	4b8d      	ldr	r3, [pc, #564]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800245c:	613b      	str	r3, [r7, #16]
      break;
 800245e:	e10e      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002460:	4b89      	ldr	r3, [pc, #548]	; (8002688 <HAL_RCC_GetSysClockFreq+0x298>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002468:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800246a:	4b87      	ldr	r3, [pc, #540]	; (8002688 <HAL_RCC_GetSysClockFreq+0x298>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d023      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002476:	4b84      	ldr	r3, [pc, #528]	; (8002688 <HAL_RCC_GetSysClockFreq+0x298>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	099b      	lsrs	r3, r3, #6
 800247c:	f04f 0400 	mov.w	r4, #0
 8002480:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	ea03 0501 	and.w	r5, r3, r1
 800248c:	ea04 0602 	and.w	r6, r4, r2
 8002490:	4a7f      	ldr	r2, [pc, #508]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002492:	fb02 f106 	mul.w	r1, r2, r6
 8002496:	2200      	movs	r2, #0
 8002498:	fb02 f205 	mul.w	r2, r2, r5
 800249c:	440a      	add	r2, r1
 800249e:	497c      	ldr	r1, [pc, #496]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80024a0:	fba5 0101 	umull	r0, r1, r5, r1
 80024a4:	1853      	adds	r3, r2, r1
 80024a6:	4619      	mov	r1, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f04f 0400 	mov.w	r4, #0
 80024ae:	461a      	mov	r2, r3
 80024b0:	4623      	mov	r3, r4
 80024b2:	f7fe f8b5 	bl	8000620 <__aeabi_uldivmod>
 80024b6:	4603      	mov	r3, r0
 80024b8:	460c      	mov	r4, r1
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	e049      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024be:	4b72      	ldr	r3, [pc, #456]	; (8002688 <HAL_RCC_GetSysClockFreq+0x298>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	099b      	lsrs	r3, r3, #6
 80024c4:	f04f 0400 	mov.w	r4, #0
 80024c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	ea03 0501 	and.w	r5, r3, r1
 80024d4:	ea04 0602 	and.w	r6, r4, r2
 80024d8:	4629      	mov	r1, r5
 80024da:	4632      	mov	r2, r6
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	f04f 0400 	mov.w	r4, #0
 80024e4:	0154      	lsls	r4, r2, #5
 80024e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024ea:	014b      	lsls	r3, r1, #5
 80024ec:	4619      	mov	r1, r3
 80024ee:	4622      	mov	r2, r4
 80024f0:	1b49      	subs	r1, r1, r5
 80024f2:	eb62 0206 	sbc.w	r2, r2, r6
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	f04f 0400 	mov.w	r4, #0
 80024fe:	0194      	lsls	r4, r2, #6
 8002500:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002504:	018b      	lsls	r3, r1, #6
 8002506:	1a5b      	subs	r3, r3, r1
 8002508:	eb64 0402 	sbc.w	r4, r4, r2
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	00e2      	lsls	r2, r4, #3
 8002516:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800251a:	00d9      	lsls	r1, r3, #3
 800251c:	460b      	mov	r3, r1
 800251e:	4614      	mov	r4, r2
 8002520:	195b      	adds	r3, r3, r5
 8002522:	eb44 0406 	adc.w	r4, r4, r6
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	02a2      	lsls	r2, r4, #10
 8002530:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002534:	0299      	lsls	r1, r3, #10
 8002536:	460b      	mov	r3, r1
 8002538:	4614      	mov	r4, r2
 800253a:	4618      	mov	r0, r3
 800253c:	4621      	mov	r1, r4
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f04f 0400 	mov.w	r4, #0
 8002544:	461a      	mov	r2, r3
 8002546:	4623      	mov	r3, r4
 8002548:	f7fe f86a 	bl	8000620 <__aeabi_uldivmod>
 800254c:	4603      	mov	r3, r0
 800254e:	460c      	mov	r4, r1
 8002550:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002552:	4b4d      	ldr	r3, [pc, #308]	; (8002688 <HAL_RCC_GetSysClockFreq+0x298>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	0c1b      	lsrs	r3, r3, #16
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	3301      	adds	r3, #1
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	613b      	str	r3, [r7, #16]
      break;
 800256c:	e087      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800256e:	4b46      	ldr	r3, [pc, #280]	; (8002688 <HAL_RCC_GetSysClockFreq+0x298>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002576:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002578:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCC_GetSysClockFreq+0x298>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d023      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002584:	4b40      	ldr	r3, [pc, #256]	; (8002688 <HAL_RCC_GetSysClockFreq+0x298>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	f04f 0400 	mov.w	r4, #0
 800258e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	ea03 0501 	and.w	r5, r3, r1
 800259a:	ea04 0602 	and.w	r6, r4, r2
 800259e:	4a3c      	ldr	r2, [pc, #240]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80025a0:	fb02 f106 	mul.w	r1, r2, r6
 80025a4:	2200      	movs	r2, #0
 80025a6:	fb02 f205 	mul.w	r2, r2, r5
 80025aa:	440a      	add	r2, r1
 80025ac:	4938      	ldr	r1, [pc, #224]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80025ae:	fba5 0101 	umull	r0, r1, r5, r1
 80025b2:	1853      	adds	r3, r2, r1
 80025b4:	4619      	mov	r1, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f04f 0400 	mov.w	r4, #0
 80025bc:	461a      	mov	r2, r3
 80025be:	4623      	mov	r3, r4
 80025c0:	f7fe f82e 	bl	8000620 <__aeabi_uldivmod>
 80025c4:	4603      	mov	r3, r0
 80025c6:	460c      	mov	r4, r1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e049      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025cc:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <HAL_RCC_GetSysClockFreq+0x298>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	f04f 0400 	mov.w	r4, #0
 80025d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	ea03 0501 	and.w	r5, r3, r1
 80025e2:	ea04 0602 	and.w	r6, r4, r2
 80025e6:	4629      	mov	r1, r5
 80025e8:	4632      	mov	r2, r6
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	f04f 0400 	mov.w	r4, #0
 80025f2:	0154      	lsls	r4, r2, #5
 80025f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025f8:	014b      	lsls	r3, r1, #5
 80025fa:	4619      	mov	r1, r3
 80025fc:	4622      	mov	r2, r4
 80025fe:	1b49      	subs	r1, r1, r5
 8002600:	eb62 0206 	sbc.w	r2, r2, r6
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	f04f 0400 	mov.w	r4, #0
 800260c:	0194      	lsls	r4, r2, #6
 800260e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002612:	018b      	lsls	r3, r1, #6
 8002614:	1a5b      	subs	r3, r3, r1
 8002616:	eb64 0402 	sbc.w	r4, r4, r2
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	00e2      	lsls	r2, r4, #3
 8002624:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002628:	00d9      	lsls	r1, r3, #3
 800262a:	460b      	mov	r3, r1
 800262c:	4614      	mov	r4, r2
 800262e:	195b      	adds	r3, r3, r5
 8002630:	eb44 0406 	adc.w	r4, r4, r6
 8002634:	f04f 0100 	mov.w	r1, #0
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	02a2      	lsls	r2, r4, #10
 800263e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002642:	0299      	lsls	r1, r3, #10
 8002644:	460b      	mov	r3, r1
 8002646:	4614      	mov	r4, r2
 8002648:	4618      	mov	r0, r3
 800264a:	4621      	mov	r1, r4
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f04f 0400 	mov.w	r4, #0
 8002652:	461a      	mov	r2, r3
 8002654:	4623      	mov	r3, r4
 8002656:	f7fd ffe3 	bl	8000620 <__aeabi_uldivmod>
 800265a:	4603      	mov	r3, r0
 800265c:	460c      	mov	r4, r1
 800265e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_GetSysClockFreq+0x298>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	0f1b      	lsrs	r3, r3, #28
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	613b      	str	r3, [r7, #16]
      break;
 8002676:	e002      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_RCC_GetSysClockFreq+0x29c>)
 800267a:	613b      	str	r3, [r7, #16]
      break;
 800267c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267e:	693b      	ldr	r3, [r7, #16]
}
 8002680:	4618      	mov	r0, r3
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	017d7840 	.word	0x017d7840

08002694 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8083 	beq.w	80027b4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026ae:	4b95      	ldr	r3, [pc, #596]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d019      	beq.n	80026ee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026ba:	4b92      	ldr	r3, [pc, #584]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026c6:	4b8f      	ldr	r3, [pc, #572]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d2:	d00c      	beq.n	80026ee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d4:	4b8b      	ldr	r3, [pc, #556]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026dc:	2b0c      	cmp	r3, #12
 80026de:	d112      	bne.n	8002706 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e0:	4b88      	ldr	r3, [pc, #544]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ec:	d10b      	bne.n	8002706 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ee:	4b85      	ldr	r3, [pc, #532]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d05b      	beq.n	80027b2 <HAL_RCC_OscConfig+0x11e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d157      	bne.n	80027b2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e216      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x8a>
 8002710:	4b7c      	ldr	r3, [pc, #496]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a7b      	ldr	r2, [pc, #492]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e01d      	b.n	800275a <HAL_RCC_OscConfig+0xc6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002726:	d10c      	bne.n	8002742 <HAL_RCC_OscConfig+0xae>
 8002728:	4b76      	ldr	r3, [pc, #472]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a75      	ldr	r2, [pc, #468]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 800272e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b73      	ldr	r3, [pc, #460]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a72      	ldr	r2, [pc, #456]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0xc6>
 8002742:	4b70      	ldr	r3, [pc, #448]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6f      	ldr	r2, [pc, #444]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b6d      	ldr	r3, [pc, #436]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6c      	ldr	r2, [pc, #432]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002758:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d013      	beq.n	800278a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe f92f 	bl	80009c4 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276a:	f7fe f92b 	bl	80009c4 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	; 0x64
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e1db      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277c:	4b61      	ldr	r3, [pc, #388]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0xd6>
 8002788:	e014      	b.n	80027b4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7fe f91b 	bl	80009c4 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002792:	f7fe f917 	bl	80009c4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b64      	cmp	r3, #100	; 0x64
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e1c7      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a4:	4b57      	ldr	r3, [pc, #348]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0xfe>
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d06f      	beq.n	80028a0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027c0:	4b50      	ldr	r3, [pc, #320]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d017      	beq.n	80027fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027cc:	4b4d      	ldr	r3, [pc, #308]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d105      	bne.n	80027e4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027d8:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e4:	4b47      	ldr	r3, [pc, #284]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	d11c      	bne.n	800282a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f0:	4b44      	ldr	r3, [pc, #272]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d116      	bne.n	800282a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fc:	4b41      	ldr	r3, [pc, #260]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x180>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d001      	beq.n	8002814 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e18f      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4938      	ldr	r1, [pc, #224]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002828:	e03a      	b.n	80028a0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d020      	beq.n	8002874 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002832:	4b35      	ldr	r3, [pc, #212]	; (8002908 <HAL_RCC_OscConfig+0x274>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe f8c4 	bl	80009c4 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002840:	f7fe f8c0 	bl	80009c4 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e170      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b29      	ldr	r3, [pc, #164]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4925      	ldr	r1, [pc, #148]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
 8002872:	e015      	b.n	80028a0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <HAL_RCC_OscConfig+0x274>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7fe f8a3 	bl	80009c4 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002882:	f7fe f89f 	bl	80009c4 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e14f      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d037      	beq.n	800291c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d016      	beq.n	80028e2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_RCC_OscConfig+0x278>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe f883 	bl	80009c4 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c2:	f7fe f87f 	bl	80009c4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e12f      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_OscConfig+0x270>)
 80028d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x22e>
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_RCC_OscConfig+0x278>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe f86c 	bl	80009c4 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ee:	e00f      	b.n	8002910 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f0:	f7fe f868 	bl	80009c4 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d908      	bls.n	8002910 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e118      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	42470000 	.word	0x42470000
 800290c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	4b8a      	ldr	r3, [pc, #552]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e9      	bne.n	80028f0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8097 	beq.w	8002a58 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292e:	4b83      	ldr	r3, [pc, #524]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b7f      	ldr	r3, [pc, #508]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	4a7e      	ldr	r2, [pc, #504]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
 800294a:	4b7c      	ldr	r3, [pc, #496]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002956:	2301      	movs	r3, #1
 8002958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295a:	4b79      	ldr	r3, [pc, #484]	; (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d118      	bne.n	8002998 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002966:	4b76      	ldr	r3, [pc, #472]	; (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a75      	ldr	r2, [pc, #468]	; (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002972:	f7fe f827 	bl	80009c4 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297a:	f7fe f823 	bl	80009c4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e0d3      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298c:	4b6c      	ldr	r3, [pc, #432]	; (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x31a>
 80029a0:	4b66      	ldr	r3, [pc, #408]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	4a65      	ldr	r2, [pc, #404]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6713      	str	r3, [r2, #112]	; 0x70
 80029ac:	e01c      	b.n	80029e8 <HAL_RCC_OscConfig+0x354>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x33c>
 80029b6:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	4a60      	ldr	r2, [pc, #384]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	6713      	str	r3, [r2, #112]	; 0x70
 80029c2:	4b5e      	ldr	r3, [pc, #376]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	4a5d      	ldr	r2, [pc, #372]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0x354>
 80029d0:	4b5a      	ldr	r3, [pc, #360]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a59      	ldr	r2, [pc, #356]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
 80029dc:	4b57      	ldr	r3, [pc, #348]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a56      	ldr	r2, [pc, #344]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fd ffe8 	bl	80009c4 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fd ffe4 	bl	80009c4 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e092      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	4b4b      	ldr	r3, [pc, #300]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0ee      	beq.n	80029f8 <HAL_RCC_OscConfig+0x364>
 8002a1a:	e014      	b.n	8002a46 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fd ffd2 	bl	80009c4 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fd ffce 	bl	80009c4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e07c      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3a:	4b40      	ldr	r3, [pc, #256]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1ee      	bne.n	8002a24 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	4a3a      	ldr	r2, [pc, #232]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d068      	beq.n	8002b32 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d060      	beq.n	8002b2e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d145      	bne.n	8002b00 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a74:	4b33      	ldr	r3, [pc, #204]	; (8002b44 <HAL_RCC_OscConfig+0x4b0>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fd ffa3 	bl	80009c4 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a82:	f7fd ff9f 	bl	80009c4 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e04f      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	019b      	lsls	r3, r3, #6
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	041b      	lsls	r3, r3, #16
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	061b      	lsls	r3, r3, #24
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	071b      	lsls	r3, r3, #28
 8002acc:	491b      	ldr	r1, [pc, #108]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_RCC_OscConfig+0x4b0>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fd ff74 	bl	80009c4 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fd ff70 	bl	80009c4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e020      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x44c>
 8002afe:	e018      	b.n	8002b32 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_RCC_OscConfig+0x4b0>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fd ff5d 	bl	80009c4 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fd ff59 	bl	80009c4 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e009      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_RCC_OscConfig+0x4a8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x47a>
 8002b2c:	e001      	b.n	8002b32 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40007000 	.word	0x40007000
 8002b44:	42470060 	.word	0x42470060

08002b48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e022      	b.n	8002ba0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d105      	bne.n	8002b72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f00a f957 	bl	800ce20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2203      	movs	r2, #3
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f814 	bl	8002ba8 <HAL_SD_InitCard>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00a      	b.n	8002ba0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002ba8:	b5b0      	push	{r4, r5, r7, lr}
 8002baa:	b08e      	sub	sp, #56	; 0x38
 8002bac:	af04      	add	r7, sp, #16
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002bc4:	2376      	movs	r3, #118	; 0x76
 8002bc6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681d      	ldr	r5, [r3, #0]
 8002bcc:	466c      	mov	r4, sp
 8002bce:	f107 0314 	add.w	r3, r7, #20
 8002bd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be0:	4628      	mov	r0, r5
 8002be2:	f002 fc25 	bl	8005430 <SDIO_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e031      	b.n	8002c5c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_SD_InitCard+0xbc>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fc5d 	bl	80054c2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_SD_InitCard+0xbc>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fefc 	bl	8003a0c <SD_PowerON>
 8002c14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e013      	b.n	8002c5c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fe1b 	bl	8003870 <SD_InitCard>
 8002c3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bdb0      	pop	{r4, r5, r7, pc}
 8002c64:	422580a0 	.word	0x422580a0

08002c68 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b092      	sub	sp, #72	; 0x48
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002c76:	f7fd fea5 	bl	80009c4 <HAL_GetTick>
 8002c7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d107      	bne.n	8002c9a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e1d7      	b.n	800304a <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	f040 81ca 	bne.w	800303c <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	441a      	add	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d907      	bls.n	8002ccc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e1be      	b.n	800304a <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2203      	movs	r2, #3
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d002      	beq.n	8002cea <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce6:	025b      	lsls	r3, r3, #9
 8002ce8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 fc78 	bl	80055e8 <SDMMC_CmdBlockLength>
 8002cf8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00f      	beq.n	8002d20 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a9a      	ldr	r2, [pc, #616]	; (8002f70 <HAL_SD_ReadBlocks+0x308>)
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e194      	b.n	800304a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	025b      	lsls	r3, r3, #9
 8002d2a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d2c:	2390      	movs	r3, #144	; 0x90
 8002d2e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002d30:	2302      	movs	r3, #2
 8002d32:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f107 0214 	add.w	r2, r7, #20
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 fc22 	bl	8005590 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d90a      	bls.n	8002d68 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2202      	movs	r2, #2
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 fc86 	bl	8005670 <SDMMC_CmdReadMultiBlock>
 8002d64:	6478      	str	r0, [r7, #68]	; 0x44
 8002d66:	e009      	b.n	8002d7c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d74:	4618      	mov	r0, r3
 8002d76:	f002 fc59 	bl	800562c <SDMMC_CmdReadSingleBlock>
 8002d7a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a7a      	ldr	r2, [pc, #488]	; (8002f70 <HAL_SD_ReadBlocks+0x308>)
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d90:	431a      	orrs	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e150      	b.n	800304a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002dac:	e061      	b.n	8002e72 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d03c      	beq.n	8002e36 <HAL_SD_ReadBlocks+0x1ce>
 8002dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d039      	beq.n	8002e36 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8002dc6:	e033      	b.n	8002e30 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f002 fb5a 	bl	8005486 <SDIO_ReadFIFO>
 8002dd2:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dda:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	3301      	adds	r3, #1
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de4:	3b01      	subs	r3, #1
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df4:	3301      	adds	r3, #1
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e06:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	3b01      	subs	r3, #1
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	0e1b      	lsrs	r3, r3, #24
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e20:	3301      	adds	r3, #1
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e26:	3b01      	subs	r3, #1
 8002e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8002e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e32:	2b07      	cmp	r3, #7
 8002e34:	d9c8      	bls.n	8002dc8 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002e36:	f7fd fdc5 	bl	80009c4 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d902      	bls.n	8002e4c <HAL_SD_ReadBlocks+0x1e4>
 8002e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d112      	bne.n	8002e72 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a47      	ldr	r2, [pc, #284]	; (8002f70 <HAL_SD_ReadBlocks+0x308>)
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e0eb      	b.n	800304a <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e78:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d096      	beq.n	8002dae <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d022      	beq.n	8002ed4 <HAL_SD_ReadBlocks+0x26c>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d91f      	bls.n	8002ed4 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d01b      	beq.n	8002ed4 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f002 fc4b 	bl	800573c <SDMMC_CmdStopTransfer>
 8002ea6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d012      	beq.n	8002ed4 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2f      	ldr	r2, [pc, #188]	; (8002f70 <HAL_SD_ReadBlocks+0x308>)
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0ba      	b.n	800304a <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d012      	beq.n	8002f08 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <HAL_SD_ReadBlocks+0x308>)
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	f043 0208 	orr.w	r2, r3, #8
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0a0      	b.n	800304a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d012      	beq.n	8002f3c <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <HAL_SD_ReadBlocks+0x308>)
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	f043 0202 	orr.w	r2, r3, #2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e086      	b.n	800304a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d063      	beq.n	8003012 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <HAL_SD_ReadBlocks+0x308>)
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	f043 0220 	orr.w	r2, r3, #32
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e06c      	b.n	800304a <HAL_SD_ReadBlocks+0x3e2>
 8002f70:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f002 fa84 	bl	8005486 <SDIO_ReadFIFO>
 8002f7e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f86:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f90:	3b01      	subs	r3, #1
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	0e1b      	lsrs	r3, r3, #24
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fcc:	3301      	adds	r3, #1
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002fd6:	f7fd fcf5 	bl	80009c4 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d902      	bls.n	8002fec <HAL_SD_ReadBlocks+0x384>
 8002fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d112      	bne.n	8003012 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a18      	ldr	r2, [pc, #96]	; (8003054 <HAL_SD_ReadBlocks+0x3ec>)
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e01b      	b.n	800304a <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_SD_ReadBlocks+0x3be>
 8003020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1a6      	bne.n	8002f74 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f240 523a 	movw	r2, #1338	; 0x53a
 800302e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e006      	b.n	800304a <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	3748      	adds	r7, #72	; 0x48
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	004005ff 	.word	0x004005ff

08003058 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b092      	sub	sp, #72	; 0x48
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003066:	f7fd fcad 	bl	80009c4 <HAL_GetTick>
 800306a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e182      	b.n	8003390 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	f040 8175 	bne.w	8003382 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800309e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	441a      	add	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d907      	bls.n	80030bc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e169      	b.n	8003390 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2203      	movs	r2, #3
 80030c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d002      	beq.n	80030da <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80030d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d6:	025b      	lsls	r3, r3, #9
 80030d8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030e2:	4618      	mov	r0, r3
 80030e4:	f002 fa80 	bl	80055e8 <SDMMC_CmdBlockLength>
 80030e8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80030ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00f      	beq.n	8003110 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a9c      	ldr	r2, [pc, #624]	; (8003368 <HAL_SD_WriteBlocks+0x310>)
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030fe:	431a      	orrs	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e13f      	b.n	8003390 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003110:	f04f 33ff 	mov.w	r3, #4294967295
 8003114:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	025b      	lsls	r3, r3, #9
 800311a:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800311c:	2390      	movs	r3, #144	; 0x90
 800311e:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003124:	2300      	movs	r3, #0
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003128:	2301      	movs	r3, #1
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f107 0218 	add.w	r2, r7, #24
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f002 fa2a 	bl	8005590 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d90a      	bls.n	8003158 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800314e:	4618      	mov	r0, r3
 8003150:	f002 fad2 	bl	80056f8 <SDMMC_CmdWriteMultiBlock>
 8003154:	6478      	str	r0, [r7, #68]	; 0x44
 8003156:	e009      	b.n	800316c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2210      	movs	r2, #16
 800315c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003164:	4618      	mov	r0, r3
 8003166:	f002 faa5 	bl	80056b4 <SDMMC_CmdWriteSingleBlock>
 800316a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800316c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7c      	ldr	r2, [pc, #496]	; (8003368 <HAL_SD_WriteBlocks+0x310>)
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003180:	431a      	orrs	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0fb      	b.n	8003390 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800319c:	e065      	b.n	800326a <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d040      	beq.n	800322e <HAL_SD_WriteBlocks+0x1d6>
 80031ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d03d      	beq.n	800322e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	643b      	str	r3, [r7, #64]	; 0x40
 80031b6:	e037      	b.n	8003228 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80031b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80031be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c0:	3301      	adds	r3, #1
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c6:	3b01      	subs	r3, #1
 80031c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80031ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	021a      	lsls	r2, r3, #8
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80031d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d8:	3301      	adds	r3, #1
 80031da:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031de:	3b01      	subs	r3, #1
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80031e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	041a      	lsls	r2, r3, #16
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80031ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f0:	3301      	adds	r3, #1
 80031f2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f6:	3b01      	subs	r3, #1
 80031f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80031fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	061a      	lsls	r2, r3, #24
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003208:	3301      	adds	r3, #1
 800320a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800320c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320e:	3b01      	subs	r3, #1
 8003210:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f107 0214 	add.w	r2, r7, #20
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f002 f93f 	bl	80054a0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003224:	3301      	adds	r3, #1
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
 8003228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322a:	2b07      	cmp	r3, #7
 800322c:	d9c4      	bls.n	80031b8 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800322e:	f7fd fbc9 	bl	80009c4 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800323a:	429a      	cmp	r2, r3
 800323c:	d902      	bls.n	8003244 <HAL_SD_WriteBlocks+0x1ec>
 800323e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003240:	2b00      	cmp	r3, #0
 8003242:	d112      	bne.n	800326a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a47      	ldr	r2, [pc, #284]	; (8003368 <HAL_SD_WriteBlocks+0x310>)
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e092      	b.n	8003390 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003274:	2b00      	cmp	r3, #0
 8003276:	d092      	beq.n	800319e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d022      	beq.n	80032cc <HAL_SD_WriteBlocks+0x274>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d91f      	bls.n	80032cc <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	2b03      	cmp	r3, #3
 8003292:	d01b      	beq.n	80032cc <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f002 fa4f 	bl	800573c <SDMMC_CmdStopTransfer>
 800329e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80032a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d012      	beq.n	80032cc <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2f      	ldr	r2, [pc, #188]	; (8003368 <HAL_SD_WriteBlocks+0x310>)
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b4:	431a      	orrs	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e061      	b.n	8003390 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d012      	beq.n	8003300 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a22      	ldr	r2, [pc, #136]	; (8003368 <HAL_SD_WriteBlocks+0x310>)
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	f043 0208 	orr.w	r2, r3, #8
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e047      	b.n	8003390 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d012      	beq.n	8003334 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a15      	ldr	r2, [pc, #84]	; (8003368 <HAL_SD_WriteBlocks+0x310>)
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	f043 0202 	orr.w	r2, r3, #2
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e02d      	b.n	8003390 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d014      	beq.n	800336c <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a08      	ldr	r2, [pc, #32]	; (8003368 <HAL_SD_WriteBlocks+0x310>)
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	f043 0210 	orr.w	r2, r3, #16
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e013      	b.n	8003390 <HAL_SD_WriteBlocks+0x338>
 8003368:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f240 523a 	movw	r2, #1338	; 0x53a
 8003374:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e006      	b.n	8003390 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	3748      	adds	r7, #72	; 0x48
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a6:	0f9b      	lsrs	r3, r3, #30
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b2:	0e9b      	lsrs	r3, r3, #26
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c4:	0e1b      	lsrs	r3, r3, #24
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e2:	0a1b      	lsrs	r3, r3, #8
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033f8:	0d1b      	lsrs	r3, r3, #20
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	b2da      	uxtb	r2, r3
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003416:	0bdb      	lsrs	r3, r3, #15
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	b2da      	uxtb	r2, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003428:	0b9b      	lsrs	r3, r3, #14
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	b2da      	uxtb	r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800343a:	0b5b      	lsrs	r3, r3, #13
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800344c:	0b1b      	lsrs	r3, r3, #12
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	b2da      	uxtb	r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2200      	movs	r2, #0
 800345e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	2b00      	cmp	r3, #0
 8003466:	d163      	bne.n	8003530 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800346c:	009a      	lsls	r2, r3, #2
 800346e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003472:	4013      	ands	r3, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003478:	0f92      	lsrs	r2, r2, #30
 800347a:	431a      	orrs	r2, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003484:	0edb      	lsrs	r3, r3, #27
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	b2da      	uxtb	r2, r3
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003496:	0e1b      	lsrs	r3, r3, #24
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a8:	0d5b      	lsrs	r3, r3, #21
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ba:	0c9b      	lsrs	r3, r3, #18
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034cc:	0bdb      	lsrs	r3, r3, #15
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	7e1b      	ldrb	r3, [r3, #24]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	3302      	adds	r3, #2
 80034f0:	2201      	movs	r2, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80034fa:	fb02 f203 	mul.w	r2, r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	7a1b      	ldrb	r3, [r3, #8]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	2201      	movs	r2, #1
 800350e:	409a      	lsls	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800351c:	0a52      	lsrs	r2, r2, #9
 800351e:	fb02 f203 	mul.w	r2, r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800352c:	661a      	str	r2, [r3, #96]	; 0x60
 800352e:	e031      	b.n	8003594 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	2b01      	cmp	r3, #1
 8003536:	d11d      	bne.n	8003574 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	431a      	orrs	r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	3301      	adds	r3, #1
 8003554:	029a      	lsls	r2, r3, #10
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003568:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	661a      	str	r2, [r3, #96]	; 0x60
 8003572:	e00f      	b.n	8003594 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a58      	ldr	r2, [pc, #352]	; (80036dc <HAL_SD_GetCardCSD+0x344>)
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e09d      	b.n	80036d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003598:	0b9b      	lsrs	r3, r3, #14
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035aa:	09db      	lsrs	r3, r3, #7
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	0fdb      	lsrs	r3, r3, #31
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	0f5b      	lsrs	r3, r3, #29
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	0e9b      	lsrs	r3, r3, #26
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	0d9b      	lsrs	r3, r3, #22
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	b2da      	uxtb	r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	0d5b      	lsrs	r3, r3, #21
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	b2da      	uxtb	r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	0c1b      	lsrs	r3, r3, #16
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	b2da      	uxtb	r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	0bdb      	lsrs	r3, r3, #15
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	b2da      	uxtb	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	0b9b      	lsrs	r3, r3, #14
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	0b5b      	lsrs	r3, r3, #13
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	b2da      	uxtb	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	0b1b      	lsrs	r3, r3, #12
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	b2da      	uxtb	r2, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	0a9b      	lsrs	r3, r3, #10
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	b2da      	uxtb	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	004005ff 	.word	0x004005ff

080036e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003738:	b5b0      	push	{r4, r5, r7, lr}
 800373a:	b08e      	sub	sp, #56	; 0x38
 800373c:	af04      	add	r7, sp, #16
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2203      	movs	r2, #3
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	2b03      	cmp	r3, #3
 8003750:	d02e      	beq.n	80037b0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003758:	d106      	bne.n	8003768 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
 8003766:	e029      	b.n	80037bc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376e:	d10a      	bne.n	8003786 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fa01 	bl	8003b78 <SD_WideBus_Enable>
 8003776:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
 8003784:	e01a      	b.n	80037bc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa3e 	bl	8003c0e <SD_WideBus_Disable>
 8003792:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	639a      	str	r2, [r3, #56]	; 0x38
 80037a0:	e00c      	b.n	80037bc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38
 80037ae:	e005      	b.n	80037bc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a18      	ldr	r2, [pc, #96]	; (800382c <HAL_SD_ConfigWideBusOperation+0xf4>)
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e024      	b.n	8003822 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681d      	ldr	r5, [r3, #0]
 80037fe:	466c      	mov	r4, sp
 8003800:	f107 0318 	add.w	r3, r7, #24
 8003804:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003808:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003812:	4628      	mov	r0, r5
 8003814:	f001 fe0c 	bl	8005430 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3728      	adds	r7, #40	; 0x28
 8003826:	46bd      	mov	sp, r7
 8003828:	bdb0      	pop	{r4, r5, r7, pc}
 800382a:	bf00      	nop
 800382c:	004005ff 	.word	0x004005ff

08003830 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800383c:	f107 030c 	add.w	r3, r7, #12
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f970 	bl	8003b28 <SD_SendStatus>
 8003848:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	0a5b      	lsrs	r3, r3, #9
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003866:	693b      	ldr	r3, [r7, #16]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003870:	b5b0      	push	{r4, r5, r7, lr}
 8003872:	b094      	sub	sp, #80	; 0x50
 8003874:	af04      	add	r7, sp, #16
 8003876:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003878:	2301      	movs	r3, #1
 800387a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f001 fe2d 	bl	80054e0 <SDIO_GetPowerState>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800388c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003890:	e0b7      	b.n	8003a02 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	2b03      	cmp	r3, #3
 8003898:	d02f      	beq.n	80038fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f002 f856 	bl	8005950 <SDMMC_CmdSendCID>
 80038a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80038a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80038ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ae:	e0a8      	b.n	8003a02 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 fe57 	bl	800556a <SDIO_GetResponse>
 80038bc:	4602      	mov	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2104      	movs	r1, #4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 fe4e 	bl	800556a <SDIO_GetResponse>
 80038ce:	4602      	mov	r2, r0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2108      	movs	r1, #8
 80038da:	4618      	mov	r0, r3
 80038dc:	f001 fe45 	bl	800556a <SDIO_GetResponse>
 80038e0:	4602      	mov	r2, r0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	210c      	movs	r1, #12
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fe3c 	bl	800556a <SDIO_GetResponse>
 80038f2:	4602      	mov	r2, r0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d00d      	beq.n	800391e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f107 020e 	add.w	r2, r7, #14
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f002 f85c 	bl	80059ca <SDMMC_CmdSetRelAdd>
 8003912:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <SD_InitCard+0xae>
    {
      return errorstate;
 800391a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391c:	e071      	b.n	8003a02 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	2b03      	cmp	r3, #3
 8003924:	d036      	beq.n	8003994 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003926:	89fb      	ldrh	r3, [r7, #14]
 8003928:	461a      	mov	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f002 f826 	bl	800598c <SDMMC_CmdSendCSD>
 8003940:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394a:	e05a      	b.n	8003a02 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f001 fe09 	bl	800556a <SDIO_GetResponse>
 8003958:	4602      	mov	r2, r0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2104      	movs	r1, #4
 8003964:	4618      	mov	r0, r3
 8003966:	f001 fe00 	bl	800556a <SDIO_GetResponse>
 800396a:	4602      	mov	r2, r0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2108      	movs	r1, #8
 8003976:	4618      	mov	r0, r3
 8003978:	f001 fdf7 	bl	800556a <SDIO_GetResponse>
 800397c:	4602      	mov	r2, r0
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	210c      	movs	r1, #12
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fdee 	bl	800556a <SDIO_GetResponse>
 800398e:	4602      	mov	r2, r0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2104      	movs	r1, #4
 800399a:	4618      	mov	r0, r3
 800399c:	f001 fde5 	bl	800556a <SDIO_GetResponse>
 80039a0:	4603      	mov	r3, r0
 80039a2:	0d1a      	lsrs	r2, r3, #20
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80039a8:	f107 0310 	add.w	r3, r7, #16
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff fcf2 	bl	8003398 <HAL_SD_GetCardCSD>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80039be:	e020      	b.n	8003a02 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6819      	ldr	r1, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	f04f 0400 	mov.w	r4, #0
 80039ce:	461a      	mov	r2, r3
 80039d0:	4623      	mov	r3, r4
 80039d2:	4608      	mov	r0, r1
 80039d4:	f001 fed4 	bl	8005780 <SDMMC_CmdSelDesel>
 80039d8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80039da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <SD_InitCard+0x174>
  {
    return errorstate;
 80039e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e2:	e00e      	b.n	8003a02 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681d      	ldr	r5, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	466c      	mov	r4, sp
 80039ec:	f103 0210 	add.w	r2, r3, #16
 80039f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80039f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039f6:	3304      	adds	r3, #4
 80039f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039fa:	4628      	mov	r0, r5
 80039fc:	f001 fd18 	bl	8005430 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3740      	adds	r7, #64	; 0x40
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003a0c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 fece 	bl	80057c6 <SDMMC_CmdGoIdleState>
 8003a2a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	e072      	b.n	8003b1c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fee1 	bl	8005802 <SDMMC_CmdOperCond>
 8003a40:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00d      	beq.n	8003a64 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 feb7 	bl	80057c6 <SDMMC_CmdGoIdleState>
 8003a58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	e05b      	b.n	8003b1c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d137      	bne.n	8003ae2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 fee1 	bl	8005840 <SDMMC_CmdAppCommand>
 8003a7e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d02d      	beq.n	8003ae2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a8a:	e047      	b.n	8003b1c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fed4 	bl	8005840 <SDMMC_CmdAppCommand>
 8003a98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <SD_PowerON+0x98>
    {
      return errorstate;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	e03b      	b.n	8003b1c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	491e      	ldr	r1, [pc, #120]	; (8003b24 <SD_PowerON+0x118>)
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 feea 	bl	8005884 <SDMMC_CmdAppOperCommand>
 8003ab0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ab8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003abc:	e02e      	b.n	8003b1c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 fd50 	bl	800556a <SDIO_GetResponse>
 8003aca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	0fdb      	lsrs	r3, r3, #31
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <SD_PowerON+0xcc>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <SD_PowerON+0xce>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]

    count++;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d802      	bhi.n	8003af2 <SD_PowerON+0xe6>
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0cc      	beq.n	8003a8c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d902      	bls.n	8003b02 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b00:	e00c      	b.n	8003b1c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	645a      	str	r2, [r3, #68]	; 0x44
 8003b12:	e002      	b.n	8003b1a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	c1100000 	.word	0xc1100000

08003b28 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003b38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b3c:	e018      	b.n	8003b70 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f001 ff5e 	bl	8005a0c <SDMMC_CmdSendStatus>
 8003b50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	e009      	b.n	8003b70 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f001 fd01 	bl	800556a <SDIO_GetResponse>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 fceb 	bl	800556a <SDIO_GetResponse>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b9e:	d102      	bne.n	8003ba6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003ba0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ba4:	e02f      	b.n	8003c06 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003ba6:	f107 030c 	add.w	r3, r7, #12
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f879 	bl	8003ca4 <SD_FindSCR>
 8003bb2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	e023      	b.n	8003c06 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01c      	beq.n	8003c02 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd0:	041b      	lsls	r3, r3, #16
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f001 fe33 	bl	8005840 <SDMMC_CmdAppCommand>
 8003bda:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	e00f      	b.n	8003c06 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2102      	movs	r1, #2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f001 fe6c 	bl	80058ca <SDMMC_CmdBusWidth>
 8003bf2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	e003      	b.n	8003c06 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e001      	b.n	8003c06 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b086      	sub	sp, #24
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2100      	movs	r1, #0
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 fca0 	bl	800556a <SDIO_GetResponse>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c34:	d102      	bne.n	8003c3c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c3a:	e02f      	b.n	8003c9c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4619      	mov	r1, r3
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f82e 	bl	8003ca4 <SD_FindSCR>
 8003c48:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	e023      	b.n	8003c9c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01c      	beq.n	8003c98 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f001 fde8 	bl	8005840 <SDMMC_CmdAppCommand>
 8003c70:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	e00f      	b.n	8003c9c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 fe21 	bl	80058ca <SDMMC_CmdBusWidth>
 8003c88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	e003      	b.n	8003c9c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e001      	b.n	8003c9c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b08f      	sub	sp, #60	; 0x3c
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003cae:	f7fc fe89 	bl	80009c4 <HAL_GetTick>
 8003cb2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2108      	movs	r1, #8
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 fc8c 	bl	80055e8 <SDMMC_CmdBlockLength>
 8003cd0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <SD_FindSCR+0x38>
  {
    return errorstate;
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	e0a9      	b.n	8003e30 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f001 fda9 	bl	8005840 <SDMMC_CmdAppCommand>
 8003cee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <SD_FindSCR+0x56>
  {
    return errorstate;
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	e09a      	b.n	8003e30 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003d00:	2308      	movs	r3, #8
 8003d02:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003d04:	2330      	movs	r3, #48	; 0x30
 8003d06:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003d10:	2301      	movs	r3, #1
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f107 0210 	add.w	r2, r7, #16
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 fc36 	bl	8005590 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 fdf0 	bl	800590e <SDMMC_CmdSendSCR>
 8003d2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d022      	beq.n	8003d7c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	e07a      	b.n	8003e30 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00e      	beq.n	8003d66 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6819      	ldr	r1, [r3, #0]
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	f107 0208 	add.w	r2, r7, #8
 8003d54:	18d4      	adds	r4, r2, r3
 8003d56:	4608      	mov	r0, r1
 8003d58:	f001 fb95 	bl	8005486 <SDIO_ReadFIFO>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	6023      	str	r3, [r4, #0]
      index++;
 8003d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d62:	3301      	adds	r3, #1
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003d66:	f7fc fe2d 	bl	80009c4 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d102      	bne.n	8003d7c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003d76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d7a:	e059      	b.n	8003e30 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d82:	f240 432a 	movw	r3, #1066	; 0x42a
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0d6      	beq.n	8003d3a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2208      	movs	r2, #8
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003da2:	2308      	movs	r3, #8
 8003da4:	e044      	b.n	8003e30 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2202      	movs	r2, #2
 8003dba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e037      	b.n	8003e30 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	e02a      	b.n	8003e30 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f240 523a 	movw	r2, #1338	; 0x53a
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	061a      	lsls	r2, r3, #24
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003df0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003dfa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	0e1b      	lsrs	r3, r3, #24
 8003e00:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e04:	601a      	str	r2, [r3, #0]
    scr++;
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	3304      	adds	r3, #4
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	061a      	lsls	r2, r3, #24
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e18:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	0a1b      	lsrs	r3, r3, #8
 8003e1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e22:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	0e1b      	lsrs	r3, r3, #24
 8003e28:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	373c      	adds	r7, #60	; 0x3c
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd90      	pop	{r4, r7, pc}

08003e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e056      	b.n	8003ef8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f009 f843 	bl	800cef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	ea42 0103 	orr.w	r1, r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	f003 0104 	and.w	r1, r3, #4
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t const * const pData, uint16_t Size, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_SPI_Transmit+0x22>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e11e      	b.n	8004160 <HAL_SPI_Transmit+0x260>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f2a:	f7fc fd4b 	bl	80009c4 <HAL_GetTick>
 8003f2e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d002      	beq.n	8003f46 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
 8003f42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f44:	e103      	b.n	800414e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_SPI_Transmit+0x52>
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f56:	e0fa      	b.n	800414e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	88fa      	ldrh	r2, [r7, #6]
 8003f70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	88fa      	ldrh	r2, [r7, #6]
 8003f76:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9e:	d107      	bne.n	8003fb0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d007      	beq.n	8003fce <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd6:	d14b      	bne.n	8004070 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_SPI_Transmit+0xe6>
 8003fe0:	8afb      	ldrh	r3, [r7, #22]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d13e      	bne.n	8004064 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	881a      	ldrh	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	1c9a      	adds	r2, r3, #2
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800400a:	e02b      	b.n	8004064 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d112      	bne.n	8004040 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	881a      	ldrh	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	1c9a      	adds	r2, r3, #2
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	86da      	strh	r2, [r3, #54]	; 0x36
 800403e:	e011      	b.n	8004064 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004040:	f7fc fcc0 	bl	80009c4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d803      	bhi.n	8004058 <HAL_SPI_Transmit+0x158>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d102      	bne.n	800405e <HAL_SPI_Transmit+0x15e>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004062:	e074      	b.n	800414e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1ce      	bne.n	800400c <HAL_SPI_Transmit+0x10c>
 800406e:	e04c      	b.n	800410a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_SPI_Transmit+0x17e>
 8004078:	8afb      	ldrh	r3, [r7, #22]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d140      	bne.n	8004100 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	7812      	ldrb	r2, [r2, #0]
 800408a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040a4:	e02c      	b.n	8004100 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d113      	bne.n	80040dc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	7812      	ldrb	r2, [r2, #0]
 80040c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80040da:	e011      	b.n	8004100 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040dc:	f7fc fc72 	bl	80009c4 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d803      	bhi.n	80040f4 <HAL_SPI_Transmit+0x1f4>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d102      	bne.n	80040fa <HAL_SPI_Transmit+0x1fa>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040fe:	e026      	b.n	800414e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1cd      	bne.n	80040a6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	6839      	ldr	r1, [r7, #0]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fba4 	bl	800485c <SPI_EndRxTxTransaction>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e000      	b.n	800414e <HAL_SPI_Transmit+0x24e>
  }

error:
 800414c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800415e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004184:	d112      	bne.n	80041ac <HAL_SPI_Receive+0x44>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10e      	bne.n	80041ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2204      	movs	r2, #4
 8004192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f8e9 	bl	800437a <HAL_SPI_TransmitReceive>
 80041a8:	4603      	mov	r3, r0
 80041aa:	e0e2      	b.n	8004372 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_SPI_Receive+0x52>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e0db      	b.n	8004372 <HAL_SPI_Receive+0x20a>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041c2:	f7fc fbff 	bl	80009c4 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d002      	beq.n	80041da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
 80041d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041d8:	e0c2      	b.n	8004360 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_SPI_Receive+0x7e>
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041ea:	e0b9      	b.n	8004360 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2204      	movs	r2, #4
 80041f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004232:	d107      	bne.n	8004244 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004242:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d007      	beq.n	8004262 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004260:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d162      	bne.n	8004330 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800426a:	e02e      	b.n	80042ca <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b01      	cmp	r3, #1
 8004278:	d115      	bne.n	80042a6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f103 020c 	add.w	r2, r3, #12
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	7812      	ldrb	r2, [r2, #0]
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042a4:	e011      	b.n	80042ca <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042a6:	f7fc fb8d 	bl	80009c4 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d803      	bhi.n	80042be <HAL_SPI_Receive+0x156>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d102      	bne.n	80042c4 <HAL_SPI_Receive+0x15c>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042c8:	e04a      	b.n	8004360 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1cb      	bne.n	800426c <HAL_SPI_Receive+0x104>
 80042d4:	e031      	b.n	800433a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d113      	bne.n	800430c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	b292      	uxth	r2, r2
 80042f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	1c9a      	adds	r2, r3, #2
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	87da      	strh	r2, [r3, #62]	; 0x3e
 800430a:	e011      	b.n	8004330 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800430c:	f7fc fb5a 	bl	80009c4 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d803      	bhi.n	8004324 <HAL_SPI_Receive+0x1bc>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d102      	bne.n	800432a <HAL_SPI_Receive+0x1c2>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800432e:	e017      	b.n	8004360 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1cd      	bne.n	80042d6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	6839      	ldr	r1, [r7, #0]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fa27 	bl	8004792 <SPI_EndRxTransaction>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	75fb      	strb	r3, [r7, #23]
 800435c:	e000      	b.n	8004360 <HAL_SPI_Receive+0x1f8>
  }

error :
 800435e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b08c      	sub	sp, #48	; 0x30
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004388:	2301      	movs	r3, #1
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_SPI_TransmitReceive+0x26>
 800439c:	2302      	movs	r3, #2
 800439e:	e18a      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x33c>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043a8:	f7fc fb0c 	bl	80009c4 <HAL_GetTick>
 80043ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043be:	887b      	ldrh	r3, [r7, #2]
 80043c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d00f      	beq.n	80043ea <HAL_SPI_TransmitReceive+0x70>
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d0:	d107      	bne.n	80043e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <HAL_SPI_TransmitReceive+0x68>
 80043da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d003      	beq.n	80043ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80043e2:	2302      	movs	r3, #2
 80043e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043e8:	e15b      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_SPI_TransmitReceive+0x82>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_SPI_TransmitReceive+0x82>
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d103      	bne.n	8004404 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004402:	e14e      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b04      	cmp	r3, #4
 800440e:	d003      	beq.n	8004418 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2205      	movs	r2, #5
 8004414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	887a      	ldrh	r2, [r7, #2]
 8004428:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	887a      	ldrh	r2, [r7, #2]
 800442e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	887a      	ldrh	r2, [r7, #2]
 800443a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	887a      	ldrh	r2, [r7, #2]
 8004440:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d007      	beq.n	800446c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800446a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004474:	d178      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_SPI_TransmitReceive+0x10a>
 800447e:	8b7b      	ldrh	r3, [r7, #26]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d166      	bne.n	8004552 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	881a      	ldrh	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	1c9a      	adds	r2, r3, #2
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044a8:	e053      	b.n	8004552 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d11b      	bne.n	80044f0 <HAL_SPI_TransmitReceive+0x176>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d016      	beq.n	80044f0 <HAL_SPI_TransmitReceive+0x176>
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d113      	bne.n	80044f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	881a      	ldrh	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	1c9a      	adds	r2, r3, #2
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d119      	bne.n	8004532 <HAL_SPI_TransmitReceive+0x1b8>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d014      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	b292      	uxth	r2, r2
 8004514:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	1c9a      	adds	r2, r3, #2
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800452e:	2301      	movs	r3, #1
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004532:	f7fc fa47 	bl	80009c4 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800453e:	429a      	cmp	r2, r3
 8004540:	d807      	bhi.n	8004552 <HAL_SPI_TransmitReceive+0x1d8>
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d003      	beq.n	8004552 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004550:	e0a7      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1a6      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x130>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1a1      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x130>
 8004566:	e07c      	b.n	8004662 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x1fc>
 8004570:	8b7b      	ldrh	r3, [r7, #26]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d16b      	bne.n	800464e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800459c:	e057      	b.n	800464e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d11c      	bne.n	80045e6 <HAL_SPI_TransmitReceive+0x26c>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d017      	beq.n	80045e6 <HAL_SPI_TransmitReceive+0x26c>
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d114      	bne.n	80045e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	7812      	ldrb	r2, [r2, #0]
 80045c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d119      	bne.n	8004628 <HAL_SPI_TransmitReceive+0x2ae>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d014      	beq.n	8004628 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004624:	2301      	movs	r3, #1
 8004626:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004628:	f7fc f9cc 	bl	80009c4 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004634:	429a      	cmp	r2, r3
 8004636:	d803      	bhi.n	8004640 <HAL_SPI_TransmitReceive+0x2c6>
 8004638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d102      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x2cc>
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800464c:	e029      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1a2      	bne.n	800459e <HAL_SPI_TransmitReceive+0x224>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d19d      	bne.n	800459e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f8f8 	bl	800485c <SPI_EndRxTxTransaction>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800467e:	e010      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	e000      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3730      	adds	r7, #48	; 0x30
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ce:	e04c      	b.n	800476a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d048      	beq.n	800476a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80046d8:	f7fc f974 	bl	80009c4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d902      	bls.n	80046ee <SPI_WaitFlagStateUntilTimeout+0x30>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d13d      	bne.n	800476a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004706:	d111      	bne.n	800472c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004710:	d004      	beq.n	800471c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471a:	d107      	bne.n	800472c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004734:	d10f      	bne.n	8004756 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e00f      	b.n	800478a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	429a      	cmp	r2, r3
 8004786:	d1a3      	bne.n	80046d0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af02      	add	r7, sp, #8
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a6:	d111      	bne.n	80047cc <SPI_EndRxTransaction+0x3a>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b0:	d004      	beq.n	80047bc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ba:	d107      	bne.n	80047cc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ca:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d4:	d12a      	bne.n	800482c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047de:	d012      	beq.n	8004806 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2200      	movs	r2, #0
 80047e8:	2180      	movs	r1, #128	; 0x80
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff ff67 	bl	80046be <SPI_WaitFlagStateUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d02d      	beq.n	8004852 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	f043 0220 	orr.w	r2, r3, #32
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e026      	b.n	8004854 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2200      	movs	r2, #0
 800480e:	2101      	movs	r1, #1
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7ff ff54 	bl	80046be <SPI_WaitFlagStateUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01a      	beq.n	8004852 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004820:	f043 0220 	orr.w	r2, r3, #32
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e013      	b.n	8004854 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2200      	movs	r2, #0
 8004834:	2101      	movs	r1, #1
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7ff ff41 	bl	80046be <SPI_WaitFlagStateUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e000      	b.n	8004854 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004868:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <SPI_EndRxTxTransaction+0x7c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1b      	ldr	r2, [pc, #108]	; (80048dc <SPI_EndRxTxTransaction+0x80>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	0d5b      	lsrs	r3, r3, #21
 8004874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004878:	fb02 f303 	mul.w	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004886:	d112      	bne.n	80048ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2200      	movs	r2, #0
 8004890:	2180      	movs	r1, #128	; 0x80
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff ff13 	bl	80046be <SPI_WaitFlagStateUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d016      	beq.n	80048cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	f043 0220 	orr.w	r2, r3, #32
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e00f      	b.n	80048ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b80      	cmp	r3, #128	; 0x80
 80048c6:	d0f2      	beq.n	80048ae <SPI_EndRxTxTransaction+0x52>
 80048c8:	e000      	b.n	80048cc <SPI_EndRxTxTransaction+0x70>
        break;
 80048ca:	bf00      	nop
  }

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000008 	.word	0x20000008
 80048dc:	165e9f81 	.word	0x165e9f81

080048e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e01d      	b.n	800492e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f008 fb5a 	bl	800cfc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f000 f9fa 	bl	8004d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e01d      	b.n	8004984 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f815 	bl	800498c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f000 f9cf 	bl	8004d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2201      	movs	r2, #1
 80049b0:	6839      	ldr	r1, [r7, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fc9a 	bl	80052ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <HAL_TIM_PWM_Start+0x74>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_PWM_Start+0x2c>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <HAL_TIM_PWM_Start+0x78>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_PWM_Start+0x30>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <HAL_TIM_PWM_Start+0x32>
 80049d0:	2300      	movs	r3, #0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d007      	beq.n	8004a08 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40010400 	.word	0x40010400

08004a1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e0b4      	b.n	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	f200 809f 	bhi.w	8004b8c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004a89 	.word	0x08004a89
 8004a58:	08004b8d 	.word	0x08004b8d
 8004a5c:	08004b8d 	.word	0x08004b8d
 8004a60:	08004b8d 	.word	0x08004b8d
 8004a64:	08004ac9 	.word	0x08004ac9
 8004a68:	08004b8d 	.word	0x08004b8d
 8004a6c:	08004b8d 	.word	0x08004b8d
 8004a70:	08004b8d 	.word	0x08004b8d
 8004a74:	08004b0b 	.word	0x08004b0b
 8004a78:	08004b8d 	.word	0x08004b8d
 8004a7c:	08004b8d 	.word	0x08004b8d
 8004a80:	08004b8d 	.word	0x08004b8d
 8004a84:	08004b4b 	.word	0x08004b4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f9e2 	bl	8004e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0208 	orr.w	r2, r2, #8
 8004aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6999      	ldr	r1, [r3, #24]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	619a      	str	r2, [r3, #24]
      break;
 8004ac6:	e062      	b.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fa32 	bl	8004f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	021a      	lsls	r2, r3, #8
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	619a      	str	r2, [r3, #24]
      break;
 8004b08:	e041      	b.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fa87 	bl	8005024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0208 	orr.w	r2, r2, #8
 8004b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0204 	bic.w	r2, r2, #4
 8004b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69d9      	ldr	r1, [r3, #28]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	61da      	str	r2, [r3, #28]
      break;
 8004b48:	e021      	b.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fadb 	bl	800510c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69d9      	ldr	r1, [r3, #28]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	021a      	lsls	r2, r3, #8
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	61da      	str	r2, [r3, #28]
      break;
 8004b8a:	e000      	b.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004b8c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIM_ConfigClockSource+0x18>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e0a6      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x166>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004be6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d067      	beq.n	8004cc8 <HAL_TIM_ConfigClockSource+0x120>
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d80b      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x6c>
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d073      	beq.n	8004ce8 <HAL_TIM_ConfigClockSource+0x140>
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d802      	bhi.n	8004c0a <HAL_TIM_ConfigClockSource+0x62>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d06f      	beq.n	8004ce8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c08:	e078      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d06c      	beq.n	8004ce8 <HAL_TIM_ConfigClockSource+0x140>
 8004c0e:	2b30      	cmp	r3, #48	; 0x30
 8004c10:	d06a      	beq.n	8004ce8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c12:	e073      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c14:	2b70      	cmp	r3, #112	; 0x70
 8004c16:	d00d      	beq.n	8004c34 <HAL_TIM_ConfigClockSource+0x8c>
 8004c18:	2b70      	cmp	r3, #112	; 0x70
 8004c1a:	d804      	bhi.n	8004c26 <HAL_TIM_ConfigClockSource+0x7e>
 8004c1c:	2b50      	cmp	r3, #80	; 0x50
 8004c1e:	d033      	beq.n	8004c88 <HAL_TIM_ConfigClockSource+0xe0>
 8004c20:	2b60      	cmp	r3, #96	; 0x60
 8004c22:	d041      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c24:	e06a      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2a:	d066      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0x152>
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c30:	d017      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c32:	e063      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	6899      	ldr	r1, [r3, #8]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f000 fb32 	bl	80052ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c56:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	609a      	str	r2, [r3, #8]
      break;
 8004c60:	e04c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6899      	ldr	r1, [r3, #8]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f000 fb1b 	bl	80052ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c84:	609a      	str	r2, [r3, #8]
      break;
 8004c86:	e039      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	6859      	ldr	r1, [r3, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	461a      	mov	r2, r3
 8004c96:	f000 fa8f 	bl	80051b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2150      	movs	r1, #80	; 0x50
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fae8 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8004ca6:	e029      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f000 faae 	bl	8005216 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2160      	movs	r1, #96	; 0x60
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fad8 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8004cc6:	e019      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f000 fa6f 	bl	80051b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2140      	movs	r1, #64	; 0x40
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fac8 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8004ce6:	e009      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f000 fabf 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8004cf8:	e000      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a40      	ldr	r2, [pc, #256]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d00f      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a3d      	ldr	r2, [pc, #244]	; (8004e30 <TIM_Base_SetConfig+0x118>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00b      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a3c      	ldr	r2, [pc, #240]	; (8004e34 <TIM_Base_SetConfig+0x11c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a3b      	ldr	r2, [pc, #236]	; (8004e38 <TIM_Base_SetConfig+0x120>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a3a      	ldr	r2, [pc, #232]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d108      	bne.n	8004d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2f      	ldr	r2, [pc, #188]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d02b      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d78:	d027      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <TIM_Base_SetConfig+0x118>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d023      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2b      	ldr	r2, [pc, #172]	; (8004e34 <TIM_Base_SetConfig+0x11c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d01f      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <TIM_Base_SetConfig+0x120>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01b      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a29      	ldr	r2, [pc, #164]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d017      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a28      	ldr	r2, [pc, #160]	; (8004e40 <TIM_Base_SetConfig+0x128>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a27      	ldr	r2, [pc, #156]	; (8004e44 <TIM_Base_SetConfig+0x12c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00f      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <TIM_Base_SetConfig+0x130>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a25      	ldr	r2, [pc, #148]	; (8004e4c <TIM_Base_SetConfig+0x134>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a24      	ldr	r2, [pc, #144]	; (8004e50 <TIM_Base_SetConfig+0x138>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a23      	ldr	r2, [pc, #140]	; (8004e54 <TIM_Base_SetConfig+0x13c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d108      	bne.n	8004ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_Base_SetConfig+0xf8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a0c      	ldr	r2, [pc, #48]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d103      	bne.n	8004e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	615a      	str	r2, [r3, #20]
}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40010400 	.word	0x40010400
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800
 8004e4c:	40001800 	.word	0x40001800
 8004e50:	40001c00 	.word	0x40001c00
 8004e54:	40002000 	.word	0x40002000

08004e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f023 0201 	bic.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f023 0302 	bic.w	r3, r3, #2
 8004ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a20      	ldr	r2, [pc, #128]	; (8004f30 <TIM_OC1_SetConfig+0xd8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_OC1_SetConfig+0x64>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a1f      	ldr	r2, [pc, #124]	; (8004f34 <TIM_OC1_SetConfig+0xdc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d10c      	bne.n	8004ed6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0308 	bic.w	r3, r3, #8
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f023 0304 	bic.w	r3, r3, #4
 8004ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <TIM_OC1_SetConfig+0xd8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_OC1_SetConfig+0x8e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a14      	ldr	r2, [pc, #80]	; (8004f34 <TIM_OC1_SetConfig+0xdc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d111      	bne.n	8004f0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	621a      	str	r2, [r3, #32]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40010400 	.word	0x40010400

08004f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f023 0210 	bic.w	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0320 	bic.w	r3, r3, #32
 8004f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a22      	ldr	r2, [pc, #136]	; (800501c <TIM_OC2_SetConfig+0xe4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC2_SetConfig+0x68>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a21      	ldr	r2, [pc, #132]	; (8005020 <TIM_OC2_SetConfig+0xe8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10d      	bne.n	8004fbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a17      	ldr	r2, [pc, #92]	; (800501c <TIM_OC2_SetConfig+0xe4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_OC2_SetConfig+0x94>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a16      	ldr	r2, [pc, #88]	; (8005020 <TIM_OC2_SetConfig+0xe8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d113      	bne.n	8004ff4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	621a      	str	r2, [r3, #32]
}
 800500e:	bf00      	nop
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40010000 	.word	0x40010000
 8005020:	40010400 	.word	0x40010400

08005024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0303 	bic.w	r3, r3, #3
 800505a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800506c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a21      	ldr	r2, [pc, #132]	; (8005104 <TIM_OC3_SetConfig+0xe0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d003      	beq.n	800508a <TIM_OC3_SetConfig+0x66>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a20      	ldr	r2, [pc, #128]	; (8005108 <TIM_OC3_SetConfig+0xe4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d10d      	bne.n	80050a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a16      	ldr	r2, [pc, #88]	; (8005104 <TIM_OC3_SetConfig+0xe0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_OC3_SetConfig+0x92>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a15      	ldr	r2, [pc, #84]	; (8005108 <TIM_OC3_SetConfig+0xe4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d113      	bne.n	80050de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	621a      	str	r2, [r3, #32]
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40010000 	.word	0x40010000
 8005108:	40010400 	.word	0x40010400

0800510c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	021b      	lsls	r3, r3, #8
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	031b      	lsls	r3, r3, #12
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <TIM_OC4_SetConfig+0xa4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_OC4_SetConfig+0x68>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a11      	ldr	r2, [pc, #68]	; (80051b4 <TIM_OC4_SetConfig+0xa8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d109      	bne.n	8005188 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800517a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	019b      	lsls	r3, r3, #6
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40010400 	.word	0x40010400

080051b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f023 0201 	bic.w	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f023 030a 	bic.w	r3, r3, #10
 80051f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005216:	b480      	push	{r7}
 8005218:	b087      	sub	sp, #28
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0210 	bic.w	r2, r3, #16
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	031b      	lsls	r3, r3, #12
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005276:	b480      	push	{r7}
 8005278:	b085      	sub	sp, #20
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	f043 0307 	orr.w	r3, r3, #7
 8005298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	609a      	str	r2, [r3, #8]
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	021a      	lsls	r2, r3, #8
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	609a      	str	r2, [r3, #8]
}
 80052e0:	bf00      	nop
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2201      	movs	r2, #1
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a1a      	ldr	r2, [r3, #32]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	43db      	mvns	r3, r3
 800530e:	401a      	ands	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a1a      	ldr	r2, [r3, #32]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	fa01 f303 	lsl.w	r3, r1, r3
 8005324:	431a      	orrs	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800534c:	2302      	movs	r3, #2
 800534e:	e05a      	b.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a21      	ldr	r2, [pc, #132]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d022      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539c:	d01d      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d018      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1b      	ldr	r2, [pc, #108]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1a      	ldr	r2, [pc, #104]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00e      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a18      	ldr	r2, [pc, #96]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d009      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d004      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a15      	ldr	r2, [pc, #84]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10c      	bne.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40010000 	.word	0x40010000
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40001800 	.word	0x40001800

08005430 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005430:	b084      	sub	sp, #16
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	f107 001c 	add.w	r0, r7, #28
 800543e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005446:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005448:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800544a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800544e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005452:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005456:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800545a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800546a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	b004      	add	sp, #16
 8005484:	4770      	bx	lr

08005486 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2203      	movs	r2, #3
 80054ce:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80054d0:	2002      	movs	r0, #2
 80054d2:	f7fb fa83 	bl	80009dc <HAL_Delay>
  
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0303 	and.w	r3, r3, #3
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800551a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005520:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005526:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005536:	f023 030f 	bic.w	r3, r3, #15
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	b2db      	uxtb	r3, r3
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3314      	adds	r3, #20
 8005578:	461a      	mov	r2, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	4413      	add	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
}  
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055b6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80055bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80055c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80055da:	2300      	movs	r3, #0

}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80055f6:	2310      	movs	r3, #16
 80055f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055fa:	2340      	movs	r3, #64	; 0x40
 80055fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005606:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005608:	f107 0308 	add.w	r3, r7, #8
 800560c:	4619      	mov	r1, r3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ff74 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005614:	f241 3288 	movw	r2, #5000	; 0x1388
 8005618:	2110      	movs	r1, #16
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fa40 	bl	8005aa0 <SDMMC_GetCmdResp1>
 8005620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005622:	69fb      	ldr	r3, [r7, #28]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800563a:	2311      	movs	r3, #17
 800563c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800563e:	2340      	movs	r3, #64	; 0x40
 8005640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800564a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800564c:	f107 0308 	add.w	r3, r7, #8
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff ff52 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005658:	f241 3288 	movw	r2, #5000	; 0x1388
 800565c:	2111      	movs	r1, #17
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa1e 	bl	8005aa0 <SDMMC_GetCmdResp1>
 8005664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005666:	69fb      	ldr	r3, [r7, #28]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3720      	adds	r7, #32
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800567e:	2312      	movs	r3, #18
 8005680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005682:	2340      	movs	r3, #64	; 0x40
 8005684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800568a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800568e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005690:	f107 0308 	add.w	r3, r7, #8
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff ff30 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800569c:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a0:	2112      	movs	r1, #18
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f9fc 	bl	8005aa0 <SDMMC_GetCmdResp1>
 80056a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056aa:	69fb      	ldr	r3, [r7, #28]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80056c2:	2318      	movs	r3, #24
 80056c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056c6:	2340      	movs	r3, #64	; 0x40
 80056c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056d4:	f107 0308 	add.w	r3, r7, #8
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff ff0e 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80056e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e4:	2118      	movs	r1, #24
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f9da 	bl	8005aa0 <SDMMC_GetCmdResp1>
 80056ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056ee:	69fb      	ldr	r3, [r7, #28]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005706:	2319      	movs	r3, #25
 8005708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800570a:	2340      	movs	r3, #64	; 0x40
 800570c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005716:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005718:	f107 0308 	add.w	r3, r7, #8
 800571c:	4619      	mov	r1, r3
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff feec 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005724:	f241 3288 	movw	r2, #5000	; 0x1388
 8005728:	2119      	movs	r1, #25
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f9b8 	bl	8005aa0 <SDMMC_GetCmdResp1>
 8005730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005732:	69fb      	ldr	r3, [r7, #28]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005748:	230c      	movs	r3, #12
 800574a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800574c:	2340      	movs	r3, #64	; 0x40
 800574e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005758:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800575a:	f107 0308 	add.w	r3, r7, #8
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff fecb 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005766:	4a05      	ldr	r2, [pc, #20]	; (800577c <SDMMC_CmdStopTransfer+0x40>)
 8005768:	210c      	movs	r1, #12
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f998 	bl	8005aa0 <SDMMC_GetCmdResp1>
 8005770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005772:	69fb      	ldr	r3, [r7, #28]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	05f5e100 	.word	0x05f5e100

08005780 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005790:	2307      	movs	r3, #7
 8005792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005794:	2340      	movs	r3, #64	; 0x40
 8005796:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005798:	2300      	movs	r3, #0
 800579a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800579c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057a0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057a2:	f107 0310 	add.w	r3, r7, #16
 80057a6:	4619      	mov	r1, r3
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff fea7 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80057ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b2:	2107      	movs	r1, #7
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f973 	bl	8005aa0 <SDMMC_GetCmdResp1>
 80057ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3728      	adds	r7, #40	; 0x28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b088      	sub	sp, #32
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80057d6:	2300      	movs	r3, #0
 80057d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057e4:	f107 0308 	add.w	r3, r7, #8
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff fe86 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f92d 	bl	8005a50 <SDMMC_GetCmdError>
 80057f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057f8:	69fb      	ldr	r3, [r7, #28]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b088      	sub	sp, #32
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800580a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800580e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005810:	2308      	movs	r3, #8
 8005812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005814:	2340      	movs	r3, #64	; 0x40
 8005816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800581c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005820:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005822:	f107 0308 	add.w	r3, r7, #8
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff fe67 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fb16 	bl	8005e60 <SDMMC_GetCmdResp7>
 8005834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005836:	69fb      	ldr	r3, [r7, #28]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800584e:	2337      	movs	r3, #55	; 0x37
 8005850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005852:	2340      	movs	r3, #64	; 0x40
 8005854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800585a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800585e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005860:	f107 0308 	add.w	r3, r7, #8
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fe48 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800586c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005870:	2137      	movs	r1, #55	; 0x37
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f914 	bl	8005aa0 <SDMMC_GetCmdResp1>
 8005878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800587a:	69fb      	ldr	r3, [r7, #28]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3720      	adds	r7, #32
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005898:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800589a:	2329      	movs	r3, #41	; 0x29
 800589c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800589e:	2340      	movs	r3, #64	; 0x40
 80058a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058ac:	f107 0308 	add.w	r3, r7, #8
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff fe22 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fa23 	bl	8005d04 <SDMMC_GetCmdResp3>
 80058be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058c0:	69fb      	ldr	r3, [r7, #28]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b088      	sub	sp, #32
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80058d8:	2306      	movs	r3, #6
 80058da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058dc:	2340      	movs	r3, #64	; 0x40
 80058de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058e0:	2300      	movs	r3, #0
 80058e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058ea:	f107 0308 	add.w	r3, r7, #8
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fe03 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80058f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fa:	2106      	movs	r1, #6
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f8cf 	bl	8005aa0 <SDMMC_GetCmdResp1>
 8005902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005904:	69fb      	ldr	r3, [r7, #28]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b088      	sub	sp, #32
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800591a:	2333      	movs	r3, #51	; 0x33
 800591c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800591e:	2340      	movs	r3, #64	; 0x40
 8005920:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800592a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800592c:	f107 0308 	add.w	r3, r7, #8
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff fde2 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	2133      	movs	r1, #51	; 0x33
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f8ae 	bl	8005aa0 <SDMMC_GetCmdResp1>
 8005944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005946:	69fb      	ldr	r3, [r7, #28]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800595c:	2302      	movs	r3, #2
 800595e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005960:	23c0      	movs	r3, #192	; 0xc0
 8005962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800596c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800596e:	f107 0308 	add.w	r3, r7, #8
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff fdc1 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f97c 	bl	8005c78 <SDMMC_GetCmdResp2>
 8005980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005982:	69fb      	ldr	r3, [r7, #28]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3720      	adds	r7, #32
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800599a:	2309      	movs	r3, #9
 800599c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800599e:	23c0      	movs	r3, #192	; 0xc0
 80059a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059ac:	f107 0308 	add.w	r3, r7, #8
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff fda2 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f95d 	bl	8005c78 <SDMMC_GetCmdResp2>
 80059be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059c0:	69fb      	ldr	r3, [r7, #28]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3720      	adds	r7, #32
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b088      	sub	sp, #32
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80059d8:	2303      	movs	r3, #3
 80059da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059dc:	2340      	movs	r3, #64	; 0x40
 80059de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059ea:	f107 0308 	add.w	r3, r7, #8
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7ff fd83 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	2103      	movs	r1, #3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f9bc 	bl	8005d78 <SDMMC_GetCmdResp6>
 8005a00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a02:	69fb      	ldr	r3, [r7, #28]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3720      	adds	r7, #32
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005a1a:	230d      	movs	r3, #13
 8005a1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a1e:	2340      	movs	r3, #64	; 0x40
 8005a20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a2c:	f107 0308 	add.w	r3, r7, #8
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff fd62 	bl	80054fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3c:	210d      	movs	r1, #13
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f82e 	bl	8005aa0 <SDMMC_GetCmdResp1>
 8005a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a46:	69fb      	ldr	r3, [r7, #28]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005a50:	b490      	push	{r4, r7}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a58:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <SDMMC_GetCmdError+0x48>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a0f      	ldr	r2, [pc, #60]	; (8005a9c <SDMMC_GetCmdError+0x4c>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	0a5b      	lsrs	r3, r3, #9
 8005a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005a6c:	4623      	mov	r3, r4
 8005a6e:	1e5c      	subs	r4, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a78:	e009      	b.n	8005a8e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f2      	beq.n	8005a6c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	22c5      	movs	r2, #197	; 0xc5
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc90      	pop	{r4, r7}
 8005a96:	4770      	bx	lr
 8005a98:	20000008 	.word	0x20000008
 8005a9c:	10624dd3 	.word	0x10624dd3

08005aa0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005aae:	4b6f      	ldr	r3, [pc, #444]	; (8005c6c <SDMMC_GetCmdResp1+0x1cc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a6f      	ldr	r2, [pc, #444]	; (8005c70 <SDMMC_GetCmdResp1+0x1d0>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	0a5b      	lsrs	r3, r3, #9
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	1e5c      	subs	r4, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005acc:	e0c9      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f0      	beq.n	8005ac0 <SDMMC_GetCmdResp1+0x20>
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1eb      	bne.n	8005ac0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2204      	movs	r2, #4
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005afa:	2304      	movs	r3, #4
 8005afc:	e0b1      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0a6      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	22c5      	movs	r2, #197	; 0xc5
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f7ff fd18 	bl	8005550 <SDIO_GetCommandResponse>
 8005b20:	4603      	mov	r3, r0
 8005b22:	461a      	mov	r2, r3
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d001      	beq.n	8005b2e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e099      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005b2e:	2100      	movs	r1, #0
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff fd1a 	bl	800556a <SDIO_GetResponse>
 8005b36:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4b4e      	ldr	r3, [pc, #312]	; (8005c74 <SDMMC_GetCmdResp1+0x1d4>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e08d      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	da02      	bge.n	8005b52 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b50:	e087      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005b5c:	2340      	movs	r3, #64	; 0x40
 8005b5e:	e080      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005b6a:	2380      	movs	r3, #128	; 0x80
 8005b6c:	e079      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b7c:	e071      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b8c:	e069      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b9c:	e061      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bac:	e059      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bbc:	e051      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bcc:	e049      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005bd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bdc:	e041      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bec:	e039      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bfc:	e031      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005c08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c0c:	e029      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005c18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005c1c:	e021      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005c28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c2c:	e019      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005c38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c3c:	e011      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005c48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c4c:	e009      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005c58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005c5c:	e001      	b.n	8005c62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd90      	pop	{r4, r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000008 	.word	0x20000008
 8005c70:	10624dd3 	.word	0x10624dd3
 8005c74:	fdffe008 	.word	0xfdffe008

08005c78 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005c78:	b490      	push	{r4, r7}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c80:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <SDMMC_GetCmdResp2+0x84>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1e      	ldr	r2, [pc, #120]	; (8005d00 <SDMMC_GetCmdResp2+0x88>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	0a5b      	lsrs	r3, r3, #9
 8005c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005c94:	4623      	mov	r3, r4
 8005c96:	1e5c      	subs	r4, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ca0:	e026      	b.n	8005cf0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0f0      	beq.n	8005c94 <SDMMC_GetCmdResp2+0x1c>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1eb      	bne.n	8005c94 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2204      	movs	r2, #4
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cce:	2304      	movs	r3, #4
 8005cd0:	e00e      	b.n	8005cf0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e003      	b.n	8005cf0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	22c5      	movs	r2, #197	; 0xc5
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc90      	pop	{r4, r7}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000008 	.word	0x20000008
 8005d00:	10624dd3 	.word	0x10624dd3

08005d04 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005d04:	b490      	push	{r4, r7}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d0c:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <SDMMC_GetCmdResp3+0x6c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a18      	ldr	r2, [pc, #96]	; (8005d74 <SDMMC_GetCmdResp3+0x70>)
 8005d12:	fba2 2303 	umull	r2, r3, r2, r3
 8005d16:	0a5b      	lsrs	r3, r3, #9
 8005d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005d20:	4623      	mov	r3, r4
 8005d22:	1e5c      	subs	r4, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d2c:	e01b      	b.n	8005d66 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f0      	beq.n	8005d20 <SDMMC_GetCmdResp3+0x1c>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1eb      	bne.n	8005d20 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2204      	movs	r2, #4
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d5a:	2304      	movs	r3, #4
 8005d5c:	e003      	b.n	8005d66 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	22c5      	movs	r2, #197	; 0xc5
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc90      	pop	{r4, r7}
 8005d6e:	4770      	bx	lr
 8005d70:	20000008 	.word	0x20000008
 8005d74:	10624dd3 	.word	0x10624dd3

08005d78 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005d78:	b590      	push	{r4, r7, lr}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	460b      	mov	r3, r1
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d86:	4b34      	ldr	r3, [pc, #208]	; (8005e58 <SDMMC_GetCmdResp6+0xe0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a34      	ldr	r2, [pc, #208]	; (8005e5c <SDMMC_GetCmdResp6+0xe4>)
 8005d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d90:	0a5b      	lsrs	r3, r3, #9
 8005d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d96:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	1e5c      	subs	r4, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d102      	bne.n	8005da8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005da2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005da6:	e052      	b.n	8005e4e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dac:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0f0      	beq.n	8005d9a <SDMMC_GetCmdResp6+0x22>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1eb      	bne.n	8005d9a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	e03a      	b.n	8005e4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e02f      	b.n	8005e4e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff fbae 	bl	8005550 <SDIO_GetCommandResponse>
 8005df4:	4603      	mov	r3, r0
 8005df6:	461a      	mov	r2, r3
 8005df8:	7afb      	ldrb	r3, [r7, #11]
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d001      	beq.n	8005e02 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e025      	b.n	8005e4e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	22c5      	movs	r2, #197	; 0xc5
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005e08:	2100      	movs	r1, #0
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff fbad 	bl	800556a <SDIO_GetResponse>
 8005e10:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e011      	b.n	8005e4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e38:	e009      	b.n	8005e4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e48:	e001      	b.n	8005e4e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd90      	pop	{r4, r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000008 	.word	0x20000008
 8005e5c:	10624dd3 	.word	0x10624dd3

08005e60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005e60:	b490      	push	{r4, r7}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e68:	4b21      	ldr	r3, [pc, #132]	; (8005ef0 <SDMMC_GetCmdResp7+0x90>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <SDMMC_GetCmdResp7+0x94>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	0a5b      	lsrs	r3, r3, #9
 8005e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005e7c:	4623      	mov	r3, r4
 8005e7e:	1e5c      	subs	r4, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d102      	bne.n	8005e8a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e88:	e02c      	b.n	8005ee4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f0      	beq.n	8005e7c <SDMMC_GetCmdResp7+0x1c>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1eb      	bne.n	8005e7c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2204      	movs	r2, #4
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005eb6:	2304      	movs	r3, #4
 8005eb8:	e014      	b.n	8005ee4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d004      	beq.n	8005ed0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e009      	b.n	8005ee4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2240      	movs	r2, #64	; 0x40
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005ee2:	2300      	movs	r3, #0
  
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc90      	pop	{r4, r7}
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	20000008 	.word	0x20000008
 8005ef4:	10624dd3 	.word	0x10624dd3

08005ef8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	4a08      	ldr	r2, [pc, #32]	; (8005f28 <disk_status+0x30>)
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	79fa      	ldrb	r2, [r7, #7]
 8005f10:	4905      	ldr	r1, [pc, #20]	; (8005f28 <disk_status+0x30>)
 8005f12:	440a      	add	r2, r1
 8005f14:	7a12      	ldrb	r2, [r2, #8]
 8005f16:	4610      	mov	r0, r2
 8005f18:	4798      	blx	r3
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	200000b8 	.word	0x200000b8

08005f2c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	4a0d      	ldr	r2, [pc, #52]	; (8005f74 <disk_initialize+0x48>)
 8005f3e:	5cd3      	ldrb	r3, [r2, r3]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d111      	bne.n	8005f68 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <disk_initialize+0x48>)
 8005f48:	2101      	movs	r1, #1
 8005f4a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <disk_initialize+0x48>)
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	79fa      	ldrb	r2, [r7, #7]
 8005f5a:	4906      	ldr	r1, [pc, #24]	; (8005f74 <disk_initialize+0x48>)
 8005f5c:	440a      	add	r2, r1
 8005f5e:	7a12      	ldrb	r2, [r2, #8]
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	200000b8 	.word	0x200000b8

08005f78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	607a      	str	r2, [r7, #4]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4603      	mov	r3, r0
 8005f86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	4a0a      	ldr	r2, [pc, #40]	; (8005fb4 <disk_read+0x3c>)
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	689c      	ldr	r4, [r3, #8]
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	4a07      	ldr	r2, [pc, #28]	; (8005fb4 <disk_read+0x3c>)
 8005f98:	4413      	add	r3, r2
 8005f9a:	7a18      	ldrb	r0, [r3, #8]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	47a0      	blx	r4
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd90      	pop	{r4, r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	200000b8 	.word	0x200000b8

08005fb8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005fb8:	b590      	push	{r4, r7, lr}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	4a0a      	ldr	r2, [pc, #40]	; (8005ff4 <disk_write+0x3c>)
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68dc      	ldr	r4, [r3, #12]
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <disk_write+0x3c>)
 8005fd8:	4413      	add	r3, r2
 8005fda:	7a18      	ldrb	r0, [r3, #8]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	68b9      	ldr	r1, [r7, #8]
 8005fe2:	47a0      	blx	r4
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd90      	pop	{r4, r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	200000b8 	.word	0x200000b8

08005ff8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	603a      	str	r2, [r7, #0]
 8006002:	71fb      	strb	r3, [r7, #7]
 8006004:	460b      	mov	r3, r1
 8006006:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	4a09      	ldr	r2, [pc, #36]	; (8006030 <disk_ioctl+0x38>)
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	79fa      	ldrb	r2, [r7, #7]
 8006016:	4906      	ldr	r1, [pc, #24]	; (8006030 <disk_ioctl+0x38>)
 8006018:	440a      	add	r2, r1
 800601a:	7a10      	ldrb	r0, [r2, #8]
 800601c:	79b9      	ldrb	r1, [r7, #6]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	4798      	blx	r3
 8006022:	4603      	mov	r3, r0
 8006024:	73fb      	strb	r3, [r7, #15]
  return res;
 8006026:	7bfb      	ldrb	r3, [r7, #15]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	200000b8 	.word	0x200000b8

08006034 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3301      	adds	r3, #1
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006044:	89fb      	ldrh	r3, [r7, #14]
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	b21a      	sxth	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	b21b      	sxth	r3, r3
 8006050:	4313      	orrs	r3, r2
 8006052:	b21b      	sxth	r3, r3
 8006054:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006056:	89fb      	ldrh	r3, [r7, #14]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3303      	adds	r3, #3
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	3202      	adds	r2, #2
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	021b      	lsls	r3, r3, #8
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	3201      	adds	r2, #1
 800608a:	7812      	ldrb	r2, [r2, #0]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	7812      	ldrb	r2, [r2, #0]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
	return rv;
 800609c:	68fb      	ldr	r3, [r7, #12]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	460b      	mov	r3, r1
 80060b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	887a      	ldrh	r2, [r7, #2]
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	887b      	ldrh	r3, [r7, #2]
 80060c4:	0a1b      	lsrs	r3, r3, #8
 80060c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	887a      	ldrh	r2, [r7, #2]
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	0a1b      	lsrs	r3, r3, #8
 80060fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	607a      	str	r2, [r7, #4]
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	0a1b      	lsrs	r3, r3, #8
 800611e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00d      	beq.n	800616e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	1c53      	adds	r3, r2, #1
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	1c59      	adds	r1, r3, #1
 800615c:	6179      	str	r1, [r7, #20]
 800615e:	7812      	ldrb	r2, [r2, #0]
 8006160:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3b01      	subs	r3, #1
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f1      	bne.n	8006152 <mem_cpy+0x1a>
	}
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800617a:	b480      	push	{r7}
 800617c:	b087      	sub	sp, #28
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	617a      	str	r2, [r7, #20]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3b01      	subs	r3, #1
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1f3      	bne.n	800618a <mem_set+0x10>
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80061ae:	b480      	push	{r7}
 80061b0:	b089      	sub	sp, #36	; 0x24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	61fa      	str	r2, [r7, #28]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	4619      	mov	r1, r3
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	61ba      	str	r2, [r7, #24]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	1acb      	subs	r3, r1, r3
 80061da:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3b01      	subs	r3, #1
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <mem_cmp+0x40>
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0eb      	beq.n	80061c6 <mem_cmp+0x18>

	return r;
 80061ee:	697b      	ldr	r3, [r7, #20]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3724      	adds	r7, #36	; 0x24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006206:	e002      	b.n	800620e <chk_chr+0x12>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3301      	adds	r3, #1
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <chk_chr+0x26>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	4293      	cmp	r3, r2
 8006220:	d1f2      	bne.n	8006208 <chk_chr+0xc>
	return *str;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	781b      	ldrb	r3, [r3, #0]
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	e029      	b.n	800629c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006248:	4a27      	ldr	r2, [pc, #156]	; (80062e8 <chk_lock+0xb4>)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	4413      	add	r3, r2
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01d      	beq.n	8006292 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006256:	4a24      	ldr	r2, [pc, #144]	; (80062e8 <chk_lock+0xb4>)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	4413      	add	r3, r2
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d116      	bne.n	8006296 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006268:	4a1f      	ldr	r2, [pc, #124]	; (80062e8 <chk_lock+0xb4>)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	4413      	add	r3, r2
 8006270:	3304      	adds	r3, #4
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006278:	429a      	cmp	r2, r3
 800627a:	d10c      	bne.n	8006296 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800627c:	4a1a      	ldr	r2, [pc, #104]	; (80062e8 <chk_lock+0xb4>)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	4413      	add	r3, r2
 8006284:	3308      	adds	r3, #8
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800628c:	429a      	cmp	r2, r3
 800628e:	d102      	bne.n	8006296 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006290:	e007      	b.n	80062a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006292:	2301      	movs	r3, #1
 8006294:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3301      	adds	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d9d2      	bls.n	8006248 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d109      	bne.n	80062bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <chk_lock+0x80>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d101      	bne.n	80062b8 <chk_lock+0x84>
 80062b4:	2300      	movs	r3, #0
 80062b6:	e010      	b.n	80062da <chk_lock+0xa6>
 80062b8:	2312      	movs	r3, #18
 80062ba:	e00e      	b.n	80062da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d108      	bne.n	80062d4 <chk_lock+0xa0>
 80062c2:	4a09      	ldr	r2, [pc, #36]	; (80062e8 <chk_lock+0xb4>)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	4413      	add	r3, r2
 80062ca:	330c      	adds	r3, #12
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d2:	d101      	bne.n	80062d8 <chk_lock+0xa4>
 80062d4:	2310      	movs	r3, #16
 80062d6:	e000      	b.n	80062da <chk_lock+0xa6>
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20000098 	.word	0x20000098

080062ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062f2:	2300      	movs	r3, #0
 80062f4:	607b      	str	r3, [r7, #4]
 80062f6:	e002      	b.n	80062fe <enq_lock+0x12>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3301      	adds	r3, #1
 80062fc:	607b      	str	r3, [r7, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d806      	bhi.n	8006312 <enq_lock+0x26>
 8006304:	4a09      	ldr	r2, [pc, #36]	; (800632c <enq_lock+0x40>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	4413      	add	r3, r2
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f2      	bne.n	80062f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b02      	cmp	r3, #2
 8006316:	bf14      	ite	ne
 8006318:	2301      	movne	r3, #1
 800631a:	2300      	moveq	r3, #0
 800631c:	b2db      	uxtb	r3, r3
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	20000098 	.word	0x20000098

08006330 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e01f      	b.n	8006380 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006340:	4a41      	ldr	r2, [pc, #260]	; (8006448 <inc_lock+0x118>)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	4413      	add	r3, r2
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d113      	bne.n	800637a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006352:	4a3d      	ldr	r2, [pc, #244]	; (8006448 <inc_lock+0x118>)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	4413      	add	r3, r2
 800635a:	3304      	adds	r3, #4
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006362:	429a      	cmp	r2, r3
 8006364:	d109      	bne.n	800637a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006366:	4a38      	ldr	r2, [pc, #224]	; (8006448 <inc_lock+0x118>)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	4413      	add	r3, r2
 800636e:	3308      	adds	r3, #8
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006376:	429a      	cmp	r2, r3
 8006378:	d006      	beq.n	8006388 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3301      	adds	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d9dc      	bls.n	8006340 <inc_lock+0x10>
 8006386:	e000      	b.n	800638a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006388:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d132      	bne.n	80063f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e002      	b.n	800639c <inc_lock+0x6c>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3301      	adds	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d806      	bhi.n	80063b0 <inc_lock+0x80>
 80063a2:	4a29      	ldr	r2, [pc, #164]	; (8006448 <inc_lock+0x118>)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	4413      	add	r3, r2
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f2      	bne.n	8006396 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d101      	bne.n	80063ba <inc_lock+0x8a>
 80063b6:	2300      	movs	r3, #0
 80063b8:	e040      	b.n	800643c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	4922      	ldr	r1, [pc, #136]	; (8006448 <inc_lock+0x118>)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	440b      	add	r3, r1
 80063c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	491e      	ldr	r1, [pc, #120]	; (8006448 <inc_lock+0x118>)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	440b      	add	r3, r1
 80063d4:	3304      	adds	r3, #4
 80063d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695a      	ldr	r2, [r3, #20]
 80063dc:	491a      	ldr	r1, [pc, #104]	; (8006448 <inc_lock+0x118>)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	440b      	add	r3, r1
 80063e4:	3308      	adds	r3, #8
 80063e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80063e8:	4a17      	ldr	r2, [pc, #92]	; (8006448 <inc_lock+0x118>)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	4413      	add	r3, r2
 80063f0:	330c      	adds	r3, #12
 80063f2:	2200      	movs	r2, #0
 80063f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d009      	beq.n	8006410 <inc_lock+0xe0>
 80063fc:	4a12      	ldr	r2, [pc, #72]	; (8006448 <inc_lock+0x118>)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	4413      	add	r3, r2
 8006404:	330c      	adds	r3, #12
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <inc_lock+0xe0>
 800640c:	2300      	movs	r3, #0
 800640e:	e015      	b.n	800643c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d108      	bne.n	8006428 <inc_lock+0xf8>
 8006416:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <inc_lock+0x118>)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	4413      	add	r3, r2
 800641e:	330c      	adds	r3, #12
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	e001      	b.n	800642c <inc_lock+0xfc>
 8006428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800642c:	4906      	ldr	r1, [pc, #24]	; (8006448 <inc_lock+0x118>)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	440b      	add	r3, r1
 8006434:	330c      	adds	r3, #12
 8006436:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	20000098 	.word	0x20000098

0800644c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3b01      	subs	r3, #1
 8006458:	607b      	str	r3, [r7, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d825      	bhi.n	80064ac <dec_lock+0x60>
		n = Files[i].ctr;
 8006460:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <dec_lock+0x74>)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	4413      	add	r3, r2
 8006468:	330c      	adds	r3, #12
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800646e:	89fb      	ldrh	r3, [r7, #14]
 8006470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006474:	d101      	bne.n	800647a <dec_lock+0x2e>
 8006476:	2300      	movs	r3, #0
 8006478:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800647a:	89fb      	ldrh	r3, [r7, #14]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <dec_lock+0x3a>
 8006480:	89fb      	ldrh	r3, [r7, #14]
 8006482:	3b01      	subs	r3, #1
 8006484:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006486:	4a0e      	ldr	r2, [pc, #56]	; (80064c0 <dec_lock+0x74>)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	4413      	add	r3, r2
 800648e:	330c      	adds	r3, #12
 8006490:	89fa      	ldrh	r2, [r7, #14]
 8006492:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006494:	89fb      	ldrh	r3, [r7, #14]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d105      	bne.n	80064a6 <dec_lock+0x5a>
 800649a:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <dec_lock+0x74>)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	4413      	add	r3, r2
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	737b      	strb	r3, [r7, #13]
 80064aa:	e001      	b.n	80064b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80064ac:	2302      	movs	r3, #2
 80064ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80064b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000098 	.word	0x20000098

080064c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	e010      	b.n	80064f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80064d2:	4a0d      	ldr	r2, [pc, #52]	; (8006508 <clear_lock+0x44>)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	4413      	add	r3, r2
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d105      	bne.n	80064ee <clear_lock+0x2a>
 80064e2:	4a09      	ldr	r2, [pc, #36]	; (8006508 <clear_lock+0x44>)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	4413      	add	r3, r2
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3301      	adds	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d9eb      	bls.n	80064d2 <clear_lock+0xe>
	}
}
 80064fa:	bf00      	nop
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20000098 	.word	0x20000098

0800650c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	78db      	ldrb	r3, [r3, #3]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d034      	beq.n	800658a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	7858      	ldrb	r0, [r3, #1]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006530:	2301      	movs	r3, #1
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	f7ff fd40 	bl	8005fb8 <disk_write>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <sync_window+0x38>
			res = FR_DISK_ERR;
 800653e:	2301      	movs	r3, #1
 8006540:	73fb      	strb	r3, [r7, #15]
 8006542:	e022      	b.n	800658a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	1ad2      	subs	r2, r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	429a      	cmp	r2, r3
 8006558:	d217      	bcs.n	800658a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	789b      	ldrb	r3, [r3, #2]
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	e010      	b.n	8006584 <sync_window+0x78>
					wsect += fs->fsize;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4413      	add	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	7858      	ldrb	r0, [r3, #1]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006576:	2301      	movs	r3, #1
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	f7ff fd1d 	bl	8005fb8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	3b01      	subs	r3, #1
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d8eb      	bhi.n	8006562 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800658a:	7bfb      	ldrb	r3, [r7, #15]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d01b      	beq.n	80065e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff ffad 	bl	800650c <sync_window>
 80065b2:	4603      	mov	r3, r0
 80065b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d113      	bne.n	80065e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	7858      	ldrb	r0, [r3, #1]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065c6:	2301      	movs	r3, #1
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	f7ff fcd5 	bl	8005f78 <disk_read>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80065d4:	f04f 33ff 	mov.w	r3, #4294967295
 80065d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80065da:	2301      	movs	r3, #1
 80065dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff ff87 	bl	800650c <sync_window>
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d158      	bne.n	80066ba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b03      	cmp	r3, #3
 800660e:	d148      	bne.n	80066a2 <sync_fs+0xb2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	791b      	ldrb	r3, [r3, #4]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d144      	bne.n	80066a2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3330      	adds	r3, #48	; 0x30
 800661c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006620:	2100      	movs	r1, #0
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fda9 	bl	800617a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3330      	adds	r3, #48	; 0x30
 800662c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006630:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fd38 	bl	80060aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3330      	adds	r3, #48	; 0x30
 800663e:	4921      	ldr	r1, [pc, #132]	; (80066c4 <sync_fs+0xd4>)
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fd4d 	bl	80060e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3330      	adds	r3, #48	; 0x30
 800664a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800664e:	491e      	ldr	r1, [pc, #120]	; (80066c8 <sync_fs+0xd8>)
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff fd45 	bl	80060e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3330      	adds	r3, #48	; 0x30
 800665a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	4619      	mov	r1, r3
 8006664:	4610      	mov	r0, r2
 8006666:	f7ff fd3b 	bl	80060e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3330      	adds	r3, #48	; 0x30
 800666e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7ff fd31 	bl	80060e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	7858      	ldrb	r0, [r3, #1]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006696:	2301      	movs	r3, #1
 8006698:	f7ff fc8e 	bl	8005fb8 <disk_write>
			fs->fsi_flag = 0;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	2200      	movs	r2, #0
 80066a8:	2100      	movs	r1, #0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fca4 	bl	8005ff8 <disk_ioctl>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <sync_fs+0xca>
 80066b6:	2301      	movs	r3, #1
 80066b8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	41615252 	.word	0x41615252
 80066c8:	61417272 	.word	0x61417272

080066cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	3b02      	subs	r3, #2
 80066da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	3b02      	subs	r3, #2
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d301      	bcc.n	80066ec <clust2sect+0x20>
 80066e8:	2300      	movs	r3, #0
 80066ea:	e008      	b.n	80066fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	895b      	ldrh	r3, [r3, #10]
 80066f0:	461a      	mov	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	fb03 f202 	mul.w	r2, r3, r2
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	4413      	add	r3, r2
}
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b086      	sub	sp, #24
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d904      	bls.n	800672a <get_fat+0x20>
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d302      	bcc.n	8006730 <get_fat+0x26>
		val = 1;	/* Internal error */
 800672a:	2301      	movs	r3, #1
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e08c      	b.n	800684a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006730:	f04f 33ff 	mov.w	r3, #4294967295
 8006734:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d045      	beq.n	80067ca <get_fat+0xc0>
 800673e:	2b03      	cmp	r3, #3
 8006740:	d05d      	beq.n	80067fe <get_fat+0xf4>
 8006742:	2b01      	cmp	r3, #1
 8006744:	d177      	bne.n	8006836 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	6a1a      	ldr	r2, [r3, #32]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	0a5b      	lsrs	r3, r3, #9
 800675c:	4413      	add	r3, r2
 800675e:	4619      	mov	r1, r3
 8006760:	6938      	ldr	r0, [r7, #16]
 8006762:	f7ff ff17 	bl	8006594 <move_window>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d167      	bne.n	800683c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	60fa      	str	r2, [r7, #12]
 8006772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4413      	add	r3, r2
 800677a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800677e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	6a1a      	ldr	r2, [r3, #32]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	0a5b      	lsrs	r3, r3, #9
 8006788:	4413      	add	r3, r2
 800678a:	4619      	mov	r1, r3
 800678c:	6938      	ldr	r0, [r7, #16]
 800678e:	f7ff ff01 	bl	8006594 <move_window>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d153      	bne.n	8006840 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4413      	add	r3, r2
 80067a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	461a      	mov	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <get_fat+0xb6>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	091b      	lsrs	r3, r3, #4
 80067be:	e002      	b.n	80067c6 <get_fat+0xbc>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c6:	617b      	str	r3, [r7, #20]
			break;
 80067c8:	e03f      	b.n	800684a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	6a1a      	ldr	r2, [r3, #32]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	0a1b      	lsrs	r3, r3, #8
 80067d2:	4413      	add	r3, r2
 80067d4:	4619      	mov	r1, r3
 80067d6:	6938      	ldr	r0, [r7, #16]
 80067d8:	f7ff fedc 	bl	8006594 <move_window>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d130      	bne.n	8006844 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80067f0:	4413      	add	r3, r2
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fc1e 	bl	8006034 <ld_word>
 80067f8:	4603      	mov	r3, r0
 80067fa:	617b      	str	r3, [r7, #20]
			break;
 80067fc:	e025      	b.n	800684a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	6a1a      	ldr	r2, [r3, #32]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	09db      	lsrs	r3, r3, #7
 8006806:	4413      	add	r3, r2
 8006808:	4619      	mov	r1, r3
 800680a:	6938      	ldr	r0, [r7, #16]
 800680c:	f7ff fec2 	bl	8006594 <move_window>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d118      	bne.n	8006848 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006824:	4413      	add	r3, r2
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff fc1c 	bl	8006064 <ld_dword>
 800682c:	4603      	mov	r3, r0
 800682e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006832:	617b      	str	r3, [r7, #20]
			break;
 8006834:	e009      	b.n	800684a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006836:	2301      	movs	r3, #1
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	e006      	b.n	800684a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800683c:	bf00      	nop
 800683e:	e004      	b.n	800684a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006840:	bf00      	nop
 8006842:	e002      	b.n	800684a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006844:	bf00      	nop
 8006846:	e000      	b.n	800684a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006848:	bf00      	nop
		}
	}

	return val;
 800684a:	697b      	ldr	r3, [r7, #20]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b089      	sub	sp, #36	; 0x24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006860:	2302      	movs	r3, #2
 8006862:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b01      	cmp	r3, #1
 8006868:	f240 80d6 	bls.w	8006a18 <put_fat+0x1c4>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	f080 80d0 	bcs.w	8006a18 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d073      	beq.n	8006968 <put_fat+0x114>
 8006880:	2b03      	cmp	r3, #3
 8006882:	f000 8091 	beq.w	80069a8 <put_fat+0x154>
 8006886:	2b01      	cmp	r3, #1
 8006888:	f040 80c6 	bne.w	8006a18 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	085b      	lsrs	r3, r3, #1
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	4413      	add	r3, r2
 8006898:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a1a      	ldr	r2, [r3, #32]
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	0a5b      	lsrs	r3, r3, #9
 80068a2:	4413      	add	r3, r2
 80068a4:	4619      	mov	r1, r3
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f7ff fe74 	bl	8006594 <move_window>
 80068ac:	4603      	mov	r3, r0
 80068ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068b0:	7ffb      	ldrb	r3, [r7, #31]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f040 80a9 	bne.w	8006a0a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	1c59      	adds	r1, r3, #1
 80068c2:	61b9      	str	r1, [r7, #24]
 80068c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c8:	4413      	add	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00d      	beq.n	80068f2 <put_fat+0x9e>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	b25b      	sxtb	r3, r3
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	b25a      	sxtb	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	b25b      	sxtb	r3, r3
 80068ea:	4313      	orrs	r3, r2
 80068ec:	b25b      	sxtb	r3, r3
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	e001      	b.n	80068f6 <put_fat+0xa2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a1a      	ldr	r2, [r3, #32]
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	0a5b      	lsrs	r3, r3, #9
 8006908:	4413      	add	r3, r2
 800690a:	4619      	mov	r1, r3
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f7ff fe41 	bl	8006594 <move_window>
 8006912:	4603      	mov	r3, r0
 8006914:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006916:	7ffb      	ldrb	r3, [r7, #31]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d178      	bne.n	8006a0e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006928:	4413      	add	r3, r2
 800692a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <put_fat+0xea>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	091b      	lsrs	r3, r3, #4
 800693a:	b2db      	uxtb	r3, r3
 800693c:	e00e      	b.n	800695c <put_fat+0x108>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	b25b      	sxtb	r3, r3
 8006944:	f023 030f 	bic.w	r3, r3, #15
 8006948:	b25a      	sxtb	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	0a1b      	lsrs	r3, r3, #8
 800694e:	b25b      	sxtb	r3, r3
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	b25b      	sxtb	r3, r3
 8006956:	4313      	orrs	r3, r2
 8006958:	b25b      	sxtb	r3, r3
 800695a:	b2db      	uxtb	r3, r3
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	70da      	strb	r2, [r3, #3]
			break;
 8006966:	e057      	b.n	8006a18 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a1a      	ldr	r2, [r3, #32]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	0a1b      	lsrs	r3, r3, #8
 8006970:	4413      	add	r3, r2
 8006972:	4619      	mov	r1, r3
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f7ff fe0d 	bl	8006594 <move_window>
 800697a:	4603      	mov	r3, r0
 800697c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800697e:	7ffb      	ldrb	r3, [r7, #31]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d146      	bne.n	8006a12 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006992:	4413      	add	r3, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	b292      	uxth	r2, r2
 8006998:	4611      	mov	r1, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fb85 	bl	80060aa <st_word>
			fs->wflag = 1;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	70da      	strb	r2, [r3, #3]
			break;
 80069a6:	e037      	b.n	8006a18 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	09db      	lsrs	r3, r3, #7
 80069b0:	4413      	add	r3, r2
 80069b2:	4619      	mov	r1, r3
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff fded 	bl	8006594 <move_window>
 80069ba:	4603      	mov	r3, r0
 80069bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069be:	7ffb      	ldrb	r3, [r7, #31]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d128      	bne.n	8006a16 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80069d8:	4413      	add	r3, r2
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fb42 	bl	8006064 <ld_dword>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069e6:	4323      	orrs	r3, r4
 80069e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80069f8:	4413      	add	r3, r2
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff fb6f 	bl	80060e0 <st_dword>
			fs->wflag = 1;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	70da      	strb	r2, [r3, #3]
			break;
 8006a08:	e006      	b.n	8006a18 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006a0a:	bf00      	nop
 8006a0c:	e004      	b.n	8006a18 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006a0e:	bf00      	nop
 8006a10:	e002      	b.n	8006a18 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006a12:	bf00      	nop
 8006a14:	e000      	b.n	8006a18 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006a16:	bf00      	nop
		}
	}
	return res;
 8006a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3724      	adds	r7, #36	; 0x24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd90      	pop	{r4, r7, pc}

08006a22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b088      	sub	sp, #32
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d904      	bls.n	8006a48 <remove_chain+0x26>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d301      	bcc.n	8006a4c <remove_chain+0x2a>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e04b      	b.n	8006ae4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00c      	beq.n	8006a6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006a52:	f04f 32ff 	mov.w	r2, #4294967295
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	69b8      	ldr	r0, [r7, #24]
 8006a5a:	f7ff fefb 	bl	8006854 <put_fat>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006a62:	7ffb      	ldrb	r3, [r7, #31]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <remove_chain+0x4a>
 8006a68:	7ffb      	ldrb	r3, [r7, #31]
 8006a6a:	e03b      	b.n	8006ae4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff fe4b 	bl	800670a <get_fat>
 8006a74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d031      	beq.n	8006ae0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <remove_chain+0x64>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e02e      	b.n	8006ae4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d101      	bne.n	8006a92 <remove_chain+0x70>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e028      	b.n	8006ae4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006a92:	2200      	movs	r2, #0
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	69b8      	ldr	r0, [r7, #24]
 8006a98:	f7ff fedc 	bl	8006854 <put_fat>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006aa0:	7ffb      	ldrb	r3, [r7, #31]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <remove_chain+0x88>
 8006aa6:	7ffb      	ldrb	r3, [r7, #31]
 8006aa8:	e01c      	b.n	8006ae4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	691a      	ldr	r2, [r3, #16]
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	3b02      	subs	r3, #2
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d20b      	bcs.n	8006ad0 <remove_chain+0xae>
			fs->free_clst++;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	791b      	ldrb	r3, [r3, #4]
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d3c6      	bcc.n	8006a6c <remove_chain+0x4a>
 8006ade:	e000      	b.n	8006ae2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006ae0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10d      	bne.n	8006b1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <create_chain+0x2c>
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d31b      	bcc.n	8006b50 <create_chain+0x64>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	61bb      	str	r3, [r7, #24]
 8006b1c:	e018      	b.n	8006b50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff fdf2 	bl	800670a <get_fat>
 8006b26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d801      	bhi.n	8006b32 <create_chain+0x46>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e070      	b.n	8006c14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d101      	bne.n	8006b3e <create_chain+0x52>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	e06a      	b.n	8006c14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d201      	bcs.n	8006b4c <create_chain+0x60>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	e063      	b.n	8006c14 <create_chain+0x128>
		scl = clst;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	69fa      	ldr	r2, [r7, #28]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d307      	bcc.n	8006b74 <create_chain+0x88>
				ncl = 2;
 8006b64:	2302      	movs	r3, #2
 8006b66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d901      	bls.n	8006b74 <create_chain+0x88>
 8006b70:	2300      	movs	r3, #0
 8006b72:	e04f      	b.n	8006c14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006b74:	69f9      	ldr	r1, [r7, #28]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff fdc7 	bl	800670a <get_fat>
 8006b7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00e      	beq.n	8006ba2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d003      	beq.n	8006b92 <create_chain+0xa6>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b90:	d101      	bne.n	8006b96 <create_chain+0xaa>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	e03e      	b.n	8006c14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d1da      	bne.n	8006b54 <create_chain+0x68>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e038      	b.n	8006c14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006ba2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba8:	69f9      	ldr	r1, [r7, #28]
 8006baa:	6938      	ldr	r0, [r7, #16]
 8006bac:	f7ff fe52 	bl	8006854 <put_fat>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <create_chain+0xe2>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d006      	beq.n	8006bce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6938      	ldr	r0, [r7, #16]
 8006bc6:	f7ff fe45 	bl	8006854 <put_fat>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d116      	bne.n	8006c02 <create_chain+0x116>
		fs->last_clst = ncl;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	691a      	ldr	r2, [r3, #16]
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	3b02      	subs	r3, #2
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d804      	bhi.n	8006bf2 <create_chain+0x106>
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	1e5a      	subs	r2, r3, #1
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	791b      	ldrb	r3, [r3, #4]
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	711a      	strb	r2, [r3, #4]
 8006c00:	e007      	b.n	8006c12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d102      	bne.n	8006c0e <create_chain+0x122>
 8006c08:	f04f 33ff 	mov.w	r3, #4294967295
 8006c0c:	e000      	b.n	8006c10 <create_chain+0x124>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006c12:	69fb      	ldr	r3, [r7, #28]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	3304      	adds	r3, #4
 8006c32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	0a5b      	lsrs	r3, r3, #9
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	8952      	ldrh	r2, [r2, #10]
 8006c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1d1a      	adds	r2, r3, #4
 8006c46:	613a      	str	r2, [r7, #16]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <clmt_clust+0x3a>
 8006c52:	2300      	movs	r3, #0
 8006c54:	e010      	b.n	8006c78 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d307      	bcc.n	8006c6e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c6c:	e7e9      	b.n	8006c42 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006c6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	4413      	add	r3, r2
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c9a:	d204      	bcs.n	8006ca6 <dir_sdi+0x22>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <dir_sdi+0x26>
		return FR_INT_ERR;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e063      	b.n	8006d72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <dir_sdi+0x46>
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d902      	bls.n	8006cca <dir_sdi+0x46>
		clst = fs->dirbase;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10c      	bne.n	8006cea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	8912      	ldrh	r2, [r2, #8]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d301      	bcc.n	8006ce0 <dir_sdi+0x5c>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e048      	b.n	8006d72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	61da      	str	r2, [r3, #28]
 8006ce8:	e029      	b.n	8006d3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	895b      	ldrh	r3, [r3, #10]
 8006cee:	025b      	lsls	r3, r3, #9
 8006cf0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006cf2:	e019      	b.n	8006d28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6979      	ldr	r1, [r7, #20]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fd06 	bl	800670a <get_fat>
 8006cfe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d101      	bne.n	8006d0c <dir_sdi+0x88>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e032      	b.n	8006d72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d904      	bls.n	8006d1c <dir_sdi+0x98>
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d301      	bcc.n	8006d20 <dir_sdi+0x9c>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e028      	b.n	8006d72 <dir_sdi+0xee>
			ofs -= csz;
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d2e1      	bcs.n	8006cf4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006d30:	6979      	ldr	r1, [r7, #20]
 8006d32:	6938      	ldr	r0, [r7, #16]
 8006d34:	f7ff fcca 	bl	80066cc <clust2sect>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <dir_sdi+0xcc>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e010      	b.n	8006d72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	0a5b      	lsrs	r3, r3, #9
 8006d58:	441a      	add	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6a:	441a      	add	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b086      	sub	sp, #24
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	3320      	adds	r3, #32
 8006d90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <dir_next+0x28>
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006da0:	d301      	bcc.n	8006da6 <dir_next+0x2c>
 8006da2:	2304      	movs	r3, #4
 8006da4:	e0aa      	b.n	8006efc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 8098 	bne.w	8006ee2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10b      	bne.n	8006ddc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	8912      	ldrh	r2, [r2, #8]
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	f0c0 8088 	bcc.w	8006ee2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	61da      	str	r2, [r3, #28]
 8006dd8:	2304      	movs	r3, #4
 8006dda:	e08f      	b.n	8006efc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	0a5b      	lsrs	r3, r3, #9
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	8952      	ldrh	r2, [r2, #10]
 8006de4:	3a01      	subs	r2, #1
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d17a      	bne.n	8006ee2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7ff fc88 	bl	800670a <get_fat>
 8006dfa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d801      	bhi.n	8006e06 <dir_next+0x8c>
 8006e02:	2302      	movs	r3, #2
 8006e04:	e07a      	b.n	8006efc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d101      	bne.n	8006e12 <dir_next+0x98>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e074      	b.n	8006efc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d358      	bcc.n	8006ece <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d104      	bne.n	8006e2c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	61da      	str	r2, [r3, #28]
 8006e28:	2304      	movs	r3, #4
 8006e2a:	e067      	b.n	8006efc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	4619      	mov	r1, r3
 8006e34:	4610      	mov	r0, r2
 8006e36:	f7ff fe59 	bl	8006aec <create_chain>
 8006e3a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <dir_next+0xcc>
 8006e42:	2307      	movs	r3, #7
 8006e44:	e05a      	b.n	8006efc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d101      	bne.n	8006e50 <dir_next+0xd6>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e055      	b.n	8006efc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d101      	bne.n	8006e5c <dir_next+0xe2>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e04f      	b.n	8006efc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff fb55 	bl	800650c <sync_window>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <dir_next+0xf2>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e047      	b.n	8006efc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3330      	adds	r3, #48	; 0x30
 8006e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e74:	2100      	movs	r1, #0
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff f97f 	bl	800617a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	6979      	ldr	r1, [r7, #20]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff fc22 	bl	80066cc <clust2sect>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e8e:	e012      	b.n	8006eb6 <dir_next+0x13c>
						fs->wflag = 1;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7ff fb38 	bl	800650c <sync_window>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <dir_next+0x12c>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e02a      	b.n	8006efc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	613b      	str	r3, [r7, #16]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	895b      	ldrh	r3, [r3, #10]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d3e6      	bcc.n	8006e90 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad2      	subs	r2, r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006ed4:	6979      	ldr	r1, [r7, #20]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff fbf8 	bl	80066cc <clust2sect>
 8006edc:	4602      	mov	r2, r0
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef4:	441a      	add	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006f14:	2100      	movs	r1, #0
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff feb4 	bl	8006c84 <dir_sdi>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d12b      	bne.n	8006f7e <dir_alloc+0x7a>
		n = 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7ff fb2f 	bl	8006594 <move_window>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11d      	bne.n	8006f7c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2be5      	cmp	r3, #229	; 0xe5
 8006f48:	d004      	beq.n	8006f54 <dir_alloc+0x50>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d107      	bne.n	8006f64 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3301      	adds	r3, #1
 8006f58:	613b      	str	r3, [r7, #16]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d102      	bne.n	8006f68 <dir_alloc+0x64>
 8006f62:	e00c      	b.n	8006f7e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006f68:	2101      	movs	r1, #1
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7ff ff05 	bl	8006d7a <dir_next>
 8006f70:	4603      	mov	r3, r0
 8006f72:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0d7      	beq.n	8006f2a <dir_alloc+0x26>
 8006f7a:	e000      	b.n	8006f7e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006f7c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d101      	bne.n	8006f88 <dir_alloc+0x84>
 8006f84:	2307      	movs	r3, #7
 8006f86:	75fb      	strb	r3, [r7, #23]
	return res;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	331a      	adds	r3, #26
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff f847 	bl	8006034 <ld_word>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d109      	bne.n	8006fc6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	3314      	adds	r3, #20
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff f83c 	bl	8006034 <ld_word>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	041b      	lsls	r3, r3, #16
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	331a      	adds	r3, #26
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	b292      	uxth	r2, r2
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff f85f 	bl	80060aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d109      	bne.n	8007008 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f103 0214 	add.w	r2, r3, #20
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	0c1b      	lsrs	r3, r3, #16
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f7ff f851 	bl	80060aa <st_word>
	}
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800701a:	2304      	movs	r3, #4
 800701c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007024:	e03c      	b.n	80070a0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	4619      	mov	r1, r3
 800702c:	6938      	ldr	r0, [r7, #16]
 800702e:	f7ff fab1 	bl	8006594 <move_window>
 8007032:	4603      	mov	r3, r0
 8007034:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d136      	bne.n	80070aa <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d102      	bne.n	8007050 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800704a:	2304      	movs	r3, #4
 800704c:	75fb      	strb	r3, [r7, #23]
 800704e:	e031      	b.n	80070b4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	330b      	adds	r3, #11
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800705c:	73bb      	strb	r3, [r7, #14]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7bba      	ldrb	r2, [r7, #14]
 8007062:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	2be5      	cmp	r3, #229	; 0xe5
 8007068:	d011      	beq.n	800708e <dir_read+0x7e>
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b2e      	cmp	r3, #46	; 0x2e
 800706e:	d00e      	beq.n	800708e <dir_read+0x7e>
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b0f      	cmp	r3, #15
 8007074:	d00b      	beq.n	800708e <dir_read+0x7e>
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	f023 0320 	bic.w	r3, r3, #32
 800707c:	2b08      	cmp	r3, #8
 800707e:	bf0c      	ite	eq
 8007080:	2301      	moveq	r3, #1
 8007082:	2300      	movne	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	4293      	cmp	r3, r2
 800708c:	d00f      	beq.n	80070ae <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff fe72 	bl	8006d7a <dir_next>
 8007096:	4603      	mov	r3, r0
 8007098:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d108      	bne.n	80070b2 <dir_read+0xa2>
	while (dp->sect) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1be      	bne.n	8007026 <dir_read+0x16>
 80070a8:	e004      	b.n	80070b4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80070aa:	bf00      	nop
 80070ac:	e002      	b.n	80070b4 <dir_read+0xa4>
				break;
 80070ae:	bf00      	nop
 80070b0:	e000      	b.n	80070b4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80070b2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <dir_read+0xb0>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	61da      	str	r2, [r3, #28]
	return res;
 80070c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b086      	sub	sp, #24
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80070d8:	2100      	movs	r1, #0
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fdd2 	bl	8006c84 <dir_sdi>
 80070e0:	4603      	mov	r3, r0
 80070e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <dir_find+0x24>
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	e03e      	b.n	800716c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6938      	ldr	r0, [r7, #16]
 80070f6:	f7ff fa4d 	bl	8006594 <move_window>
 80070fa:	4603      	mov	r3, r0
 80070fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d12f      	bne.n	8007164 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d102      	bne.n	8007118 <dir_find+0x4e>
 8007112:	2304      	movs	r3, #4
 8007114:	75fb      	strb	r3, [r7, #23]
 8007116:	e028      	b.n	800716a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	330b      	adds	r3, #11
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007124:	b2da      	uxtb	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	330b      	adds	r3, #11
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	f003 0308 	and.w	r3, r3, #8
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10a      	bne.n	8007150 <dir_find+0x86>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a18      	ldr	r0, [r3, #32]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3324      	adds	r3, #36	; 0x24
 8007142:	220b      	movs	r2, #11
 8007144:	4619      	mov	r1, r3
 8007146:	f7ff f832 	bl	80061ae <mem_cmp>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00b      	beq.n	8007168 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007150:	2100      	movs	r1, #0
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff fe11 	bl	8006d7a <dir_next>
 8007158:	4603      	mov	r3, r0
 800715a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0c5      	beq.n	80070ee <dir_find+0x24>
 8007162:	e002      	b.n	800716a <dir_find+0xa0>
		if (res != FR_OK) break;
 8007164:	bf00      	nop
 8007166:	e000      	b.n	800716a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007168:	bf00      	nop

	return res;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007182:	2101      	movs	r1, #1
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff febd 	bl	8006f04 <dir_alloc>
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d11c      	bne.n	80071ce <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	4619      	mov	r1, r3
 800719a:	68b8      	ldr	r0, [r7, #8]
 800719c:	f7ff f9fa 	bl	8006594 <move_window>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d111      	bne.n	80071ce <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	2220      	movs	r2, #32
 80071b0:	2100      	movs	r1, #0
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe ffe1 	bl	800617a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a18      	ldr	r0, [r3, #32]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3324      	adds	r3, #36	; 0x24
 80071c0:	220b      	movs	r2, #11
 80071c2:	4619      	mov	r1, r3
 80071c4:	f7fe ffb8 	bl	8006138 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2201      	movs	r2, #1
 80071cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	4619      	mov	r1, r3
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff f9d1 	bl	8006594 <move_window>
 80071f2:	4603      	mov	r3, r0
 80071f4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80071f6:	7afb      	ldrb	r3, [r7, #11]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	22e5      	movs	r2, #229	; 0xe5
 8007202:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800720a:	7afb      	ldrb	r3, [r7, #11]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2200      	movs	r2, #0
 8007222:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d04e      	beq.n	80072ca <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	613b      	str	r3, [r7, #16]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007234:	e021      	b.n	800727a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1a      	ldr	r2, [r3, #32]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	1c59      	adds	r1, r3, #1
 800723e:	6179      	str	r1, [r7, #20]
 8007240:	4413      	add	r3, r2
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2b20      	cmp	r3, #32
 800724a:	d100      	bne.n	800724e <get_fileinfo+0x3a>
 800724c:	e015      	b.n	800727a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	2b05      	cmp	r3, #5
 8007252:	d101      	bne.n	8007258 <get_fileinfo+0x44>
 8007254:	23e5      	movs	r3, #229	; 0xe5
 8007256:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2b09      	cmp	r3, #9
 800725c:	d106      	bne.n	800726c <get_fileinfo+0x58>
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	613a      	str	r2, [r7, #16]
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	4413      	add	r3, r2
 8007268:	222e      	movs	r2, #46	; 0x2e
 800726a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	613a      	str	r2, [r7, #16]
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	4413      	add	r3, r2
 8007276:	7bfa      	ldrb	r2, [r7, #15]
 8007278:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b0a      	cmp	r3, #10
 800727e:	d9da      	bls.n	8007236 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	4413      	add	r3, r2
 8007286:	3309      	adds	r3, #9
 8007288:	2200      	movs	r2, #0
 800728a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	7ada      	ldrb	r2, [r3, #11]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	331c      	adds	r3, #28
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe fee1 	bl	8006064 <ld_dword>
 80072a2:	4602      	mov	r2, r0
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	3316      	adds	r3, #22
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fed8 	bl	8006064 <ld_dword>
 80072b4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	80da      	strh	r2, [r3, #6]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	0c1b      	lsrs	r3, r3, #16
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	809a      	strh	r2, [r3, #4]
 80072c8:	e000      	b.n	80072cc <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80072ca:	bf00      	nop
}
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3324      	adds	r3, #36	; 0x24
 80072e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80072ea:	220b      	movs	r2, #11
 80072ec:	2120      	movs	r1, #32
 80072ee:	68b8      	ldr	r0, [r7, #8]
 80072f0:	f7fe ff43 	bl	800617a <mem_set>
	si = i = 0; ni = 8;
 80072f4:	2300      	movs	r3, #0
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	2308      	movs	r3, #8
 80072fe:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	617a      	str	r2, [r7, #20]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800730e:	7ffb      	ldrb	r3, [r7, #31]
 8007310:	2b20      	cmp	r3, #32
 8007312:	d94e      	bls.n	80073b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007314:	7ffb      	ldrb	r3, [r7, #31]
 8007316:	2b2f      	cmp	r3, #47	; 0x2f
 8007318:	d006      	beq.n	8007328 <create_name+0x54>
 800731a:	7ffb      	ldrb	r3, [r7, #31]
 800731c:	2b5c      	cmp	r3, #92	; 0x5c
 800731e:	d110      	bne.n	8007342 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007320:	e002      	b.n	8007328 <create_name+0x54>
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	3301      	adds	r3, #1
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	4413      	add	r3, r2
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b2f      	cmp	r3, #47	; 0x2f
 8007332:	d0f6      	beq.n	8007322 <create_name+0x4e>
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	4413      	add	r3, r2
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b5c      	cmp	r3, #92	; 0x5c
 800733e:	d0f0      	beq.n	8007322 <create_name+0x4e>
			break;
 8007340:	e038      	b.n	80073b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007342:	7ffb      	ldrb	r3, [r7, #31]
 8007344:	2b2e      	cmp	r3, #46	; 0x2e
 8007346:	d003      	beq.n	8007350 <create_name+0x7c>
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	429a      	cmp	r2, r3
 800734e:	d30c      	bcc.n	800736a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	2b0b      	cmp	r3, #11
 8007354:	d002      	beq.n	800735c <create_name+0x88>
 8007356:	7ffb      	ldrb	r3, [r7, #31]
 8007358:	2b2e      	cmp	r3, #46	; 0x2e
 800735a:	d001      	beq.n	8007360 <create_name+0x8c>
 800735c:	2306      	movs	r3, #6
 800735e:	e044      	b.n	80073ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007360:	2308      	movs	r3, #8
 8007362:	613b      	str	r3, [r7, #16]
 8007364:	230b      	movs	r3, #11
 8007366:	61bb      	str	r3, [r7, #24]
			continue;
 8007368:	e022      	b.n	80073b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800736a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800736e:	2b00      	cmp	r3, #0
 8007370:	da04      	bge.n	800737c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007372:	7ffb      	ldrb	r3, [r7, #31]
 8007374:	3b80      	subs	r3, #128	; 0x80
 8007376:	4a1f      	ldr	r2, [pc, #124]	; (80073f4 <create_name+0x120>)
 8007378:	5cd3      	ldrb	r3, [r2, r3]
 800737a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800737c:	7ffb      	ldrb	r3, [r7, #31]
 800737e:	4619      	mov	r1, r3
 8007380:	481d      	ldr	r0, [pc, #116]	; (80073f8 <create_name+0x124>)
 8007382:	f7fe ff3b 	bl	80061fc <chk_chr>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <create_name+0xbc>
 800738c:	2306      	movs	r3, #6
 800738e:	e02c      	b.n	80073ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007390:	7ffb      	ldrb	r3, [r7, #31]
 8007392:	2b60      	cmp	r3, #96	; 0x60
 8007394:	d905      	bls.n	80073a2 <create_name+0xce>
 8007396:	7ffb      	ldrb	r3, [r7, #31]
 8007398:	2b7a      	cmp	r3, #122	; 0x7a
 800739a:	d802      	bhi.n	80073a2 <create_name+0xce>
 800739c:	7ffb      	ldrb	r3, [r7, #31]
 800739e:	3b20      	subs	r3, #32
 80073a0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	613a      	str	r2, [r7, #16]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	4413      	add	r3, r2
 80073ac:	7ffa      	ldrb	r2, [r7, #31]
 80073ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80073b0:	e7a6      	b.n	8007300 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80073b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	441a      	add	r2, r3
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <create_name+0xf4>
 80073c4:	2306      	movs	r3, #6
 80073c6:	e010      	b.n	80073ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2be5      	cmp	r3, #229	; 0xe5
 80073ce:	d102      	bne.n	80073d6 <create_name+0x102>
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2205      	movs	r2, #5
 80073d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80073d6:	7ffb      	ldrb	r3, [r7, #31]
 80073d8:	2b20      	cmp	r3, #32
 80073da:	d801      	bhi.n	80073e0 <create_name+0x10c>
 80073dc:	2204      	movs	r2, #4
 80073de:	e000      	b.n	80073e2 <create_name+0x10e>
 80073e0:	2200      	movs	r2, #0
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	330b      	adds	r3, #11
 80073e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80073e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3720      	adds	r7, #32
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	0800d848 	.word	0x0800d848
 80073f8:	0800d774 	.word	0x0800d774

080073fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007410:	e002      	b.n	8007418 <follow_path+0x1c>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	3301      	adds	r3, #1
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b2f      	cmp	r3, #47	; 0x2f
 800741e:	d0f8      	beq.n	8007412 <follow_path+0x16>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b5c      	cmp	r3, #92	; 0x5c
 8007426:	d0f4      	beq.n	8007412 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2200      	movs	r2, #0
 800742c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b1f      	cmp	r3, #31
 8007434:	d80a      	bhi.n	800744c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2280      	movs	r2, #128	; 0x80
 800743a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800743e:	2100      	movs	r1, #0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fc1f 	bl	8006c84 <dir_sdi>
 8007446:	4603      	mov	r3, r0
 8007448:	75fb      	strb	r3, [r7, #23]
 800744a:	e043      	b.n	80074d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800744c:	463b      	mov	r3, r7
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff ff3f 	bl	80072d4 <create_name>
 8007456:	4603      	mov	r3, r0
 8007458:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d134      	bne.n	80074ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff fe32 	bl	80070ca <dir_find>
 8007466:	4603      	mov	r3, r0
 8007468:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007470:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	2b04      	cmp	r3, #4
 800747c:	d127      	bne.n	80074ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800747e:	7afb      	ldrb	r3, [r7, #11]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d122      	bne.n	80074ce <follow_path+0xd2>
 8007488:	2305      	movs	r3, #5
 800748a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800748c:	e01f      	b.n	80074ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800748e:	7afb      	ldrb	r3, [r7, #11]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d11c      	bne.n	80074d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	799b      	ldrb	r3, [r3, #6]
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d102      	bne.n	80074aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80074a4:	2305      	movs	r3, #5
 80074a6:	75fb      	strb	r3, [r7, #23]
 80074a8:	e014      	b.n	80074d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b8:	4413      	add	r3, r2
 80074ba:	4619      	mov	r1, r3
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f7ff fd68 	bl	8006f92 <ld_clust>
 80074c2:	4602      	mov	r2, r0
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80074c8:	e7c0      	b.n	800744c <follow_path+0x50>
			if (res != FR_OK) break;
 80074ca:	bf00      	nop
 80074cc:	e002      	b.n	80074d4 <follow_path+0xd8>
				break;
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80074d2:	bf00      	nop
			}
		}
	}

	return res;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80074de:	b480      	push	{r7}
 80074e0:	b087      	sub	sp, #28
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d031      	beq.n	8007558 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	617b      	str	r3, [r7, #20]
 80074fa:	e002      	b.n	8007502 <get_ldnumber+0x24>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	3301      	adds	r3, #1
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b20      	cmp	r3, #32
 8007508:	d903      	bls.n	8007512 <get_ldnumber+0x34>
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b3a      	cmp	r3, #58	; 0x3a
 8007510:	d1f4      	bne.n	80074fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b3a      	cmp	r3, #58	; 0x3a
 8007518:	d11c      	bne.n	8007554 <get_ldnumber+0x76>
			tp = *path;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	60fa      	str	r2, [r7, #12]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	3b30      	subs	r3, #48	; 0x30
 800752a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b09      	cmp	r3, #9
 8007530:	d80e      	bhi.n	8007550 <get_ldnumber+0x72>
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	429a      	cmp	r2, r3
 8007538:	d10a      	bne.n	8007550 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d107      	bne.n	8007550 <get_ldnumber+0x72>
					vol = (int)i;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	3301      	adds	r3, #1
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	e002      	b.n	800755a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007554:	2300      	movs	r3, #0
 8007556:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007558:	693b      	ldr	r3, [r7, #16]
}
 800755a:	4618      	mov	r0, r3
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
	...

08007568 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	70da      	strb	r2, [r3, #3]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff f806 	bl	8006594 <move_window>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <check_fs+0x2a>
 800758e:	2304      	movs	r3, #4
 8007590:	e038      	b.n	8007604 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3330      	adds	r3, #48	; 0x30
 8007596:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe fd4a 	bl	8006034 <ld_word>
 80075a0:	4603      	mov	r3, r0
 80075a2:	461a      	mov	r2, r3
 80075a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d001      	beq.n	80075b0 <check_fs+0x48>
 80075ac:	2303      	movs	r3, #3
 80075ae:	e029      	b.n	8007604 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075b6:	2be9      	cmp	r3, #233	; 0xe9
 80075b8:	d009      	beq.n	80075ce <check_fs+0x66>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075c0:	2beb      	cmp	r3, #235	; 0xeb
 80075c2:	d11e      	bne.n	8007602 <check_fs+0x9a>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80075ca:	2b90      	cmp	r3, #144	; 0x90
 80075cc:	d119      	bne.n	8007602 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3330      	adds	r3, #48	; 0x30
 80075d2:	3336      	adds	r3, #54	; 0x36
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fd45 	bl	8006064 <ld_dword>
 80075da:	4603      	mov	r3, r0
 80075dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075e0:	4a0a      	ldr	r2, [pc, #40]	; (800760c <check_fs+0xa4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d101      	bne.n	80075ea <check_fs+0x82>
 80075e6:	2300      	movs	r3, #0
 80075e8:	e00c      	b.n	8007604 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3330      	adds	r3, #48	; 0x30
 80075ee:	3352      	adds	r3, #82	; 0x52
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe fd37 	bl	8006064 <ld_dword>
 80075f6:	4602      	mov	r2, r0
 80075f8:	4b05      	ldr	r3, [pc, #20]	; (8007610 <check_fs+0xa8>)
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d101      	bne.n	8007602 <check_fs+0x9a>
 80075fe:	2300      	movs	r3, #0
 8007600:	e000      	b.n	8007604 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007602:	2302      	movs	r3, #2
}
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	00544146 	.word	0x00544146
 8007610:	33544146 	.word	0x33544146

08007614 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b096      	sub	sp, #88	; 0x58
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f7ff ff58 	bl	80074de <get_ldnumber>
 800762e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007632:	2b00      	cmp	r3, #0
 8007634:	da01      	bge.n	800763a <find_volume+0x26>
 8007636:	230b      	movs	r3, #11
 8007638:	e22e      	b.n	8007a98 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800763a:	4aa8      	ldr	r2, [pc, #672]	; (80078dc <find_volume+0x2c8>)
 800763c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007642:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <find_volume+0x3a>
 800764a:	230c      	movs	r3, #12
 800764c:	e224      	b.n	8007a98 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007652:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	f023 0301 	bic.w	r3, r3, #1
 800765a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01a      	beq.n	800769a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	785b      	ldrb	r3, [r3, #1]
 8007668:	4618      	mov	r0, r3
 800766a:	f7fe fc45 	bl	8005ef8 <disk_status>
 800766e:	4603      	mov	r3, r0
 8007670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007674:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10c      	bne.n	800769a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d007      	beq.n	8007696 <find_volume+0x82>
 8007686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007692:	230a      	movs	r3, #10
 8007694:	e200      	b.n	8007a98 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007696:	2300      	movs	r3, #0
 8007698:	e1fe      	b.n	8007a98 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	2200      	movs	r2, #0
 800769e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80076a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fe fc3d 	bl	8005f2c <disk_initialize>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80076b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80076c4:	2303      	movs	r3, #3
 80076c6:	e1e7      	b.n	8007a98 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d007      	beq.n	80076de <find_volume+0xca>
 80076ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80076da:	230a      	movs	r3, #10
 80076dc:	e1dc      	b.n	8007a98 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80076e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076e6:	f7ff ff3f 	bl	8007568 <check_fs>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80076f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d14b      	bne.n	8007790 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80076f8:	2300      	movs	r3, #0
 80076fa:	643b      	str	r3, [r7, #64]	; 0x40
 80076fc:	e01f      	b.n	800773e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800770c:	4413      	add	r3, r2
 800770e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	3304      	adds	r3, #4
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d006      	beq.n	8007728 <find_volume+0x114>
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	3308      	adds	r3, #8
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe fca0 	bl	8006064 <ld_dword>
 8007724:	4602      	mov	r2, r0
 8007726:	e000      	b.n	800772a <find_volume+0x116>
 8007728:	2200      	movs	r2, #0
 800772a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007732:	440b      	add	r3, r1
 8007734:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800773a:	3301      	adds	r3, #1
 800773c:	643b      	str	r3, [r7, #64]	; 0x40
 800773e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007740:	2b03      	cmp	r3, #3
 8007742:	d9dc      	bls.n	80076fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007744:	2300      	movs	r3, #0
 8007746:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <find_volume+0x140>
 800774e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007750:	3b01      	subs	r3, #1
 8007752:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800775c:	4413      	add	r3, r2
 800775e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007762:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007766:	2b00      	cmp	r3, #0
 8007768:	d005      	beq.n	8007776 <find_volume+0x162>
 800776a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800776c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800776e:	f7ff fefb 	bl	8007568 <check_fs>
 8007772:	4603      	mov	r3, r0
 8007774:	e000      	b.n	8007778 <find_volume+0x164>
 8007776:	2303      	movs	r3, #3
 8007778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800777c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007780:	2b01      	cmp	r3, #1
 8007782:	d905      	bls.n	8007790 <find_volume+0x17c>
 8007784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007786:	3301      	adds	r3, #1
 8007788:	643b      	str	r3, [r7, #64]	; 0x40
 800778a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800778c:	2b03      	cmp	r3, #3
 800778e:	d9e1      	bls.n	8007754 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007794:	2b04      	cmp	r3, #4
 8007796:	d101      	bne.n	800779c <find_volume+0x188>
 8007798:	2301      	movs	r3, #1
 800779a:	e17d      	b.n	8007a98 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800779c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d901      	bls.n	80077a8 <find_volume+0x194>
 80077a4:	230d      	movs	r3, #13
 80077a6:	e177      	b.n	8007a98 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	3330      	adds	r3, #48	; 0x30
 80077ac:	330b      	adds	r3, #11
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe fc40 	bl	8006034 <ld_word>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ba:	d001      	beq.n	80077c0 <find_volume+0x1ac>
 80077bc:	230d      	movs	r3, #13
 80077be:	e16b      	b.n	8007a98 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	3330      	adds	r3, #48	; 0x30
 80077c4:	3316      	adds	r3, #22
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fc34 	bl	8006034 <ld_word>
 80077cc:	4603      	mov	r3, r0
 80077ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80077d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <find_volume+0x1d0>
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	3330      	adds	r3, #48	; 0x30
 80077da:	3324      	adds	r3, #36	; 0x24
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe fc41 	bl	8006064 <ld_dword>
 80077e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80077e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077e8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80077ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	789b      	ldrb	r3, [r3, #2]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d005      	beq.n	8007808 <find_volume+0x1f4>
 80077fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fe:	789b      	ldrb	r3, [r3, #2]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d001      	beq.n	8007808 <find_volume+0x1f4>
 8007804:	230d      	movs	r3, #13
 8007806:	e147      	b.n	8007a98 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780a:	789b      	ldrb	r3, [r3, #2]
 800780c:	461a      	mov	r2, r3
 800780e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007810:	fb02 f303 	mul.w	r3, r2, r3
 8007814:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800781c:	b29a      	uxth	r2, r3
 800781e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007820:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	895b      	ldrh	r3, [r3, #10]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d008      	beq.n	800783c <find_volume+0x228>
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	895b      	ldrh	r3, [r3, #10]
 800782e:	461a      	mov	r2, r3
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	895b      	ldrh	r3, [r3, #10]
 8007834:	3b01      	subs	r3, #1
 8007836:	4013      	ands	r3, r2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <find_volume+0x22c>
 800783c:	230d      	movs	r3, #13
 800783e:	e12b      	b.n	8007a98 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	3330      	adds	r3, #48	; 0x30
 8007844:	3311      	adds	r3, #17
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe fbf4 	bl	8006034 <ld_word>
 800784c:	4603      	mov	r3, r0
 800784e:	461a      	mov	r2, r3
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007856:	891b      	ldrh	r3, [r3, #8]
 8007858:	f003 030f 	and.w	r3, r3, #15
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <find_volume+0x252>
 8007862:	230d      	movs	r3, #13
 8007864:	e118      	b.n	8007a98 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007868:	3330      	adds	r3, #48	; 0x30
 800786a:	3313      	adds	r3, #19
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe fbe1 	bl	8006034 <ld_word>
 8007872:	4603      	mov	r3, r0
 8007874:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007878:	2b00      	cmp	r3, #0
 800787a:	d106      	bne.n	800788a <find_volume+0x276>
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	3330      	adds	r3, #48	; 0x30
 8007880:	3320      	adds	r3, #32
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe fbee 	bl	8006064 <ld_dword>
 8007888:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	3330      	adds	r3, #48	; 0x30
 800788e:	330e      	adds	r3, #14
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe fbcf 	bl	8006034 <ld_word>
 8007896:	4603      	mov	r3, r0
 8007898:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800789a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <find_volume+0x290>
 80078a0:	230d      	movs	r3, #13
 80078a2:	e0f9      	b.n	8007a98 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80078a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80078a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078a8:	4413      	add	r3, r2
 80078aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ac:	8912      	ldrh	r2, [r2, #8]
 80078ae:	0912      	lsrs	r2, r2, #4
 80078b0:	b292      	uxth	r2, r2
 80078b2:	4413      	add	r3, r2
 80078b4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80078b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d201      	bcs.n	80078c2 <find_volume+0x2ae>
 80078be:	230d      	movs	r3, #13
 80078c0:	e0ea      	b.n	8007a98 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80078c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ca:	8952      	ldrh	r2, [r2, #10]
 80078cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d103      	bne.n	80078e0 <find_volume+0x2cc>
 80078d8:	230d      	movs	r3, #13
 80078da:	e0dd      	b.n	8007a98 <find_volume+0x484>
 80078dc:	20000090 	.word	0x20000090
		fmt = FS_FAT32;
 80078e0:	2303      	movs	r3, #3
 80078e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d802      	bhi.n	80078f6 <find_volume+0x2e2>
 80078f0:	2302      	movs	r3, #2
 80078f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d802      	bhi.n	8007906 <find_volume+0x2f2>
 8007900:	2301      	movs	r3, #1
 8007902:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	1c9a      	adds	r2, r3, #2
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007912:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007914:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007918:	441a      	add	r2, r3
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800791e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	441a      	add	r2, r3
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800792c:	2b03      	cmp	r3, #3
 800792e:	d11e      	bne.n	800796e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	3330      	adds	r3, #48	; 0x30
 8007934:	332a      	adds	r3, #42	; 0x2a
 8007936:	4618      	mov	r0, r3
 8007938:	f7fe fb7c 	bl	8006034 <ld_word>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <find_volume+0x332>
 8007942:	230d      	movs	r3, #13
 8007944:	e0a8      	b.n	8007a98 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	891b      	ldrh	r3, [r3, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <find_volume+0x33e>
 800794e:	230d      	movs	r3, #13
 8007950:	e0a2      	b.n	8007a98 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	3330      	adds	r3, #48	; 0x30
 8007956:	332c      	adds	r3, #44	; 0x2c
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe fb83 	bl	8006064 <ld_dword>
 800795e:	4602      	mov	r2, r0
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	647b      	str	r3, [r7, #68]	; 0x44
 800796c:	e01f      	b.n	80079ae <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	891b      	ldrh	r3, [r3, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <find_volume+0x366>
 8007976:	230d      	movs	r3, #13
 8007978:	e08e      	b.n	8007a98 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	6a1a      	ldr	r2, [r3, #32]
 800797e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007980:	441a      	add	r2, r3
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007986:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800798a:	2b02      	cmp	r3, #2
 800798c:	d103      	bne.n	8007996 <find_volume+0x382>
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	e00a      	b.n	80079ac <find_volume+0x398>
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	695a      	ldr	r2, [r3, #20]
 800799a:	4613      	mov	r3, r2
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	4413      	add	r3, r2
 80079a0:	085a      	lsrs	r2, r3, #1
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80079ac:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80079b8:	0a5b      	lsrs	r3, r3, #9
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d201      	bcs.n	80079c2 <find_volume+0x3ae>
 80079be:	230d      	movs	r3, #13
 80079c0:	e06a      	b.n	8007a98 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	611a      	str	r2, [r3, #16]
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	691a      	ldr	r2, [r3, #16]
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80079d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d4:	2280      	movs	r2, #128	; 0x80
 80079d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80079d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d149      	bne.n	8007a74 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80079e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e2:	3330      	adds	r3, #48	; 0x30
 80079e4:	3330      	adds	r3, #48	; 0x30
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fb24 	bl	8006034 <ld_word>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d140      	bne.n	8007a74 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80079f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f4:	3301      	adds	r3, #1
 80079f6:	4619      	mov	r1, r3
 80079f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079fa:	f7fe fdcb 	bl	8006594 <move_window>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d137      	bne.n	8007a74 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	2200      	movs	r2, #0
 8007a08:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0c:	3330      	adds	r3, #48	; 0x30
 8007a0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe fb0e 	bl	8006034 <ld_word>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d127      	bne.n	8007a74 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a26:	3330      	adds	r3, #48	; 0x30
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fb1b 	bl	8006064 <ld_dword>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	4b1b      	ldr	r3, [pc, #108]	; (8007aa0 <find_volume+0x48c>)
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d11e      	bne.n	8007a74 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	3330      	adds	r3, #48	; 0x30
 8007a3a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fb10 	bl	8006064 <ld_dword>
 8007a44:	4602      	mov	r2, r0
 8007a46:	4b17      	ldr	r3, [pc, #92]	; (8007aa4 <find_volume+0x490>)
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d113      	bne.n	8007a74 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	3330      	adds	r3, #48	; 0x30
 8007a50:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe fb05 	bl	8006064 <ld_dword>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	3330      	adds	r3, #48	; 0x30
 8007a64:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe fafb 	bl	8006064 <ld_dword>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a72:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007a7a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <find_volume+0x494>)
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	4b08      	ldr	r3, [pc, #32]	; (8007aa8 <find_volume+0x494>)
 8007a86:	801a      	strh	r2, [r3, #0]
 8007a88:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <find_volume+0x494>)
 8007a8a:	881a      	ldrh	r2, [r3, #0]
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007a90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a92:	f7fe fd17 	bl	80064c4 <clear_lock>
#endif
	return FR_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3758      	adds	r7, #88	; 0x58
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	41615252 	.word	0x41615252
 8007aa4:	61417272 	.word	0x61417272
 8007aa8:	20000094 	.word	0x20000094

08007aac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007ab6:	2309      	movs	r3, #9
 8007ab8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01c      	beq.n	8007afa <validate+0x4e>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d018      	beq.n	8007afa <validate+0x4e>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d013      	beq.n	8007afa <validate+0x4e>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	889a      	ldrh	r2, [r3, #4]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	88db      	ldrh	r3, [r3, #6]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d10c      	bne.n	8007afa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe fa06 	bl	8005ef8 <disk_status>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <validate+0x4e>
			res = FR_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <validate+0x5a>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	e000      	b.n	8007b08 <validate+0x5c>
 8007b06:	2300      	movs	r3, #0
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	6013      	str	r3, [r2, #0]
	return res;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	4613      	mov	r3, r2
 8007b24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007b2a:	f107 0310 	add.w	r3, r7, #16
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff fcd5 	bl	80074de <get_ldnumber>
 8007b34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	da01      	bge.n	8007b40 <f_mount+0x28>
 8007b3c:	230b      	movs	r3, #11
 8007b3e:	e02b      	b.n	8007b98 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007b40:	4a17      	ldr	r2, [pc, #92]	; (8007ba0 <f_mount+0x88>)
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d005      	beq.n	8007b5c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007b50:	69b8      	ldr	r0, [r7, #24]
 8007b52:	f7fe fcb7 	bl	80064c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	490d      	ldr	r1, [pc, #52]	; (8007ba0 <f_mount+0x88>)
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <f_mount+0x66>
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d001      	beq.n	8007b82 <f_mount+0x6a>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e00a      	b.n	8007b98 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007b82:	f107 010c 	add.w	r1, r7, #12
 8007b86:	f107 0308 	add.w	r3, r7, #8
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff fd41 	bl	8007614 <find_volume>
 8007b92:	4603      	mov	r3, r0
 8007b94:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3720      	adds	r7, #32
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20000090 	.word	0x20000090

08007ba4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b098      	sub	sp, #96	; 0x60
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <f_open+0x18>
 8007bb8:	2309      	movs	r3, #9
 8007bba:	e1ad      	b.n	8007f18 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bc2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007bc4:	79fa      	ldrb	r2, [r7, #7]
 8007bc6:	f107 0110 	add.w	r1, r7, #16
 8007bca:	f107 0308 	add.w	r3, r7, #8
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff fd20 	bl	8007614 <find_volume>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007bda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f040 8191 	bne.w	8007f06 <f_open+0x362>
		dj.obj.fs = fs;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	f107 0314 	add.w	r3, r7, #20
 8007bee:	4611      	mov	r1, r2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff fc03 	bl	80073fc <follow_path>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d11a      	bne.n	8007c3a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007c04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c08:	b25b      	sxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da03      	bge.n	8007c16 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007c0e:	2306      	movs	r3, #6
 8007c10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007c14:	e011      	b.n	8007c3a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	f023 0301 	bic.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bf14      	ite	ne
 8007c20:	2301      	movne	r3, #1
 8007c22:	2300      	moveq	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	f107 0314 	add.w	r3, r7, #20
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fb00 	bl	8006234 <chk_lock>
 8007c34:	4603      	mov	r3, r0
 8007c36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007c3a:	79fb      	ldrb	r3, [r7, #7]
 8007c3c:	f003 031c 	and.w	r3, r3, #28
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d07f      	beq.n	8007d44 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007c44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d017      	beq.n	8007c7c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007c4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d10e      	bne.n	8007c72 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007c54:	f7fe fb4a 	bl	80062ec <enq_lock>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d006      	beq.n	8007c6c <f_open+0xc8>
 8007c5e:	f107 0314 	add.w	r3, r7, #20
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff fa86 	bl	8007174 <dir_register>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	e000      	b.n	8007c6e <f_open+0xca>
 8007c6c:	2312      	movs	r3, #18
 8007c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	f043 0308 	orr.w	r3, r3, #8
 8007c78:	71fb      	strb	r3, [r7, #7]
 8007c7a:	e010      	b.n	8007c9e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007c7c:	7ebb      	ldrb	r3, [r7, #26]
 8007c7e:	f003 0311 	and.w	r3, r3, #17
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <f_open+0xea>
					res = FR_DENIED;
 8007c86:	2307      	movs	r3, #7
 8007c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007c8c:	e007      	b.n	8007c9e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <f_open+0xfa>
 8007c98:	2308      	movs	r3, #8
 8007c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d168      	bne.n	8007d78 <f_open+0x1d4>
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d063      	beq.n	8007d78 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007cb0:	f002 fbd0 	bl	800a454 <get_fattime>
 8007cb4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb8:	330e      	adds	r3, #14
 8007cba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe fa0f 	bl	80060e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc4:	3316      	adds	r3, #22
 8007cc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe fa09 	bl	80060e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd0:	330b      	adds	r3, #11
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cda:	4611      	mov	r1, r2
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7ff f958 	bl	8006f92 <ld_clust>
 8007ce2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff f970 	bl	8006fd0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf2:	331c      	adds	r3, #28
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe f9f2 	bl	80060e0 <st_dword>
					fs->wflag = 1;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d037      	beq.n	8007d78 <f_open+0x1d4>
						dw = fs->winsect;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007d0e:	f107 0314 	add.w	r3, r7, #20
 8007d12:	2200      	movs	r2, #0
 8007d14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fe fe83 	bl	8006a22 <remove_chain>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007d22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d126      	bne.n	8007d78 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fc30 	bl	8006594 <move_window>
 8007d34:	4603      	mov	r3, r0
 8007d36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d3e:	3a01      	subs	r2, #1
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	e019      	b.n	8007d78 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d115      	bne.n	8007d78 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007d4c:	7ebb      	ldrb	r3, [r7, #26]
 8007d4e:	f003 0310 	and.w	r3, r3, #16
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <f_open+0x1ba>
					res = FR_NO_FILE;
 8007d56:	2304      	movs	r3, #4
 8007d58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007d5c:	e00c      	b.n	8007d78 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d007      	beq.n	8007d78 <f_open+0x1d4>
 8007d68:	7ebb      	ldrb	r3, [r7, #26]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <f_open+0x1d4>
						res = FR_DENIED;
 8007d72:	2307      	movs	r3, #7
 8007d74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007d78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d128      	bne.n	8007dd2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d90:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	bf14      	ite	ne
 8007daa:	2301      	movne	r3, #1
 8007dac:	2300      	moveq	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	f107 0314 	add.w	r3, r7, #20
 8007db6:	4611      	mov	r1, r2
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe fab9 	bl	8006330 <inc_lock>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <f_open+0x22e>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007dd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f040 8095 	bne.w	8007f06 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007de0:	4611      	mov	r1, r2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff f8d5 	bl	8006f92 <ld_clust>
 8007de8:	4602      	mov	r2, r0
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df0:	331c      	adds	r3, #28
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe f936 	bl	8006064 <ld_dword>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	88da      	ldrh	r2, [r3, #6]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	79fa      	ldrb	r2, [r7, #7]
 8007e16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3330      	adds	r3, #48	; 0x30
 8007e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e32:	2100      	movs	r1, #0
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe f9a0 	bl	800617a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	f003 0320 	and.w	r3, r3, #32
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d060      	beq.n	8007f06 <f_open+0x362>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d05c      	beq.n	8007f06 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	68da      	ldr	r2, [r3, #12]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	895b      	ldrh	r3, [r3, #10]
 8007e58:	025b      	lsls	r3, r3, #9
 8007e5a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	657b      	str	r3, [r7, #84]	; 0x54
 8007e68:	e016      	b.n	8007e98 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fc4b 	bl	800670a <get_fat>
 8007e74:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d802      	bhi.n	8007e82 <f_open+0x2de>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e88:	d102      	bne.n	8007e90 <f_open+0x2ec>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	657b      	str	r3, [r7, #84]	; 0x54
 8007e98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d103      	bne.n	8007ea8 <f_open+0x304>
 8007ea0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d8e0      	bhi.n	8007e6a <f_open+0x2c6>
				}
				fp->clust = clst;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007eae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d127      	bne.n	8007f06 <f_open+0x362>
 8007eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d022      	beq.n	8007f06 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fe fc01 	bl	80066cc <clust2sect>
 8007eca:	6478      	str	r0, [r7, #68]	; 0x44
 8007ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d103      	bne.n	8007eda <f_open+0x336>
						res = FR_INT_ERR;
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007ed8:	e015      	b.n	8007f06 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007edc:	0a5a      	lsrs	r2, r3, #9
 8007ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	7858      	ldrb	r0, [r3, #1]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a1a      	ldr	r2, [r3, #32]
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	f7fe f83f 	bl	8005f78 <disk_read>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <f_open+0x362>
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007f06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <f_open+0x370>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007f14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3760      	adds	r7, #96	; 0x60
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08c      	sub	sp, #48	; 0x30
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2200      	movs	r2, #0
 8007f36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f107 0210 	add.w	r2, r7, #16
 8007f3e:	4611      	mov	r1, r2
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff fdb3 	bl	8007aac <validate>
 8007f46:	4603      	mov	r3, r0
 8007f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d107      	bne.n	8007f64 <f_write+0x44>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	7d5b      	ldrb	r3, [r3, #21]
 8007f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <f_write+0x4a>
 8007f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f68:	e14b      	b.n	8008202 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	7d1b      	ldrb	r3, [r3, #20]
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <f_write+0x5a>
 8007f76:	2307      	movs	r3, #7
 8007f78:	e143      	b.n	8008202 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	441a      	add	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	f080 812d 	bcs.w	80081e6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	43db      	mvns	r3, r3
 8007f92:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007f94:	e127      	b.n	80081e6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f040 80e3 	bne.w	800816a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	0a5b      	lsrs	r3, r3, #9
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	8952      	ldrh	r2, [r2, #10]
 8007fae:	3a01      	subs	r2, #1
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d143      	bne.n	8008042 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10c      	bne.n	8007fdc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d11a      	bne.n	8008004 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe fd8a 	bl	8006aec <create_chain>
 8007fd8:	62b8      	str	r0, [r7, #40]	; 0x28
 8007fda:	e013      	b.n	8008004 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d007      	beq.n	8007ff4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f7fe fe16 	bl	8006c1c <clmt_clust>
 8007ff0:	62b8      	str	r0, [r7, #40]	; 0x28
 8007ff2:	e007      	b.n	8008004 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f7fe fd75 	bl	8006aec <create_chain>
 8008002:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 80f2 	beq.w	80081f0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	2b01      	cmp	r3, #1
 8008010:	d104      	bne.n	800801c <f_write+0xfc>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2202      	movs	r2, #2
 8008016:	755a      	strb	r2, [r3, #21]
 8008018:	2302      	movs	r3, #2
 800801a:	e0f2      	b.n	8008202 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008022:	d104      	bne.n	800802e <f_write+0x10e>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	755a      	strb	r2, [r3, #21]
 800802a:	2301      	movs	r3, #1
 800802c:	e0e9      	b.n	8008202 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008032:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d102      	bne.n	8008042 <f_write+0x122>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008040:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	7d1b      	ldrb	r3, [r3, #20]
 8008046:	b25b      	sxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	da18      	bge.n	800807e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	7858      	ldrb	r0, [r3, #1]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6a1a      	ldr	r2, [r3, #32]
 800805a:	2301      	movs	r3, #1
 800805c:	f7fd ffac 	bl	8005fb8 <disk_write>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d004      	beq.n	8008070 <f_write+0x150>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	755a      	strb	r2, [r3, #21]
 800806c:	2301      	movs	r3, #1
 800806e:	e0c8      	b.n	8008202 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	7d1b      	ldrb	r3, [r3, #20]
 8008074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008078:	b2da      	uxtb	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	4619      	mov	r1, r3
 8008086:	4610      	mov	r0, r2
 8008088:	f7fe fb20 	bl	80066cc <clust2sect>
 800808c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d104      	bne.n	800809e <f_write+0x17e>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2202      	movs	r2, #2
 8008098:	755a      	strb	r2, [r3, #21]
 800809a:	2302      	movs	r3, #2
 800809c:	e0b1      	b.n	8008202 <f_write+0x2e2>
			sect += csect;
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	4413      	add	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	0a5b      	lsrs	r3, r3, #9
 80080aa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d03c      	beq.n	800812c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	4413      	add	r3, r2
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	8952      	ldrh	r2, [r2, #10]
 80080bc:	4293      	cmp	r3, r2
 80080be:	d905      	bls.n	80080cc <f_write+0x1ac>
					cc = fs->csize - csect;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	895b      	ldrh	r3, [r3, #10]
 80080c4:	461a      	mov	r2, r3
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	7858      	ldrb	r0, [r3, #1]
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	69f9      	ldr	r1, [r7, #28]
 80080d6:	f7fd ff6f 	bl	8005fb8 <disk_write>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <f_write+0x1ca>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2201      	movs	r2, #1
 80080e4:	755a      	strb	r2, [r3, #21]
 80080e6:	2301      	movs	r3, #1
 80080e8:	e08b      	b.n	8008202 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6a1a      	ldr	r2, [r3, #32]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	6a3a      	ldr	r2, [r7, #32]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d915      	bls.n	8008124 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1a      	ldr	r2, [r3, #32]
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	025b      	lsls	r3, r3, #9
 8008108:	69fa      	ldr	r2, [r7, #28]
 800810a:	4413      	add	r3, r2
 800810c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008110:	4619      	mov	r1, r3
 8008112:	f7fe f811 	bl	8006138 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	7d1b      	ldrb	r3, [r3, #20]
 800811a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800811e:	b2da      	uxtb	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	025b      	lsls	r3, r3, #9
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800812a:	e03f      	b.n	80081ac <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	429a      	cmp	r2, r3
 8008134:	d016      	beq.n	8008164 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	699a      	ldr	r2, [r3, #24]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800813e:	429a      	cmp	r2, r3
 8008140:	d210      	bcs.n	8008164 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	7858      	ldrb	r0, [r3, #1]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800814c:	2301      	movs	r3, #1
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	f7fd ff12 	bl	8005f78 <disk_read>
 8008154:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	755a      	strb	r2, [r3, #21]
 8008160:	2301      	movs	r3, #1
 8008162:	e04e      	b.n	8008202 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008172:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008176:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	429a      	cmp	r2, r3
 800817e:	d901      	bls.n	8008184 <f_write+0x264>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008192:	4413      	add	r3, r2
 8008194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008196:	69f9      	ldr	r1, [r7, #28]
 8008198:	4618      	mov	r0, r3
 800819a:	f7fd ffcd 	bl	8006138 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	7d1b      	ldrb	r3, [r3, #20]
 80081a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	4413      	add	r3, r2
 80081b2:	61fb      	str	r3, [r7, #28]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	699a      	ldr	r2, [r3, #24]
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	441a      	add	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	619a      	str	r2, [r3, #24]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	bf38      	it	cc
 80081cc:	461a      	movcc	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	60da      	str	r2, [r3, #12]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	441a      	add	r2, r3
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f47f aed4 	bne.w	8007f96 <f_write+0x76>
 80081ee:	e000      	b.n	80081f2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80081f0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	7d1b      	ldrb	r3, [r3, #20]
 80081f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3730      	adds	r7, #48	; 0x30
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b086      	sub	sp, #24
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f107 0208 	add.w	r2, r7, #8
 8008218:	4611      	mov	r1, r2
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff fc46 	bl	8007aac <validate>
 8008220:	4603      	mov	r3, r0
 8008222:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d168      	bne.n	80082fc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	7d1b      	ldrb	r3, [r3, #20]
 800822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d062      	beq.n	80082fc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	7d1b      	ldrb	r3, [r3, #20]
 800823a:	b25b      	sxtb	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	da15      	bge.n	800826c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	7858      	ldrb	r0, [r3, #1]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1a      	ldr	r2, [r3, #32]
 800824e:	2301      	movs	r3, #1
 8008250:	f7fd feb2 	bl	8005fb8 <disk_write>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <f_sync+0x54>
 800825a:	2301      	movs	r3, #1
 800825c:	e04f      	b.n	80082fe <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	7d1b      	ldrb	r3, [r3, #20]
 8008262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008266:	b2da      	uxtb	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800826c:	f002 f8f2 	bl	800a454 <get_fattime>
 8008270:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	4619      	mov	r1, r3
 800827a:	4610      	mov	r0, r2
 800827c:	f7fe f98a 	bl	8006594 <move_window>
 8008280:	4603      	mov	r3, r0
 8008282:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d138      	bne.n	80082fc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	330b      	adds	r3, #11
 8008294:	781a      	ldrb	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	330b      	adds	r3, #11
 800829a:	f042 0220 	orr.w	r2, r2, #32
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	461a      	mov	r2, r3
 80082ac:	68f9      	ldr	r1, [r7, #12]
 80082ae:	f7fe fe8f 	bl	8006fd0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f103 021c 	add.w	r2, r3, #28
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f7fd ff0e 	bl	80060e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3316      	adds	r3, #22
 80082c8:	6939      	ldr	r1, [r7, #16]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fd ff08 	bl	80060e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3312      	adds	r3, #18
 80082d4:	2100      	movs	r1, #0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fd fee7 	bl	80060aa <st_word>
					fs->wflag = 1;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2201      	movs	r2, #1
 80082e0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fe f983 	bl	80065f0 <sync_fs>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7d1b      	ldrb	r3, [r3, #20]
 80082f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff ff7b 	bl	800820a <f_sync>
 8008314:	4603      	mov	r3, r0
 8008316:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d118      	bne.n	8008350 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f107 0208 	add.w	r2, r7, #8
 8008324:	4611      	mov	r1, r2
 8008326:	4618      	mov	r0, r3
 8008328:	f7ff fbc0 	bl	8007aac <validate>
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10c      	bne.n	8008350 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe f886 	bl	800644c <dec_lock>
 8008340:	4603      	mov	r3, r0
 8008342:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d102      	bne.n	8008350 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b090      	sub	sp, #64	; 0x40
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008364:	f107 010c 	add.w	r1, r7, #12
 8008368:	1d3b      	adds	r3, r7, #4
 800836a:	2200      	movs	r2, #0
 800836c:	4618      	mov	r0, r3
 800836e:	f7ff f951 	bl	8007614 <find_volume>
 8008372:	4603      	mov	r3, r0
 8008374:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008378:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800837c:	2b00      	cmp	r3, #0
 800837e:	d11f      	bne.n	80083c0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	f107 030c 	add.w	r3, r7, #12
 8008386:	4611      	mov	r1, r2
 8008388:	4618      	mov	r0, r3
 800838a:	f7ff f837 	bl	80073fc <follow_path>
 800838e:	4603      	mov	r3, r0
 8008390:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008394:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008398:	2b00      	cmp	r3, #0
 800839a:	d111      	bne.n	80083c0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800839c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80083a0:	b25b      	sxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	da03      	bge.n	80083ae <f_stat+0x54>
				res = FR_INVALID_NAME;
 80083a6:	2306      	movs	r3, #6
 80083a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80083ac:	e008      	b.n	80083c0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <f_stat+0x66>
 80083b4:	f107 030c 	add.w	r3, r7, #12
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe ff2a 	bl	8007214 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80083c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3740      	adds	r7, #64	; 0x40
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b09e      	sub	sp, #120	; 0x78
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80083d8:	f107 010c 	add.w	r1, r7, #12
 80083dc:	1d3b      	adds	r3, r7, #4
 80083de:	2202      	movs	r2, #2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff f917 	bl	8007614 <find_volume>
 80083e6:	4603      	mov	r3, r0
 80083e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80083f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f040 808e 	bne.w	8008516 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fffa 	bl	80073fc <follow_path>
 8008408:	4603      	mov	r3, r0
 800840a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800840e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008412:	2b00      	cmp	r3, #0
 8008414:	d108      	bne.n	8008428 <f_unlink+0x5c>
 8008416:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800841a:	2102      	movs	r1, #2
 800841c:	4618      	mov	r0, r3
 800841e:	f7fd ff09 	bl	8006234 <chk_lock>
 8008422:	4603      	mov	r3, r0
 8008424:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008428:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800842c:	2b00      	cmp	r3, #0
 800842e:	d172      	bne.n	8008516 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008430:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008434:	b25b      	sxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	da03      	bge.n	8008442 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800843a:	2306      	movs	r3, #6
 800843c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008440:	e008      	b.n	8008454 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008442:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800844e:	2307      	movs	r3, #7
 8008450:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8008454:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008458:	2b00      	cmp	r3, #0
 800845a:	d134      	bne.n	80084c6 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008460:	4611      	mov	r1, r2
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe fd95 	bl	8006f92 <ld_clust>
 8008468:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800846a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800846e:	f003 0310 	and.w	r3, r3, #16
 8008472:	2b00      	cmp	r3, #0
 8008474:	d027      	beq.n	80084c6 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800847a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800847c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800847e:	f107 0310 	add.w	r3, r7, #16
 8008482:	2100      	movs	r1, #0
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe fbfd 	bl	8006c84 <dir_sdi>
 800848a:	4603      	mov	r3, r0
 800848c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8008490:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008494:	2b00      	cmp	r3, #0
 8008496:	d116      	bne.n	80084c6 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008498:	f107 0310 	add.w	r3, r7, #16
 800849c:	2100      	movs	r1, #0
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe fdb6 	bl	8007010 <dir_read>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80084aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d102      	bne.n	80084b8 <f_unlink+0xec>
 80084b2:	2307      	movs	r3, #7
 80084b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80084b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80084bc:	2b04      	cmp	r3, #4
 80084be:	d102      	bne.n	80084c6 <f_unlink+0xfa>
 80084c0:	2300      	movs	r3, #0
 80084c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80084c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d123      	bne.n	8008516 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80084ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fe80 	bl	80071d8 <dir_remove>
 80084d8:	4603      	mov	r3, r0
 80084da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80084de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10c      	bne.n	8008500 <f_unlink+0x134>
 80084e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d009      	beq.n	8008500 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80084ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80084f0:	2200      	movs	r2, #0
 80084f2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fa94 	bl	8006a22 <remove_chain>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008500:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008504:	2b00      	cmp	r3, #0
 8008506:	d106      	bne.n	8008516 <f_unlink+0x14a>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4618      	mov	r0, r3
 800850c:	f7fe f870 	bl	80065f0 <sync_fs>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008516:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800851a:	4618      	mov	r0, r3
 800851c:	3778      	adds	r7, #120	; 0x78
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b096      	sub	sp, #88	; 0x58
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800852a:	f107 0108 	add.w	r1, r7, #8
 800852e:	1d3b      	adds	r3, r7, #4
 8008530:	2202      	movs	r2, #2
 8008532:	4618      	mov	r0, r3
 8008534:	f7ff f86e 	bl	8007614 <find_volume>
 8008538:	4603      	mov	r3, r0
 800853a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8008542:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008546:	2b00      	cmp	r3, #0
 8008548:	f040 80ec 	bne.w	8008724 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	f107 030c 	add.w	r3, r7, #12
 8008552:	4611      	mov	r1, r2
 8008554:	4618      	mov	r0, r3
 8008556:	f7fe ff51 	bl	80073fc <follow_path>
 800855a:	4603      	mov	r3, r0
 800855c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8008560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008564:	2b00      	cmp	r3, #0
 8008566:	d102      	bne.n	800856e <f_mkdir+0x4c>
 8008568:	2308      	movs	r3, #8
 800856a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800856e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008572:	2b04      	cmp	r3, #4
 8008574:	f040 80d6 	bne.w	8008724 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8008578:	f107 030c 	add.w	r3, r7, #12
 800857c:	2100      	movs	r1, #0
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fab4 	bl	8006aec <create_chain>
 8008584:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	895b      	ldrh	r3, [r3, #10]
 800858a:	025b      	lsls	r3, r3, #9
 800858c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8008594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008596:	2b00      	cmp	r3, #0
 8008598:	d102      	bne.n	80085a0 <f_mkdir+0x7e>
 800859a:	2307      	movs	r3, #7
 800859c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80085a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d102      	bne.n	80085ac <f_mkdir+0x8a>
 80085a6:	2302      	movs	r3, #2
 80085a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80085ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b2:	d102      	bne.n	80085ba <f_mkdir+0x98>
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80085ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d106      	bne.n	80085d0 <f_mkdir+0xae>
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fd ffa1 	bl	800650c <sync_window>
 80085ca:	4603      	mov	r3, r0
 80085cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80085d0:	f001 ff40 	bl	800a454 <get_fattime>
 80085d4:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80085d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d16a      	bne.n	80086b4 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe f872 	bl	80066cc <clust2sect>
 80085e8:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	3330      	adds	r3, #48	; 0x30
 80085ee:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80085f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085f4:	2100      	movs	r1, #0
 80085f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80085f8:	f7fd fdbf 	bl	800617a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80085fc:	220b      	movs	r2, #11
 80085fe:	2120      	movs	r1, #32
 8008600:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008602:	f7fd fdba 	bl	800617a <mem_set>
					dir[DIR_Name] = '.';
 8008606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008608:	222e      	movs	r2, #46	; 0x2e
 800860a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800860c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860e:	330b      	adds	r3, #11
 8008610:	2210      	movs	r2, #16
 8008612:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8008614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008616:	3316      	adds	r3, #22
 8008618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800861a:	4618      	mov	r0, r3
 800861c:	f7fd fd60 	bl	80060e0 <st_dword>
					st_clust(fs, dir, dcl);
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008624:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe fcd2 	bl	8006fd0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800862c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862e:	3320      	adds	r3, #32
 8008630:	2220      	movs	r2, #32
 8008632:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008634:	4618      	mov	r0, r3
 8008636:	f7fd fd7f 	bl	8006138 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800863a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800863c:	3321      	adds	r3, #33	; 0x21
 800863e:	222e      	movs	r2, #46	; 0x2e
 8008640:	701a      	strb	r2, [r3, #0]
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2b03      	cmp	r3, #3
 800864c:	d106      	bne.n	800865c <f_mkdir+0x13a>
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008654:	429a      	cmp	r2, r3
 8008656:	d101      	bne.n	800865c <f_mkdir+0x13a>
 8008658:	2300      	movs	r3, #0
 800865a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800865c:	68b8      	ldr	r0, [r7, #8]
 800865e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008660:	3320      	adds	r3, #32
 8008662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008664:	4619      	mov	r1, r3
 8008666:	f7fe fcb3 	bl	8006fd0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	895b      	ldrh	r3, [r3, #10]
 800866e:	653b      	str	r3, [r7, #80]	; 0x50
 8008670:	e01b      	b.n	80086aa <f_mkdir+0x188>
					fs->winsect = dsc++;
 8008672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2201      	movs	r2, #1
 8008680:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	4618      	mov	r0, r3
 8008686:	f7fd ff41 	bl	800650c <sync_window>
 800868a:	4603      	mov	r3, r0
 800868c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8008690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10c      	bne.n	80086b2 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8008698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800869c:	2100      	movs	r1, #0
 800869e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80086a0:	f7fd fd6b 	bl	800617a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80086a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a6:	3b01      	subs	r3, #1
 80086a8:	653b      	str	r3, [r7, #80]	; 0x50
 80086aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1e0      	bne.n	8008672 <f_mkdir+0x150>
 80086b0:	e000      	b.n	80086b4 <f_mkdir+0x192>
					if (res != FR_OK) break;
 80086b2:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80086b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d107      	bne.n	80086cc <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80086bc:	f107 030c 	add.w	r3, r7, #12
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fe fd57 	bl	8007174 <dir_register>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80086cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d120      	bne.n	8008716 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80086d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d6:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80086d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086da:	3316      	adds	r3, #22
 80086dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fd fcfe 	bl	80060e0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe fc70 	bl	8006fd0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80086f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f2:	330b      	adds	r3, #11
 80086f4:	2210      	movs	r2, #16
 80086f6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2201      	movs	r2, #1
 80086fc:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80086fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10e      	bne.n	8008724 <f_mkdir+0x202>
					res = sync_fs(fs);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	4618      	mov	r0, r3
 800870a:	f7fd ff71 	bl	80065f0 <sync_fs>
 800870e:	4603      	mov	r3, r0
 8008710:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008714:	e006      	b.n	8008724 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8008716:	f107 030c 	add.w	r3, r7, #12
 800871a:	2200      	movs	r2, #0
 800871c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe f97f 	bl	8006a22 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8008728:	4618      	mov	r0, r3
 800872a:	3758      	adds	r7, #88	; 0x58
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	2b0a      	cmp	r3, #10
 8008740:	d103      	bne.n	800874a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008742:	210d      	movs	r1, #13
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff fff3 	bl	8008730 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	db25      	blt.n	80087a2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	60fa      	str	r2, [r7, #12]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	4413      	add	r3, r2
 8008760:	78fa      	ldrb	r2, [r7, #3]
 8008762:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b3c      	cmp	r3, #60	; 0x3c
 8008768:	dd12      	ble.n	8008790 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f103 010c 	add.w	r1, r3, #12
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	f107 0308 	add.w	r3, r7, #8
 800877a:	f7ff fbd1 	bl	8007f20 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	429a      	cmp	r2, r3
 8008784:	d101      	bne.n	800878a <putc_bfd+0x5a>
 8008786:	2300      	movs	r3, #0
 8008788:	e001      	b.n	800878e <putc_bfd+0x5e>
 800878a:	f04f 33ff 	mov.w	r3, #4294967295
 800878e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	609a      	str	r2, [r3, #8]
 80087a0:	e000      	b.n	80087a4 <putc_bfd+0x74>
	if (i < 0) return;
 80087a2:	bf00      	nop
}
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	db17      	blt.n	80087ea <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6818      	ldr	r0, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f103 010c 	add.w	r1, r3, #12
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	461a      	mov	r2, r3
 80087ca:	f107 030c 	add.w	r3, r7, #12
 80087ce:	f7ff fba7 	bl	8007f20 <f_write>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d108      	bne.n	80087ea <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	461a      	mov	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d102      	bne.n	80087ea <putc_flush+0x40>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	e001      	b.n	80087ee <putc_flush+0x44>
	return EOF;
 80087ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	605a      	str	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	609a      	str	r2, [r3, #8]
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008820:	b40e      	push	{r1, r2, r3}
 8008822:	b580      	push	{r7, lr}
 8008824:	b0a7      	sub	sp, #156	; 0x9c
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800882a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff ffe0 	bl	80087f6 <putc_init>

	va_start(arp, fmt);
 8008836:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800883a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800883c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008840:	1c5a      	adds	r2, r3, #1
 8008842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800884c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 81f4 	beq.w	8008c3e <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8008856:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800885a:	2b25      	cmp	r3, #37	; 0x25
 800885c:	d008      	beq.n	8008870 <f_printf+0x50>
			putc_bfd(&pb, c);
 800885e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008866:	4611      	mov	r1, r2
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff ff61 	bl	8008730 <putc_bfd>
			continue;
 800886e:	e1e5      	b.n	8008c3c <f_printf+0x41c>
		}
		w = f = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008876:	2300      	movs	r3, #0
 8008878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800887c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008880:	1c5a      	adds	r2, r3, #1
 8008882:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800888c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008890:	2b30      	cmp	r3, #48	; 0x30
 8008892:	d10b      	bne.n	80088ac <f_printf+0x8c>
			f = 1; c = *fmt++;
 8008894:	2301      	movs	r3, #1
 8008896:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800889a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80088aa:	e024      	b.n	80088f6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80088ac:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80088b0:	2b2d      	cmp	r3, #45	; 0x2d
 80088b2:	d120      	bne.n	80088f6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80088b4:	2302      	movs	r3, #2
 80088b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80088ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80088ca:	e014      	b.n	80088f6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80088cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	461a      	mov	r2, r3
 80088da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80088de:	4413      	add	r3, r2
 80088e0:	3b30      	subs	r3, #48	; 0x30
 80088e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80088e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80088f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80088fa:	2b2f      	cmp	r3, #47	; 0x2f
 80088fc:	d903      	bls.n	8008906 <f_printf+0xe6>
 80088fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008902:	2b39      	cmp	r3, #57	; 0x39
 8008904:	d9e2      	bls.n	80088cc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8008906:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800890a:	2b6c      	cmp	r3, #108	; 0x6c
 800890c:	d003      	beq.n	8008916 <f_printf+0xf6>
 800890e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008912:	2b4c      	cmp	r3, #76	; 0x4c
 8008914:	d10d      	bne.n	8008932 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8008916:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800891a:	f043 0304 	orr.w	r3, r3, #4
 800891e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8008932:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8183 	beq.w	8008c42 <f_printf+0x422>
		d = c;
 800893c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008940:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8008944:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008948:	2b60      	cmp	r3, #96	; 0x60
 800894a:	d908      	bls.n	800895e <f_printf+0x13e>
 800894c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008950:	2b7a      	cmp	r3, #122	; 0x7a
 8008952:	d804      	bhi.n	800895e <f_printf+0x13e>
 8008954:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008958:	3b20      	subs	r3, #32
 800895a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800895e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008962:	3b42      	subs	r3, #66	; 0x42
 8008964:	2b16      	cmp	r3, #22
 8008966:	f200 8098 	bhi.w	8008a9a <f_printf+0x27a>
 800896a:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <f_printf+0x150>)
 800896c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008970:	08008a7b 	.word	0x08008a7b
 8008974:	08008a63 	.word	0x08008a63
 8008978:	08008a8b 	.word	0x08008a8b
 800897c:	08008a9b 	.word	0x08008a9b
 8008980:	08008a9b 	.word	0x08008a9b
 8008984:	08008a9b 	.word	0x08008a9b
 8008988:	08008a9b 	.word	0x08008a9b
 800898c:	08008a9b 	.word	0x08008a9b
 8008990:	08008a9b 	.word	0x08008a9b
 8008994:	08008a9b 	.word	0x08008a9b
 8008998:	08008a9b 	.word	0x08008a9b
 800899c:	08008a9b 	.word	0x08008a9b
 80089a0:	08008a9b 	.word	0x08008a9b
 80089a4:	08008a83 	.word	0x08008a83
 80089a8:	08008a9b 	.word	0x08008a9b
 80089ac:	08008a9b 	.word	0x08008a9b
 80089b0:	08008a9b 	.word	0x08008a9b
 80089b4:	080089cd 	.word	0x080089cd
 80089b8:	08008a9b 	.word	0x08008a9b
 80089bc:	08008a8b 	.word	0x08008a8b
 80089c0:	08008a9b 	.word	0x08008a9b
 80089c4:	08008a9b 	.word	0x08008a9b
 80089c8:	08008a93 	.word	0x08008a93
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80089cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ce:	1d1a      	adds	r2, r3, #4
 80089d0:	67ba      	str	r2, [r7, #120]	; 0x78
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089dc:	e004      	b.n	80089e8 <f_printf+0x1c8>
 80089de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089e2:	3301      	adds	r3, #1
 80089e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80089ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089ee:	4413      	add	r3, r2
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1f3      	bne.n	80089de <f_printf+0x1be>
			if (!(f & 2)) {
 80089f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d11a      	bne.n	8008a38 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008a02:	e005      	b.n	8008a10 <f_printf+0x1f0>
 8008a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a08:	2120      	movs	r1, #32
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff fe90 	bl	8008730 <putc_bfd>
 8008a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d8f0      	bhi.n	8008a04 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008a22:	e009      	b.n	8008a38 <f_printf+0x218>
 8008a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a2a:	781a      	ldrb	r2, [r3, #0]
 8008a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a30:	4611      	mov	r1, r2
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fe7c 	bl	8008730 <putc_bfd>
 8008a38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f1      	bne.n	8008a24 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8008a40:	e005      	b.n	8008a4e <f_printf+0x22e>
 8008a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a46:	2120      	movs	r1, #32
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff fe71 	bl	8008730 <putc_bfd>
 8008a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a58:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d8f0      	bhi.n	8008a42 <f_printf+0x222>
			continue;
 8008a60:	e0ec      	b.n	8008c3c <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a64:	1d1a      	adds	r2, r3, #4
 8008a66:	67ba      	str	r2, [r7, #120]	; 0x78
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a70:	4611      	mov	r1, r2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff fe5c 	bl	8008730 <putc_bfd>
 8008a78:	e0e0      	b.n	8008c3c <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008a80:	e014      	b.n	8008aac <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8008a82:	2308      	movs	r3, #8
 8008a84:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008a88:	e010      	b.n	8008aac <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8008a8a:	230a      	movs	r3, #10
 8008a8c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008a90:	e00c      	b.n	8008aac <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8008a92:	2310      	movs	r3, #16
 8008a94:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008a98:	e008      	b.n	8008aac <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8008a9a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff fe43 	bl	8008730 <putc_bfd>
 8008aaa:	e0c7      	b.n	8008c3c <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008aac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008ab0:	f003 0304 	and.w	r3, r3, #4
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d004      	beq.n	8008ac2 <f_printf+0x2a2>
 8008ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aba:	1d1a      	adds	r2, r3, #4
 8008abc:	67ba      	str	r2, [r7, #120]	; 0x78
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	e00c      	b.n	8008adc <f_printf+0x2bc>
 8008ac2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008ac6:	2b44      	cmp	r3, #68	; 0x44
 8008ac8:	d104      	bne.n	8008ad4 <f_printf+0x2b4>
 8008aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008acc:	1d1a      	adds	r2, r3, #4
 8008ace:	67ba      	str	r2, [r7, #120]	; 0x78
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	e003      	b.n	8008adc <f_printf+0x2bc>
 8008ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad6:	1d1a      	adds	r2, r3, #4
 8008ad8:	67ba      	str	r2, [r7, #120]	; 0x78
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8008ae0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008ae4:	2b44      	cmp	r3, #68	; 0x44
 8008ae6:	d10e      	bne.n	8008b06 <f_printf+0x2e6>
 8008ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	da0a      	bge.n	8008b06 <f_printf+0x2e6>
			v = 0 - v;
 8008af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008af4:	425b      	negs	r3, r3
 8008af6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8008afa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008afe:	f043 0308 	orr.w	r3, r3, #8
 8008b02:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8008b0c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8008b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b14:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b18:	fb02 f201 	mul.w	r2, r2, r1
 8008b1c:	1a9b      	subs	r3, r3, r2
 8008b1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8008b22:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8008b26:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008b32:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008b36:	2b09      	cmp	r3, #9
 8008b38:	d90b      	bls.n	8008b52 <f_printf+0x332>
 8008b3a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008b3e:	2b78      	cmp	r3, #120	; 0x78
 8008b40:	d101      	bne.n	8008b46 <f_printf+0x326>
 8008b42:	2227      	movs	r2, #39	; 0x27
 8008b44:	e000      	b.n	8008b48 <f_printf+0x328>
 8008b46:	2207      	movs	r2, #7
 8008b48:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8008b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008b5c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008b60:	3230      	adds	r2, #48	; 0x30
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008b68:	440b      	add	r3, r1
 8008b6a:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8008b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <f_printf+0x35e>
 8008b76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b7a:	2b1f      	cmp	r3, #31
 8008b7c:	d9c6      	bls.n	8008b0c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8008b7e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008b82:	f003 0308 	and.w	r3, r3, #8
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <f_printf+0x380>
 8008b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008b94:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008b98:	4413      	add	r3, r2
 8008b9a:	222d      	movs	r2, #45	; 0x2d
 8008b9c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8008ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008ba8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <f_printf+0x398>
 8008bb4:	2330      	movs	r3, #48	; 0x30
 8008bb6:	e000      	b.n	8008bba <f_printf+0x39a>
 8008bb8:	2320      	movs	r3, #32
 8008bba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8008bbe:	e007      	b.n	8008bd0 <f_printf+0x3b0>
 8008bc0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff fdb0 	bl	8008730 <putc_bfd>
 8008bd0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d108      	bne.n	8008bee <f_printf+0x3ce>
 8008bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008be6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d8e8      	bhi.n	8008bc0 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8008bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008bf8:	f107 020c 	add.w	r2, r7, #12
 8008bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c00:	4413      	add	r3, r2
 8008c02:	781a      	ldrb	r2, [r3, #0]
 8008c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff fd90 	bl	8008730 <putc_bfd>
		} while (i);
 8008c10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1ea      	bne.n	8008bee <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8008c18:	e007      	b.n	8008c2a <f_printf+0x40a>
 8008c1a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c22:	4611      	mov	r1, r2
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7ff fd83 	bl	8008730 <putc_bfd>
 8008c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008c34:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d8ee      	bhi.n	8008c1a <f_printf+0x3fa>
		c = *fmt++;
 8008c3c:	e5fe      	b.n	800883c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8008c3e:	bf00      	nop
 8008c40:	e000      	b.n	8008c44 <f_printf+0x424>
		if (!c) break;
 8008c42:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8008c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff fdae 	bl	80087aa <putc_flush>
 8008c4e:	4603      	mov	r3, r0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	379c      	adds	r7, #156	; 0x9c
 8008c54:	46bd      	mov	sp, r7
 8008c56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c5a:	b003      	add	sp, #12
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop

08008c60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008c76:	4b1f      	ldr	r3, [pc, #124]	; (8008cf4 <FATFS_LinkDriverEx+0x94>)
 8008c78:	7a5b      	ldrb	r3, [r3, #9]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d131      	bne.n	8008ce4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008c80:	4b1c      	ldr	r3, [pc, #112]	; (8008cf4 <FATFS_LinkDriverEx+0x94>)
 8008c82:	7a5b      	ldrb	r3, [r3, #9]
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	4b1a      	ldr	r3, [pc, #104]	; (8008cf4 <FATFS_LinkDriverEx+0x94>)
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008c8e:	4b19      	ldr	r3, [pc, #100]	; (8008cf4 <FATFS_LinkDriverEx+0x94>)
 8008c90:	7a5b      	ldrb	r3, [r3, #9]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	4a17      	ldr	r2, [pc, #92]	; (8008cf4 <FATFS_LinkDriverEx+0x94>)
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008c9e:	4b15      	ldr	r3, [pc, #84]	; (8008cf4 <FATFS_LinkDriverEx+0x94>)
 8008ca0:	7a5b      	ldrb	r3, [r3, #9]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4b13      	ldr	r3, [pc, #76]	; (8008cf4 <FATFS_LinkDriverEx+0x94>)
 8008ca8:	4413      	add	r3, r2
 8008caa:	79fa      	ldrb	r2, [r7, #7]
 8008cac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008cae:	4b11      	ldr	r3, [pc, #68]	; (8008cf4 <FATFS_LinkDriverEx+0x94>)
 8008cb0:	7a5b      	ldrb	r3, [r3, #9]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	b2d1      	uxtb	r1, r2
 8008cb8:	4a0e      	ldr	r2, [pc, #56]	; (8008cf4 <FATFS_LinkDriverEx+0x94>)
 8008cba:	7251      	strb	r1, [r2, #9]
 8008cbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008cbe:	7dbb      	ldrb	r3, [r7, #22]
 8008cc0:	3330      	adds	r3, #48	; 0x30
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	223a      	movs	r2, #58	; 0x3a
 8008cce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	3302      	adds	r3, #2
 8008cd4:	222f      	movs	r2, #47	; 0x2f
 8008cd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	3303      	adds	r3, #3
 8008cdc:	2200      	movs	r2, #0
 8008cde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	200000b8 	.word	0x200000b8

08008cf8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d02:	2200      	movs	r2, #0
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff ffaa 	bl	8008c60 <FATFS_LinkDriverEx>
 8008d0c:	4603      	mov	r3, r0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
	...

08008d18 <_Z8DWT_Initv>:
#include "stm32f4xx_hal.h"

#ifndef INC_DWT_DELAY_H_
#define INC_DWT_DELAY_H_

void DWT_Init(void) {
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008d1c:	4b09      	ldr	r3, [pc, #36]	; (8008d44 <_Z8DWT_Initv+0x2c>)
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	4a08      	ldr	r2, [pc, #32]	; (8008d44 <_Z8DWT_Initv+0x2c>)
 8008d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d26:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8008d28:	4b07      	ldr	r3, [pc, #28]	; (8008d48 <_Z8DWT_Initv+0x30>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8008d2e:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <_Z8DWT_Initv+0x30>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a05      	ldr	r2, [pc, #20]	; (8008d48 <_Z8DWT_Initv+0x30>)
 8008d34:	f043 0301 	orr.w	r3, r3, #1
 8008d38:	6013      	str	r3, [r2, #0]

}
 8008d3a:	bf00      	nop
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	e000edf0 	.word	0xe000edf0
 8008d48:	e0001000 	.word	0xe0001000

08008d4c <_Z9DWT_Delaym>:

void DWT_Delay(uint32_t microseconds) {
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
    uint32_t startTick  = DWT->CYCCNT;
 8008d54:	4b0f      	ldr	r3, [pc, #60]	; (8008d94 <_Z9DWT_Delaym+0x48>)
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 8008d5a:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <_Z9DWT_Delaym+0x4c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	fb02 f303 	mul.w	r3, r2, r3
 8008d64:	4a0d      	ldr	r2, [pc, #52]	; (8008d9c <_Z9DWT_Delaym+0x50>)
 8008d66:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6a:	0c9b      	lsrs	r3, r3, #18
 8008d6c:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8008d6e:	4b09      	ldr	r3, [pc, #36]	; (8008d94 <_Z9DWT_Delaym+0x48>)
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	bf8c      	ite	hi
 8008d7c:	2301      	movhi	r3, #1
 8008d7e:	2300      	movls	r3, #0
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d000      	beq.n	8008d88 <_Z9DWT_Delaym+0x3c>
 8008d86:	e7f2      	b.n	8008d6e <_Z9DWT_Delaym+0x22>
}
 8008d88:	bf00      	nop
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	e0001000 	.word	0xe0001000
 8008d98:	20000008 	.word	0x20000008
 8008d9c:	431bde83 	.word	0x431bde83

08008da0 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE>:
 */

#include "LTC6811.h"
#include "dwt_delay.h"

LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts)
 8008da0:	b590      	push	{r4, r7, lr}
 8008da2:	b093      	sub	sp, #76	; 0x4c
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	4611      	mov	r1, r2
 8008dac:	461a      	mov	r2, r3
 8008dae:	460b      	mov	r3, r1
 8008db0:	71fb      	strb	r3, [r7, #7]
 8008db2:	4613      	mov	r3, r2
 8008db4:	71bb      	strb	r3, [r7, #6]
: hspi{ hspi } {
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	711a      	strb	r2, [r3, #4]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	1d9a      	adds	r2, r3, #6
 8008dc6:	4bbb      	ldr	r3, [pc, #748]	; (80090b4 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x314>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	f107 0314 	add.w	r3, r7, #20
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f000 fdd1 	bl	800997a <_ZN7LTC681113RegisterGroupIhEC1EOSt5arrayIhLj4EE>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f103 026a 	add.w	r2, r3, #106	; 0x6a
 8008dde:	4bb6      	ldr	r3, [pc, #728]	; (80090b8 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x318>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	61bb      	str	r3, [r7, #24]
 8008de4:	f107 0318 	add.w	r3, r7, #24
 8008de8:	4619      	mov	r1, r3
 8008dea:	4610      	mov	r0, r2
 8008dec:	f000 fdc5 	bl	800997a <_ZN7LTC681113RegisterGroupIhEC1EOSt5arrayIhLj4EE>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f103 02ce 	add.w	r2, r3, #206	; 0xce
 8008df6:	4bb1      	ldr	r3, [pc, #708]	; (80090bc <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x31c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	61fb      	str	r3, [r7, #28]
 8008dfc:	f107 031c 	add.w	r3, r7, #28
 8008e00:	4619      	mov	r1, r3
 8008e02:	4610      	mov	r0, r2
 8008e04:	f000 fdcc 	bl	80099a0 <_ZN7LTC681113RegisterGroupItEC1EOSt5arrayIhLj4EE>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 7299 	add.w	r2, r3, #306	; 0x132
 8008e0e:	4bac      	ldr	r3, [pc, #688]	; (80090c0 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x320>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	623b      	str	r3, [r7, #32]
 8008e14:	f107 0320 	add.w	r3, r7, #32
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	f000 fdc0 	bl	80099a0 <_ZN7LTC681113RegisterGroupItEC1EOSt5arrayIhLj4EE>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f503 72cb 	add.w	r2, r3, #406	; 0x196
 8008e26:	4ba7      	ldr	r3, [pc, #668]	; (80090c4 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x324>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e30:	4619      	mov	r1, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	f000 fdb4 	bl	80099a0 <_ZN7LTC681113RegisterGroupItEC1EOSt5arrayIhLj4EE>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8008e3e:	4ba2      	ldr	r3, [pc, #648]	; (80090c8 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x328>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	f000 fda8 	bl	80099a0 <_ZN7LTC681113RegisterGroupItEC1EOSt5arrayIhLj4EE>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f203 225e 	addw	r2, r3, #606	; 0x25e
 8008e56:	4b9d      	ldr	r3, [pc, #628]	; (80090cc <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x32c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e60:	4619      	mov	r1, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	f000 fdaf 	bl	80099c6 <_ZN7LTC681113RegisterGroupIsEC1EOSt5arrayIhLj4EE>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f203 22c2 	addw	r2, r3, #706	; 0x2c2
 8008e6e:	4b98      	ldr	r3, [pc, #608]	; (80090d0 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x330>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	633b      	str	r3, [r7, #48]	; 0x30
 8008e74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f000 fda3 	bl	80099c6 <_ZN7LTC681113RegisterGroupIsEC1EOSt5arrayIhLj4EE>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f203 3226 	addw	r2, r3, #806	; 0x326
 8008e86:	4b93      	ldr	r3, [pc, #588]	; (80090d4 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x334>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008e90:	4619      	mov	r1, r3
 8008e92:	4610      	mov	r0, r2
 8008e94:	f000 fd71 	bl	800997a <_ZN7LTC681113RegisterGroupIhEC1EOSt5arrayIhLj4EE>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f203 328a 	addw	r2, r3, #906	; 0x38a
 8008e9e:	4b8e      	ldr	r3, [pc, #568]	; (80090d8 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x338>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4610      	mov	r0, r2
 8008eac:	f000 fd65 	bl	800997a <_ZN7LTC681113RegisterGroupIhEC1EOSt5arrayIhLj4EE>
    uint8_t md_bits = (mode & 0x02) >> 1;
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	105b      	asrs	r3, r3, #1
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint16_t PEC{ 0 };
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

    ADCV[0]   = 0x02 | md_bits;
 8008ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ec8:	f043 0302 	orr.w	r3, r3, #2
 8008ecc:	b2dc      	uxtb	r4, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f203 33ee 	addw	r3, r3, #1006	; 0x3ee
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fd88 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 8008edc:	4603      	mov	r3, r0
 8008ede:	4622      	mov	r2, r4
 8008ee0:	701a      	strb	r2, [r3, #0]
    ADAX[0]   = 0x04 | md_bits;
 8008ee2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ee6:	f043 0304 	orr.w	r3, r3, #4
 8008eea:	b2dc      	uxtb	r4, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 fd79 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 8008efa:	4603      	mov	r3, r0
 8008efc:	4622      	mov	r2, r4
 8008efe:	701a      	strb	r2, [r3, #0]
    ADSTAT[0] = 0x04 | md_bits;
 8008f00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f04:	f043 0304 	orr.w	r3, r3, #4
 8008f08:	b2dc      	uxtb	r4, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f203 33f6 	addw	r3, r3, #1014	; 0x3f6
 8008f10:	2100      	movs	r1, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 fd6a 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	4622      	mov	r2, r4
 8008f1c:	701a      	strb	r2, [r3, #0]

    md_bits   = (mode & 0x01) << 7;
 8008f1e:	79fb      	ldrb	r3, [r7, #7]
 8008f20:	01db      	lsls	r3, r3, #7
 8008f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    ADCV[1]   = md_bits | 0x60 | dcp << 4 | cell;
 8008f26:	79bb      	ldrb	r3, [r7, #6]
 8008f28:	011b      	lsls	r3, r3, #4
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f30:	4313      	orrs	r3, r2
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f40:	b2dc      	uxtb	r4, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f203 33ee 	addw	r3, r3, #1006	; 0x3ee
 8008f48:	2101      	movs	r1, #1
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fd4e 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 8008f50:	4603      	mov	r3, r0
 8008f52:	4622      	mov	r2, r4
 8008f54:	701a      	strb	r2, [r3, #0]
    ADAX[1]   = md_bits | 0x60 | aux;
 8008f56:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008f5a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f66:	b2dc      	uxtb	r4, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 8008f6e:	2101      	movs	r1, #1
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 fd3b 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 8008f76:	4603      	mov	r3, r0
 8008f78:	4622      	mov	r2, r4
 8008f7a:	701a      	strb	r2, [r3, #0]
    ADSTAT[1] = md_bits | 0x68 | sts;
 8008f7c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008f80:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8008f84:	4313      	orrs	r3, r2
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8008f8c:	b2dc      	uxtb	r4, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f203 33f6 	addw	r3, r3, #1014	; 0x3f6
 8008f94:	2101      	movs	r1, #1
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fd28 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	701a      	strb	r2, [r3, #0]

    PEC = PEC15Calc(ADCV, 2);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f203 33ee 	addw	r3, r3, #1006	; 0x3ee
 8008fa8:	2102      	movs	r1, #2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fd2e 	bl	8009a0c <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    ADCV[2] = static_cast<uint8_t>(PEC >> 8);
 8008fb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008fba:	121b      	asrs	r3, r3, #8
 8008fbc:	b2dc      	uxtb	r4, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f203 33ee 	addw	r3, r3, #1006	; 0x3ee
 8008fc4:	2102      	movs	r1, #2
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fd10 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	4622      	mov	r2, r4
 8008fd0:	701a      	strb	r2, [r3, #0]
    ADCV[3] = static_cast<uint8_t>(PEC);
 8008fd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008fd6:	b2dc      	uxtb	r4, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f203 33ee 	addw	r3, r3, #1006	; 0x3ee
 8008fde:	2103      	movs	r1, #3
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fd03 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	4622      	mov	r2, r4
 8008fea:	701a      	strb	r2, [r3, #0]

    PEC = PEC15Calc(ADAX, 2);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 8008ff2:	2102      	movs	r1, #2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fd09 	bl	8009a0c <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    ADAX[2] = static_cast<uint8_t>(PEC >> 8);
 8009000:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009004:	121b      	asrs	r3, r3, #8
 8009006:	b2dc      	uxtb	r4, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 800900e:	2102      	movs	r1, #2
 8009010:	4618      	mov	r0, r3
 8009012:	f000 fceb 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 8009016:	4603      	mov	r3, r0
 8009018:	4622      	mov	r2, r4
 800901a:	701a      	strb	r2, [r3, #0]
    ADAX[3] = static_cast<uint8_t>(PEC);
 800901c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009020:	b2dc      	uxtb	r4, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 8009028:	2103      	movs	r1, #3
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fcde 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 8009030:	4603      	mov	r3, r0
 8009032:	4622      	mov	r2, r4
 8009034:	701a      	strb	r2, [r3, #0]

    PEC = PEC15Calc(ADSTAT, 2);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f203 33f6 	addw	r3, r3, #1014	; 0x3f6
 800903c:	2102      	movs	r1, #2
 800903e:	4618      	mov	r0, r3
 8009040:	f000 fce4 	bl	8009a0c <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>
 8009044:	4603      	mov	r3, r0
 8009046:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    ADSTAT[2] = static_cast<uint8_t>(PEC >> 8);
 800904a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800904e:	121b      	asrs	r3, r3, #8
 8009050:	b2dc      	uxtb	r4, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f203 33f6 	addw	r3, r3, #1014	; 0x3f6
 8009058:	2102      	movs	r1, #2
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fcc6 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 8009060:	4603      	mov	r3, r0
 8009062:	4622      	mov	r2, r4
 8009064:	701a      	strb	r2, [r3, #0]
    ADSTAT[3] = static_cast<uint8_t>(PEC);
 8009066:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800906a:	b2dc      	uxtb	r4, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f203 33f6 	addw	r3, r3, #1014	; 0x3f6
 8009072:	2103      	movs	r1, #3
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fcb9 	bl	80099ec <_ZNSt5arrayIhLj4EEixEj>
 800907a:	4603      	mov	r3, r0
 800907c:	4622      	mov	r2, r4
 800907e:	701a      	strb	r2, [r3, #0]

    slave_cfg_tx.ICDaisyChain.fill({ 0xFE, 0, 0, 0, 0, 0 });
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f103 000a 	add.w	r0, r3, #10
 8009086:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	605a      	str	r2, [r3, #4]
 8009090:	23fe      	movs	r3, #254	; 0xfe
 8009092:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8009096:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800909a:	4619      	mov	r1, r3
 800909c:	f000 fd05 	bl	8009aaa <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE4fillERKS2_>

    DWT_Init();
 80090a0:	f7ff fe3a 	bl	8008d18 <_Z8DWT_Initv>
    WakeFromSleep(); // NOTE: Takes 2.2s to fall asleep so if this has to be called after this, we have problems
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 f819 	bl	80090dc <_ZN7LTC681113WakeFromSleepEv>
}
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	4618      	mov	r0, r3
 80090ae:	374c      	adds	r7, #76	; 0x4c
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd90      	pop	{r4, r7, pc}
 80090b4:	0800d7b8 	.word	0x0800d7b8
 80090b8:	0800d7bc 	.word	0x0800d7bc
 80090bc:	0800d7c0 	.word	0x0800d7c0
 80090c0:	0800d7c4 	.word	0x0800d7c4
 80090c4:	0800d7c8 	.word	0x0800d7c8
 80090c8:	0800d7cc 	.word	0x0800d7cc
 80090cc:	0800d7d0 	.word	0x0800d7d0
 80090d0:	0800d7d4 	.word	0x0800d7d4
 80090d4:	0800d7d8 	.word	0x0800d7d8
 80090d8:	0800d7dc 	.word	0x0800d7dc

080090dc <_ZN7LTC681113WakeFromSleepEv>:

void LTC6811::WakeFromSleep(void) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 80090e4:	2300      	movs	r3, #0
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b0b      	cmp	r3, #11
 80090ec:	d814      	bhi.n	8009118 <_ZN7LTC681113WakeFromSleepEv+0x3c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80090ee:	2200      	movs	r2, #0
 80090f0:	2120      	movs	r1, #32
 80090f2:	480b      	ldr	r0, [pc, #44]	; (8009120 <_ZN7LTC681113WakeFromSleepEv+0x44>)
 80090f4:	f7f8 fd38 	bl	8001b68 <HAL_GPIO_WritePin>
        DWT_Delay(T_WAKE_MAX); // Guarantees the LTC6811 will be in standby
 80090f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80090fc:	f7ff fe26 	bl	8008d4c <_Z9DWT_Delaym>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009100:	2201      	movs	r2, #1
 8009102:	2120      	movs	r1, #32
 8009104:	4806      	ldr	r0, [pc, #24]	; (8009120 <_ZN7LTC681113WakeFromSleepEv+0x44>)
 8009106:	f7f8 fd2f 	bl	8001b68 <HAL_GPIO_WritePin>
        DWT_Delay(10);
 800910a:	200a      	movs	r0, #10
 800910c:	f7ff fe1e 	bl	8008d4c <_Z9DWT_Delaym>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	3301      	adds	r3, #1
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	e7e7      	b.n	80090e8 <_ZN7LTC681113WakeFromSleepEv+0xc>
    }
}
 8009118:	bf00      	nop
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	40020000 	.word	0x40020000

08009124 <_ZN7LTC681112WakeFromIdleEv>:

void LTC6811::WakeFromIdle(void) {
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
    uint8_t const data = 0xFF;
 800912c:	23ff      	movs	r3, #255	; 0xff
 800912e:	72fb      	strb	r3, [r7, #11]

    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b0b      	cmp	r3, #11
 8009138:	d816      	bhi.n	8009168 <_ZN7LTC681112WakeFromIdleEv+0x44>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800913a:	2200      	movs	r2, #0
 800913c:	2120      	movs	r1, #32
 800913e:	480c      	ldr	r0, [pc, #48]	; (8009170 <_ZN7LTC681112WakeFromIdleEv+0x4c>)
 8009140:	f7f8 fd12 	bl	8001b68 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &data, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6818      	ldr	r0, [r3, #0]
 8009148:	f107 010b 	add.w	r1, r7, #11
 800914c:	f04f 33ff 	mov.w	r3, #4294967295
 8009150:	2201      	movs	r2, #1
 8009152:	f7fa fed5 	bl	8003f00 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009156:	2201      	movs	r2, #1
 8009158:	2120      	movs	r1, #32
 800915a:	4805      	ldr	r0, [pc, #20]	; (8009170 <_ZN7LTC681112WakeFromIdleEv+0x4c>)
 800915c:	f7f8 fd04 	bl	8001b68 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3301      	adds	r3, #1
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	e7e5      	b.n	8009134 <_ZN7LTC681112WakeFromIdleEv+0x10>
    }

}
 8009168:	bf00      	nop
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	40020000 	.word	0x40020000

08009174 <_ZN7LTC681124ReadVoltageRegisterGroupENS_5GroupE>:

/* Read a cell voltage register group of an LTC6811 daisy chain.
 * Returns 0 on success, 1 if either PEC or SPI error.
 */
bool LTC6811::ReadVoltageRegisterGroup(Group const group) {
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
    return ReadRegisterGroup(cell_data[group]);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	33ce      	adds	r3, #206	; 0xce
 8009184:	78fa      	ldrb	r2, [r7, #3]
 8009186:	4611      	mov	r1, r2
 8009188:	4618      	mov	r0, r3
 800918a:	f000 fca4 	bl	8009ad6 <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EEixEj>
 800918e:	4603      	mov	r3, r0
 8009190:	4619      	mov	r1, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fcd2 	bl	8009b3c <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE>
 8009198:	4603      	mov	r3, r0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <_ZN7LTC681120ReadAuxRegisterGroupENS_5GroupE>:

/* Read an auxiliary register group of an LTC6811 daisy chain.
 * Returns 0 on success, 1 if either PEC or SPI error.
 */
bool LTC6811::ReadAuxRegisterGroup(Group const group) {
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	460b      	mov	r3, r1
 80091ac:	70fb      	strb	r3, [r7, #3]
    return ReadRegisterGroup(cell_data[group]);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	33ce      	adds	r3, #206	; 0xce
 80091b2:	78fa      	ldrb	r2, [r7, #3]
 80091b4:	4611      	mov	r1, r2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 fc8d 	bl	8009ad6 <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EEixEj>
 80091bc:	4603      	mov	r3, r0
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fcbb 	bl	8009b3c <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE>
 80091c6:	4603      	mov	r3, r0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <_ZN7LTC681123ReadConfigRegisterGroupEv>:
bool LTC6811::ReadStatusRegisterGroup(Group const group) {
    return ReadRegisterGroup(status_registers[group]);
}

/* Read the configuration register group of an LTC6811 daisy chain */
bool LTC6811::ReadConfigRegisterGroup(void) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
    return ReadRegisterGroup(slave_cfg_rx);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	336a      	adds	r3, #106	; 0x6a
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fd2e 	bl	8009c40 <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE>
 80091e4:	4603      	mov	r3, r0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <_ZN7LTC681124WriteConfigRegisterGroupEv>:

/* Write to the configuration register group of an LTC6811 daisy chain. */
bool LTC6811::WriteConfigRegisterGroup(void) {
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
    return WriteRegisterGroup(slave_cfg_tx);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	3306      	adds	r3, #6
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fd89 	bl	8009d14 <_ZN7LTC681118WriteRegisterGroupIhEEbRNS_13RegisterGroupIT_EE>
 8009202:	4603      	mov	r3, r0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4618      	mov	r0, r3
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <_ZNKSt5arrayIhLj4EE4dataEv>:
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff ffed 	bl	800920c <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8009232:	4603      	mov	r3, r0
 8009234:	4618      	mov	r0, r3
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <_ZN7LTC681116getVoltageStatusEv>:
}

/* Generate a status report of the cell voltage register groups.
 * Returns an LTC6811VoltageStatus on success, nullopt if error
 */
std::optional<LTC6811::VoltageStatus> LTC6811::getVoltageStatus(void) {
 800923c:	b590      	push	{r4, r7, lr}
 800923e:	b097      	sub	sp, #92	; 0x5c
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
    LTC6811::VoltageStatus status{};
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]
 800924a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800924e:	823b      	strh	r3, [r7, #16]
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	2300      	movs	r3, #0
 8009256:	833b      	strh	r3, [r7, #24]
 8009258:	2300      	movs	r3, #0
 800925a:	61fb      	str	r3, [r7, #28]
    size_t count{ 0 };
 800925c:	2300      	movs	r3, #0
 800925e:	657b      	str	r3, [r7, #84]	; 0x54

    StartConversion(ADCV);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	f203 33ee 	addw	r3, r3, #1006	; 0x3ee
 8009266:	4619      	mov	r1, r3
 8009268:	6838      	ldr	r0, [r7, #0]
 800926a:	f000 fb53 	bl	8009914 <_ZN7LTC681115StartConversionERKSt5arrayIhLj4EE>

    for (size_t group = A; group <= D; ++group)
 800926e:	2300      	movs	r3, #0
 8009270:	653b      	str	r3, [r7, #80]	; 0x50
 8009272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009274:	2b03      	cmp	r3, #3
 8009276:	d811      	bhi.n	800929c <_ZN7LTC681116getVoltageStatusEv+0x60>
        if (ReadVoltageRegisterGroup(static_cast<Group>(group)) == 1)
 8009278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800927a:	b2db      	uxtb	r3, r3
 800927c:	4619      	mov	r1, r3
 800927e:	6838      	ldr	r0, [r7, #0]
 8009280:	f7ff ff78 	bl	8009174 <_ZN7LTC681124ReadVoltageRegisterGroupENS_5GroupE>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d004      	beq.n	8009294 <_ZN7LTC681116getVoltageStatusEv+0x58>
            return std::nullopt;
 800928a:	4621      	mov	r1, r4
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fd6b 	bl	8009d68 <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1ESt9nullopt_t>
 8009292:	e066      	b.n	8009362 <_ZN7LTC681116getVoltageStatusEv+0x126>
    for (size_t group = A; group <= D; ++group)
 8009294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009296:	3301      	adds	r3, #1
 8009298:	653b      	str	r3, [r7, #80]	; 0x50
 800929a:	e7ea      	b.n	8009272 <_ZN7LTC681116getVoltageStatusEv+0x36>

    for (const auto& register_group : cell_data) {
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	33ce      	adds	r3, #206	; 0xce
 80092a0:	643b      	str	r3, [r7, #64]	; 0x40
 80092a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80092a4:	f000 fd6f 	bl	8009d86 <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE5beginEv>
 80092a8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80092aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80092ac:	f000 fd77 	bl	8009d9e <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE3endEv>
 80092b0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80092b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d047      	beq.n	800934a <_ZN7LTC681116getVoltageStatusEv+0x10e>
 80092ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092bc:	63bb      	str	r3, [r7, #56]	; 0x38
        for (const auto& IC : register_group.ICDaisyChain) {
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	3304      	adds	r3, #4
 80092c2:	637b      	str	r3, [r7, #52]	; 0x34
 80092c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80092c6:	f000 fd78 	bl	8009dba <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EE5beginEv>
 80092ca:	64b8      	str	r0, [r7, #72]	; 0x48
 80092cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80092ce:	f000 fd80 	bl	8009dd2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EE3endEv>
 80092d2:	6338      	str	r0, [r7, #48]	; 0x30
 80092d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d8:	429a      	cmp	r2, r3
 80092da:	d032      	beq.n	8009342 <_ZN7LTC681116getVoltageStatusEv+0x106>
 80092dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092de:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (const auto voltage : IC.data) {
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80092e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e6:	f000 fd81 	bl	8009dec <_ZNKSt5arrayItLj3EE5beginEv>
 80092ea:	6478      	str	r0, [r7, #68]	; 0x44
 80092ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ee:	f000 fd89 	bl	8009e04 <_ZNKSt5arrayItLj3EE3endEv>
 80092f2:	6278      	str	r0, [r7, #36]	; 0x24
 80092f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d01e      	beq.n	800933a <_ZN7LTC681116getVoltageStatusEv+0xfe>
 80092fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fe:	881b      	ldrh	r3, [r3, #0]
 8009300:	847b      	strh	r3, [r7, #34]	; 0x22
                status.sum += voltage;
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009306:	4413      	add	r3, r2
 8009308:	60fb      	str	r3, [r7, #12]

                if (voltage < status.min) {
 800930a:	8a3b      	ldrh	r3, [r7, #16]
 800930c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800930e:	429a      	cmp	r2, r3
 8009310:	d204      	bcs.n	800931c <_ZN7LTC681116getVoltageStatusEv+0xe0>
                    status.min = voltage;
 8009312:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009314:	823b      	strh	r3, [r7, #16]
                    status.min_id = count;
 8009316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009318:	617b      	str	r3, [r7, #20]
 800931a:	e007      	b.n	800932c <_ZN7LTC681116getVoltageStatusEv+0xf0>
                } else if (voltage > status.max) {
 800931c:	8b3b      	ldrh	r3, [r7, #24]
 800931e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009320:	429a      	cmp	r2, r3
 8009322:	d903      	bls.n	800932c <_ZN7LTC681116getVoltageStatusEv+0xf0>
                    status.max = voltage;
 8009324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009326:	833b      	strh	r3, [r7, #24]
                    status.max_id = count;
 8009328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800932a:	61fb      	str	r3, [r7, #28]
                }
                ++count;
 800932c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800932e:	3301      	adds	r3, #1
 8009330:	657b      	str	r3, [r7, #84]	; 0x54
            for (const auto voltage : IC.data) {
 8009332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009334:	3302      	adds	r3, #2
 8009336:	647b      	str	r3, [r7, #68]	; 0x44
 8009338:	e7dc      	b.n	80092f4 <_ZN7LTC681116getVoltageStatusEv+0xb8>
        for (const auto& IC : register_group.ICDaisyChain) {
 800933a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800933c:	3308      	adds	r3, #8
 800933e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009340:	e7c8      	b.n	80092d4 <_ZN7LTC681116getVoltageStatusEv+0x98>
    for (const auto& register_group : cell_data) {
 8009342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009344:	3364      	adds	r3, #100	; 0x64
 8009346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009348:	e7b3      	b.n	80092b2 <_ZN7LTC681116getVoltageStatusEv+0x76>
            }
        }
    }
    status.sum /= 10000; // Convert centiDegC to DegC (with rounding errors, but this is what the old code did...)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	4a07      	ldr	r2, [pc, #28]	; (800936c <_ZN7LTC681116getVoltageStatusEv+0x130>)
 800934e:	fba2 2303 	umull	r2, r3, r2, r3
 8009352:	0b5b      	lsrs	r3, r3, #13
 8009354:	60fb      	str	r3, [r7, #12]
    return status;
 8009356:	f107 030c 	add.w	r3, r7, #12
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fd69 	bl	8009e34 <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1IRS1_Lb1EEEOT_>
}
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	375c      	adds	r7, #92	; 0x5c
 8009366:	46bd      	mov	sp, r7
 8009368:	bd90      	pop	{r4, r7, pc}
 800936a:	bf00      	nop
 800936c:	d1b71759 	.word	0xd1b71759

08009370 <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs>:
 * Returns an LTC6811TempStatus on success, nullopt if error
 */
std::optional<LTC6811::TempStatus> LTC6811::getTemperatureStatus() {
    LTC6811::TempStatus status{};
    size_t count{ 0 };
    auto steinharthart = [](int16_t const NTC_voltage) noexcept {
 8009370:	b580      	push	{r7, lr}
 8009372:	b08a      	sub	sp, #40	; 0x28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	807b      	strh	r3, [r7, #2]
        constexpr auto Vin = 30000.0f; // 3[V], or 30000[V * 10-5]
 800937c:	4b27      	ldr	r3, [pc, #156]	; (800941c <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xac>)
 800937e:	627b      	str	r3, [r7, #36]	; 0x24
        constexpr auto KtoC = 27315; // centiKelvin to centiDegCelsius
 8009380:	f646 23b3 	movw	r3, #27315	; 0x6ab3
 8009384:	623b      	str	r3, [r7, #32]
        constexpr auto A = 0.003354016f;
 8009386:	4b26      	ldr	r3, [pc, #152]	; (8009420 <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xb0>)
 8009388:	61fb      	str	r3, [r7, #28]
        constexpr auto B = 0.000256524f;
 800938a:	4b26      	ldr	r3, [pc, #152]	; (8009424 <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xb4>)
 800938c:	61bb      	str	r3, [r7, #24]
        constexpr auto C = 0.00000260597f;
 800938e:	4b26      	ldr	r3, [pc, #152]	; (8009428 <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xb8>)
 8009390:	617b      	str	r3, [r7, #20]
        constexpr auto D = 0.0000000632926f;
 8009392:	4b26      	ldr	r3, [pc, #152]	; (800942c <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xbc>)
 8009394:	613b      	str	r3, [r7, #16]
        auto log = -logf(Vin / NTC_voltage - 1);
 8009396:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093a2:	eddf 6a23 	vldr	s13, [pc, #140]	; 8009430 <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xc0>
 80093a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093b2:	eeb0 0a67 	vmov.f32	s0, s15
 80093b6:	f003 ff63 	bl	800d280 <logf>
 80093ba:	eef0 7a40 	vmov.f32	s15, s0
 80093be:	eef1 7a67 	vneg.f32	s15, s15
 80093c2:	edc7 7a03 	vstr	s15, [r7, #12]

        return static_cast<int16_t>(100.0f / (A + log * ( B + log * (C + D * log))) - KtoC);
 80093c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80093ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009434 <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xc4>
 80093ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093d2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009438 <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xc8>
 80093d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093da:	edd7 7a03 	vldr	s15, [r7, #12]
 80093de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800943c <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xcc>
 80093e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80093ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8009440 <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xd0>
 80093f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093fa:	eddf 6a12 	vldr	s13, [pc, #72]	; 8009444 <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xd4>
 80093fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009402:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8009448 <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs+0xd8>
 8009406:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800940a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800940e:	ee17 3a90 	vmov	r3, s15
 8009412:	b21b      	sxth	r3, r3
    };
 8009414:	4618      	mov	r0, r3
 8009416:	3728      	adds	r7, #40	; 0x28
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	46ea6000 	.word	0x46ea6000
 8009420:	3b5bcf0d 	.word	0x3b5bcf0d
 8009424:	39867e12 	.word	0x39867e12
 8009428:	362ee239 	.word	0x362ee239
 800942c:	3387eb7a 	.word	0x3387eb7a
 8009430:	46ea6000 	.word	0x46ea6000
 8009434:	3387eb7a 	.word	0x3387eb7a
 8009438:	362ee239 	.word	0x362ee239
 800943c:	39867e12 	.word	0x39867e12
 8009440:	3b5bcf0d 	.word	0x3b5bcf0d
 8009444:	42c80000 	.word	0x42c80000
 8009448:	46d56600 	.word	0x46d56600

0800944c <_ZN7LTC681120getTemperatureStatusEv>:
std::optional<LTC6811::TempStatus> LTC6811::getTemperatureStatus() {
 800944c:	b5b0      	push	{r4, r5, r7, lr}
 800944e:	b096      	sub	sp, #88	; 0x58
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
    LTC6811::TempStatus status{};
 8009456:	4b48      	ldr	r3, [pc, #288]	; (8009578 <_ZN7LTC681120getTemperatureStatusEv+0x12c>)
 8009458:	f107 0410 	add.w	r4, r7, #16
 800945c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800945e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    size_t count{ 0 };
 8009462:	2300      	movs	r3, #0
 8009464:	657b      	str	r3, [r7, #84]	; 0x54

    StartConversion(ADAX);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 800946c:	4619      	mov	r1, r3
 800946e:	6838      	ldr	r0, [r7, #0]
 8009470:	f000 fa50 	bl	8009914 <_ZN7LTC681115StartConversionERKSt5arrayIhLj4EE>

    for (size_t group = A; group <= D; ++group)
 8009474:	2300      	movs	r3, #0
 8009476:	653b      	str	r3, [r7, #80]	; 0x50
 8009478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800947a:	2b03      	cmp	r3, #3
 800947c:	d811      	bhi.n	80094a2 <_ZN7LTC681120getTemperatureStatusEv+0x56>
        if (ReadAuxRegisterGroup(static_cast<Group>(group)) == 1)
 800947e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009480:	b2db      	uxtb	r3, r3
 8009482:	4619      	mov	r1, r3
 8009484:	6838      	ldr	r0, [r7, #0]
 8009486:	f7ff fe8c 	bl	80091a2 <_ZN7LTC681120ReadAuxRegisterGroupENS_5GroupE>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <_ZN7LTC681120getTemperatureStatusEv+0x4e>
            return std::nullopt;
 8009490:	4629      	mov	r1, r5
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fce2 	bl	8009e5c <_ZNSt8optionalIN7LTC681110TempStatusEEC1ESt9nullopt_t>
 8009498:	e06a      	b.n	8009570 <_ZN7LTC681120getTemperatureStatusEv+0x124>
    for (size_t group = A; group <= D; ++group)
 800949a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800949c:	3301      	adds	r3, #1
 800949e:	653b      	str	r3, [r7, #80]	; 0x50
 80094a0:	e7ea      	b.n	8009478 <_ZN7LTC681120getTemperatureStatusEv+0x2c>

    for (const auto& register_group : cell_data) {
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	33ce      	adds	r3, #206	; 0xce
 80094a6:	643b      	str	r3, [r7, #64]	; 0x40
 80094a8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80094aa:	f000 fc6c 	bl	8009d86 <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE5beginEv>
 80094ae:	64f8      	str	r0, [r7, #76]	; 0x4c
 80094b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80094b2:	f000 fc74 	bl	8009d9e <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE3endEv>
 80094b6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80094b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094bc:	429a      	cmp	r2, r3
 80094be:	d051      	beq.n	8009564 <_ZN7LTC681120getTemperatureStatusEv+0x118>
 80094c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094c2:	63bb      	str	r3, [r7, #56]	; 0x38
        for (const auto& IC : register_group.ICDaisyChain) {
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	3304      	adds	r3, #4
 80094c8:	637b      	str	r3, [r7, #52]	; 0x34
 80094ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80094cc:	f000 fc75 	bl	8009dba <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EE5beginEv>
 80094d0:	64b8      	str	r0, [r7, #72]	; 0x48
 80094d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80094d4:	f000 fc7d 	bl	8009dd2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EE3endEv>
 80094d8:	6338      	str	r0, [r7, #48]	; 0x30
 80094da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094de:	429a      	cmp	r2, r3
 80094e0:	d03c      	beq.n	800955c <_ZN7LTC681120getTemperatureStatusEv+0x110>
 80094e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (auto temperature : IC.data) {
 80094e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80094ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ec:	f000 fc7e 	bl	8009dec <_ZNKSt5arrayItLj3EE5beginEv>
 80094f0:	6478      	str	r0, [r7, #68]	; 0x44
 80094f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094f4:	f000 fc86 	bl	8009e04 <_ZNKSt5arrayItLj3EE3endEv>
 80094f8:	6278      	str	r0, [r7, #36]	; 0x24
 80094fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	429a      	cmp	r2, r3
 8009500:	d028      	beq.n	8009554 <_ZN7LTC681120getTemperatureStatusEv+0x108>
 8009502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	847b      	strh	r3, [r7, #34]	; 0x22
                temperature = steinharthart(temperature);
 8009508:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800950c:	f107 030c 	add.w	r3, r7, #12
 8009510:	4611      	mov	r1, r2
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff ff2c 	bl	8009370 <_ZZN7LTC681120getTemperatureStatusEvENKUlsE_clEs>
 8009518:	4603      	mov	r3, r0
 800951a:	847b      	strh	r3, [r7, #34]	; 0x22

                if (temperature < status.min) {
 800951c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800951e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009522:	4293      	cmp	r3, r2
 8009524:	da05      	bge.n	8009532 <_ZN7LTC681120getTemperatureStatusEv+0xe6>
                    status.min = temperature;
 8009526:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800952a:	823b      	strh	r3, [r7, #16]
                    status.min_id = count;
 800952c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	e009      	b.n	8009546 <_ZN7LTC681120getTemperatureStatusEv+0xfa>
                } else if (temperature > status.max) {
 8009532:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009534:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009538:	4293      	cmp	r3, r2
 800953a:	dd04      	ble.n	8009546 <_ZN7LTC681120getTemperatureStatusEv+0xfa>
                    status.max = temperature;
 800953c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009540:	833b      	strh	r3, [r7, #24]
                    status.max_id = count;
 8009542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009544:	61fb      	str	r3, [r7, #28]
                }

                ++count;
 8009546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009548:	3301      	adds	r3, #1
 800954a:	657b      	str	r3, [r7, #84]	; 0x54
            for (auto temperature : IC.data) {
 800954c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800954e:	3302      	adds	r3, #2
 8009550:	647b      	str	r3, [r7, #68]	; 0x44
 8009552:	e7d2      	b.n	80094fa <_ZN7LTC681120getTemperatureStatusEv+0xae>
        for (const auto& IC : register_group.ICDaisyChain) {
 8009554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009556:	3308      	adds	r3, #8
 8009558:	64bb      	str	r3, [r7, #72]	; 0x48
 800955a:	e7be      	b.n	80094da <_ZN7LTC681120getTemperatureStatusEv+0x8e>
    for (const auto& register_group : cell_data) {
 800955c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955e:	3364      	adds	r3, #100	; 0x64
 8009560:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009562:	e7a9      	b.n	80094b8 <_ZN7LTC681120getTemperatureStatusEv+0x6c>
            }
        }
    }
    return status;
 8009564:	f107 0310 	add.w	r3, r7, #16
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fc90 	bl	8009e90 <_ZNSt8optionalIN7LTC681110TempStatusEEC1IRS1_Lb1EEEOT_>
}
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	3758      	adds	r7, #88	; 0x58
 8009574:	46bd      	mov	sp, r7
 8009576:	bdb0      	pop	{r4, r5, r7, pc}
 8009578:	0800d7e0 	.word	0x0800d7e0

0800957c <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE>:

// TODO to be fully functional programming, make this return the discharge array instead of being void
void LTC6811::BuildDischargeConfig(const VoltageStatus& voltage_status) {
 800957c:	b590      	push	{r4, r7, lr}
 800957e:	b09d      	sub	sp, #116	; 0x74
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
    uint16_t DCCx{ 0 };
 8009586:	2300      	movs	r3, #0
 8009588:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint8_t current_cell{ 0 }, current_ic{ kDaisyChainLength - 1 };
 800958c:	2300      	movs	r3, #0
 800958e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8009592:	230b      	movs	r3, #11
 8009594:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

    switch (discharge_mode) {
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	791b      	ldrb	r3, [r3, #4]
 800959c:	2b01      	cmp	r3, #1
 800959e:	f000 8091 	beq.w	80096c4 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x148>
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	f000 8103 	beq.w	80097ae <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x232>
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f040 819e 	bne.w	80098ea <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x36e>
    case GTMinPlusDelta:
        for (auto& ICConfig : slave_cfg_tx.ICDaisyChain) { // 12 register groups
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	330a      	adds	r3, #10
 80095b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80095b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b6:	f000 fa61 	bl	8009a7c <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE5beginEv>
 80095ba:	66b8      	str	r0, [r7, #104]	; 0x68
 80095bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095be:	f000 fc7b 	bl	8009eb8 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE3endEv>
 80095c2:	6278      	str	r0, [r7, #36]	; 0x24
 80095c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	429a      	cmp	r2, r3
 80095ca:	f000 8189 	beq.w	80098e0 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x364>
 80095ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095d0:	623b      	str	r3, [r7, #32]
            DCCx = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
            current_cell = 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

            for (const auto& register_group : cell_data) { // 4 voltage register groups
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	33ce      	adds	r3, #206	; 0xce
 80095e2:	61fb      	str	r3, [r7, #28]
 80095e4:	69f8      	ldr	r0, [r7, #28]
 80095e6:	f000 fbce 	bl	8009d86 <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE5beginEv>
 80095ea:	6678      	str	r0, [r7, #100]	; 0x64
 80095ec:	69f8      	ldr	r0, [r7, #28]
 80095ee:	f000 fbd6 	bl	8009d9e <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE3endEv>
 80095f2:	61b8      	str	r0, [r7, #24]
 80095f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d03c      	beq.n	8009676 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0xfa>
 80095fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095fe:	617b      	str	r3, [r7, #20]
                for (const auto voltage : register_group.ICDaisyChain[current_ic--].data) { // 3 voltages per IC
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	1d1a      	adds	r2, r3, #4
 8009604:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009608:	1e59      	subs	r1, r3, #1
 800960a:	f887 106c 	strb.w	r1, [r7, #108]	; 0x6c
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f000 fc5e 	bl	8009ed2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EEixEj>
 8009616:	4603      	mov	r3, r0
 8009618:	613b      	str	r3, [r7, #16]
 800961a:	6938      	ldr	r0, [r7, #16]
 800961c:	f000 fbe6 	bl	8009dec <_ZNKSt5arrayItLj3EE5beginEv>
 8009620:	6638      	str	r0, [r7, #96]	; 0x60
 8009622:	6938      	ldr	r0, [r7, #16]
 8009624:	f000 fbee 	bl	8009e04 <_ZNKSt5arrayItLj3EE3endEv>
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	429a      	cmp	r2, r3
 8009630:	d01d      	beq.n	800966e <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0xf2>
 8009632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	817b      	strh	r3, [r7, #10]
                    if (voltage > voltage_status.min + kDelta)
 8009638:	897a      	ldrh	r2, [r7, #10]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	889b      	ldrh	r3, [r3, #4]
 800963e:	3364      	adds	r3, #100	; 0x64
 8009640:	429a      	cmp	r2, r3
 8009642:	dd0b      	ble.n	800965c <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0xe0>
                        DCCx |= 1 << current_cell;
 8009644:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8009648:	2201      	movs	r2, #1
 800964a:	fa02 f303 	lsl.w	r3, r2, r3
 800964e:	b21a      	sxth	r2, r3
 8009650:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8009654:	4313      	orrs	r3, r2
 8009656:	b21b      	sxth	r3, r3
 8009658:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    ++current_cell;
 800965c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8009660:	3301      	adds	r3, #1
 8009662:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                for (const auto voltage : register_group.ICDaisyChain[current_ic--].data) { // 3 voltages per IC
 8009666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009668:	3302      	adds	r3, #2
 800966a:	663b      	str	r3, [r7, #96]	; 0x60
 800966c:	e7dd      	b.n	800962a <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0xae>
            for (const auto& register_group : cell_data) { // 4 voltage register groups
 800966e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009670:	3364      	adds	r3, #100	; 0x64
 8009672:	667b      	str	r3, [r7, #100]	; 0x64
 8009674:	e7be      	b.n	80095f4 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x78>
                } // 4 * 3 = 12 voltages associated with each LTC6811 in the daisy chain
            }

            ICConfig.data[4] = DCCx & 0xFF;
 8009676:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800967a:	b2dc      	uxtb	r4, r3
 800967c:	6a3b      	ldr	r3, [r7, #32]
 800967e:	2104      	movs	r1, #4
 8009680:	4618      	mov	r0, r3
 8009682:	f000 fc35 	bl	8009ef0 <_ZNSt5arrayIhLj6EEixEj>
 8009686:	4603      	mov	r3, r0
 8009688:	4622      	mov	r2, r4
 800968a:	701a      	strb	r2, [r3, #0]
            ICConfig.data[5] = DCCx >> 8 & 0xF;
 800968c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009690:	121b      	asrs	r3, r3, #8
 8009692:	b2db      	uxtb	r3, r3
 8009694:	f003 030f 	and.w	r3, r3, #15
 8009698:	b2dc      	uxtb	r4, r3
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	2105      	movs	r1, #5
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fc26 	bl	8009ef0 <_ZNSt5arrayIhLj6EEixEj>
 80096a4:	4603      	mov	r3, r0
 80096a6:	4622      	mov	r2, r4
 80096a8:	701a      	strb	r2, [r3, #0]
            ICConfig.PEC = PEC15Calc(ICConfig.data);
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	2106      	movs	r1, #6
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 fc46 	bl	8009f40 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 80096b4:	4603      	mov	r3, r0
 80096b6:	461a      	mov	r2, r3
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	80da      	strh	r2, [r3, #6]
        for (auto& ICConfig : slave_cfg_tx.ICDaisyChain) { // 12 register groups
 80096bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096be:	3308      	adds	r3, #8
 80096c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80096c2:	e77f      	b.n	80095c4 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x48>
        } // 12 * 12 = 144 voltages associated with the entire daisy chain
        break;

    case MaxOnly:
        if (voltage_status.max - voltage_status.min > kDelta) {
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	899b      	ldrh	r3, [r3, #12]
 80096c8:	461a      	mov	r2, r3
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	889b      	ldrh	r3, [r3, #4]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b64      	cmp	r3, #100	; 0x64
 80096d2:	f340 8107 	ble.w	80098e4 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x368>
            current_ic = voltage_status.max_id / 3 % 12;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	4a8b      	ldr	r2, [pc, #556]	; (8009908 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x38c>)
 80096dc:	fba2 2303 	umull	r2, r3, r2, r3
 80096e0:	0859      	lsrs	r1, r3, #1
 80096e2:	4b89      	ldr	r3, [pc, #548]	; (8009908 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x38c>)
 80096e4:	fba3 2301 	umull	r2, r3, r3, r1
 80096e8:	08da      	lsrs	r2, r3, #3
 80096ea:	4613      	mov	r3, r2
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	4413      	add	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	1aca      	subs	r2, r1, r3
 80096f4:	4613      	mov	r3, r2
 80096f6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
            DCCx |= 1 << voltage_status.max_id % 11;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	6919      	ldr	r1, [r3, #16]
 80096fe:	4b83      	ldr	r3, [pc, #524]	; (800990c <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x390>)
 8009700:	fba3 2301 	umull	r2, r3, r3, r1
 8009704:	08da      	lsrs	r2, r3, #3
 8009706:	4613      	mov	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	4413      	add	r3, r2
 8009710:	1aca      	subs	r2, r1, r3
 8009712:	2301      	movs	r3, #1
 8009714:	4093      	lsls	r3, r2
 8009716:	b21a      	sxth	r2, r3
 8009718:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800971c:	4313      	orrs	r3, r2
 800971e:	b21b      	sxth	r3, r3
 8009720:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
            slave_cfg_tx.ICDaisyChain[current_ic].data[4] = DCCx & 0xFF;
 8009724:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009728:	b2dc      	uxtb	r4, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	330a      	adds	r3, #10
 800972e:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8009732:	4611      	mov	r1, r2
 8009734:	4618      	mov	r0, r3
 8009736:	f000 fc3b 	bl	8009fb0 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EEixEj>
 800973a:	4603      	mov	r3, r0
 800973c:	2104      	movs	r1, #4
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fbd6 	bl	8009ef0 <_ZNSt5arrayIhLj6EEixEj>
 8009744:	4603      	mov	r3, r0
 8009746:	4622      	mov	r2, r4
 8009748:	701a      	strb	r2, [r3, #0]
            slave_cfg_tx.ICDaisyChain[current_ic].data[5] = DCCx >> 8 & 0xF;
 800974a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800974e:	121b      	asrs	r3, r3, #8
 8009750:	b2db      	uxtb	r3, r3
 8009752:	f003 030f 	and.w	r3, r3, #15
 8009756:	b2dc      	uxtb	r4, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	330a      	adds	r3, #10
 800975c:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8009760:	4611      	mov	r1, r2
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fc24 	bl	8009fb0 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EEixEj>
 8009768:	4603      	mov	r3, r0
 800976a:	2105      	movs	r1, #5
 800976c:	4618      	mov	r0, r3
 800976e:	f000 fbbf 	bl	8009ef0 <_ZNSt5arrayIhLj6EEixEj>
 8009772:	4603      	mov	r3, r0
 8009774:	4622      	mov	r2, r4
 8009776:	701a      	strb	r2, [r3, #0]
            slave_cfg_tx.ICDaisyChain[current_ic].PEC = PEC15Calc(slave_cfg_tx.ICDaisyChain[current_ic].data);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	330a      	adds	r3, #10
 800977c:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8009780:	4611      	mov	r1, r2
 8009782:	4618      	mov	r0, r3
 8009784:	f000 fc14 	bl	8009fb0 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EEixEj>
 8009788:	4603      	mov	r3, r0
 800978a:	2106      	movs	r1, #6
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fbd7 	bl	8009f40 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 8009792:	4603      	mov	r3, r0
 8009794:	461c      	mov	r4, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	330a      	adds	r3, #10
 800979a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800979e:	4611      	mov	r1, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fc05 	bl	8009fb0 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EEixEj>
 80097a6:	4603      	mov	r3, r0
 80097a8:	4622      	mov	r2, r4
 80097aa:	80da      	strh	r2, [r3, #6]
        }
        break;
 80097ac:	e09a      	b.n	80098e4 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x368>

    case GTMeanPlusDelta: {
        size_t average_voltage{ voltage_status.sum / (12 * kDaisyChainLength) };
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a57      	ldr	r2, [pc, #348]	; (8009910 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x394>)
 80097b4:	fba2 2303 	umull	r2, r3, r2, r3
 80097b8:	095b      	lsrs	r3, r3, #5
 80097ba:	653b      	str	r3, [r7, #80]	; 0x50

        for (auto& ICConfig : slave_cfg_tx.ICDaisyChain) {
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	330a      	adds	r3, #10
 80097c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097c2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80097c4:	f000 f95a 	bl	8009a7c <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE5beginEv>
 80097c8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80097ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80097cc:	f000 fb74 	bl	8009eb8 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE3endEv>
 80097d0:	64b8      	str	r0, [r7, #72]	; 0x48
 80097d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097d6:	429a      	cmp	r2, r3
 80097d8:	f000 8086 	beq.w	80098e8 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x36c>
 80097dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097de:	647b      	str	r3, [r7, #68]	; 0x44
            DCCx = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
            current_cell = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

            for (const auto& register_group : cell_data) { // 4 voltage register groups
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	33ce      	adds	r3, #206	; 0xce
 80097f0:	643b      	str	r3, [r7, #64]	; 0x40
 80097f2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80097f4:	f000 fac7 	bl	8009d86 <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE5beginEv>
 80097f8:	65b8      	str	r0, [r7, #88]	; 0x58
 80097fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80097fc:	f000 facf 	bl	8009d9e <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE3endEv>
 8009800:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009802:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009806:	429a      	cmp	r2, r3
 8009808:	d03b      	beq.n	8009882 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x306>
 800980a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800980c:	63bb      	str	r3, [r7, #56]	; 0x38
                for (const auto voltage : register_group.ICDaisyChain[current_ic--].data) { // 3 voltages per IC
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	1d1a      	adds	r2, r3, #4
 8009812:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009816:	1e59      	subs	r1, r3, #1
 8009818:	f887 106c 	strb.w	r1, [r7, #108]	; 0x6c
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f000 fb57 	bl	8009ed2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EEixEj>
 8009824:	4603      	mov	r3, r0
 8009826:	637b      	str	r3, [r7, #52]	; 0x34
 8009828:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800982a:	f000 fadf 	bl	8009dec <_ZNKSt5arrayItLj3EE5beginEv>
 800982e:	6578      	str	r0, [r7, #84]	; 0x54
 8009830:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009832:	f000 fae7 	bl	8009e04 <_ZNKSt5arrayItLj3EE3endEv>
 8009836:	6338      	str	r0, [r7, #48]	; 0x30
 8009838:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	429a      	cmp	r2, r3
 800983e:	d01c      	beq.n	800987a <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x2fe>
 8009840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    if (voltage > average_voltage + kDelta)
 8009846:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800984a:	3364      	adds	r3, #100	; 0x64
 800984c:	429a      	cmp	r2, r3
 800984e:	d90b      	bls.n	8009868 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x2ec>
                        DCCx |= 1 << current_cell;
 8009850:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8009854:	2201      	movs	r2, #1
 8009856:	fa02 f303 	lsl.w	r3, r2, r3
 800985a:	b21a      	sxth	r2, r3
 800985c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8009860:	4313      	orrs	r3, r2
 8009862:	b21b      	sxth	r3, r3
 8009864:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    ++current_cell;
 8009868:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800986c:	3301      	adds	r3, #1
 800986e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                for (const auto voltage : register_group.ICDaisyChain[current_ic--].data) { // 3 voltages per IC
 8009872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009874:	3302      	adds	r3, #2
 8009876:	657b      	str	r3, [r7, #84]	; 0x54
 8009878:	e7de      	b.n	8009838 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x2bc>
            for (const auto& register_group : cell_data) { // 4 voltage register groups
 800987a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800987c:	3364      	adds	r3, #100	; 0x64
 800987e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009880:	e7bf      	b.n	8009802 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x286>
                } // 4 * 3 = 12 voltages associated with each LTC6811 in the daisy chain
            }

            ICConfig.data[4] |= DCCx & 0xFF;
 8009882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009884:	2104      	movs	r1, #4
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fb32 	bl	8009ef0 <_ZNSt5arrayIhLj6EEixEj>
 800988c:	4603      	mov	r3, r0
 800988e:	781a      	ldrb	r2, [r3, #0]
 8009890:	b251      	sxtb	r1, r2
 8009892:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8009896:	b252      	sxtb	r2, r2
 8009898:	430a      	orrs	r2, r1
 800989a:	b252      	sxtb	r2, r2
 800989c:	b2d2      	uxtb	r2, r2
 800989e:	701a      	strb	r2, [r3, #0]
            ICConfig.data[5] |= DCCx >> 8 & 0xF;
 80098a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098a2:	2105      	movs	r1, #5
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 fb23 	bl	8009ef0 <_ZNSt5arrayIhLj6EEixEj>
 80098aa:	4603      	mov	r3, r0
 80098ac:	781a      	ldrb	r2, [r3, #0]
 80098ae:	b251      	sxtb	r1, r2
 80098b0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80098b4:	1212      	asrs	r2, r2, #8
 80098b6:	b252      	sxtb	r2, r2
 80098b8:	f002 020f 	and.w	r2, r2, #15
 80098bc:	b252      	sxtb	r2, r2
 80098be:	430a      	orrs	r2, r1
 80098c0:	b252      	sxtb	r2, r2
 80098c2:	b2d2      	uxtb	r2, r2
 80098c4:	701a      	strb	r2, [r3, #0]
            ICConfig.PEC = PEC15Calc(ICConfig.data);
 80098c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098c8:	2106      	movs	r1, #6
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 fb38 	bl	8009f40 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 80098d0:	4603      	mov	r3, r0
 80098d2:	461a      	mov	r2, r3
 80098d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098d6:	80da      	strh	r2, [r3, #6]
        for (auto& ICConfig : slave_cfg_tx.ICDaisyChain) {
 80098d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098da:	3308      	adds	r3, #8
 80098dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098de:	e778      	b.n	80097d2 <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x256>
        break;
 80098e0:	bf00      	nop
 80098e2:	e002      	b.n	80098ea <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x36e>
        break;
 80098e4:	bf00      	nop
 80098e6:	e000      	b.n	80098ea <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE+0x36e>
        }
    }
    break;
 80098e8:	bf00      	nop
    }

    WriteConfigRegisterGroup();
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff fc7f 	bl	80091ee <_ZN7LTC681124WriteConfigRegisterGroupEv>
    DWT_Delay(500);
 80098f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098f4:	f7ff fa2a 	bl	8008d4c <_Z9DWT_Delaym>
    ReadConfigRegisterGroup(); // Could take this out and just read when we need the data to send over CAN or whatever
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff fc69 	bl	80091d0 <_ZN7LTC681123ReadConfigRegisterGroupEv>
}
 80098fe:	bf00      	nop
 8009900:	3774      	adds	r7, #116	; 0x74
 8009902:	46bd      	mov	sp, r7
 8009904:	bd90      	pop	{r4, r7, pc}
 8009906:	bf00      	nop
 8009908:	aaaaaaab 	.word	0xaaaaaaab
 800990c:	ba2e8ba3 	.word	0xba2e8ba3
 8009910:	38e38e39 	.word	0x38e38e39

08009914 <_ZN7LTC681115StartConversionERKSt5arrayIhLj4EE>:


/* Start a conversion */
void LTC6811::StartConversion(const Command& command) {
 8009914:	b590      	push	{r4, r7, lr}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
    WakeFromIdle(); // It's possible all of these can be removed
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7ff fc00 	bl	8009124 <_ZN7LTC681112WakeFromIdleEv>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009924:	2200      	movs	r2, #0
 8009926:	2120      	movs	r1, #32
 8009928:	480d      	ldr	r0, [pc, #52]	; (8009960 <_ZN7LTC681115StartConversionERKSt5arrayIhLj4EE+0x4c>)
 800992a:	f7f8 f91d 	bl	8001b68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, command.data(), kCommandLength, HAL_MAX_DELAY);        // Start cell voltage conversion.
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681c      	ldr	r4, [r3, #0]
 8009932:	6838      	ldr	r0, [r7, #0]
 8009934:	f7ff fc75 	bl	8009222 <_ZNKSt5arrayIhLj4EE4dataEv>
 8009938:	4601      	mov	r1, r0
 800993a:	f04f 33ff 	mov.w	r3, #4294967295
 800993e:	2204      	movs	r2, #4
 8009940:	4620      	mov	r0, r4
 8009942:	f7fa fadd 	bl	8003f00 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009946:	2201      	movs	r2, #1
 8009948:	2120      	movs	r1, #32
 800994a:	4805      	ldr	r0, [pc, #20]	; (8009960 <_ZN7LTC681115StartConversionERKSt5arrayIhLj4EE+0x4c>)
 800994c:	f7f8 f90c 	bl	8001b68 <HAL_GPIO_WritePin>

    DWT_Delay(T_REFUP_MAX + T_CYCLE_FAST_MAX); // TODO we aren't in fast conversion mode??? Also these delays aren't in the Linduino library
 8009950:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8009954:	f7ff f9fa 	bl	8008d4c <_Z9DWT_Delaym>
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	bd90      	pop	{r4, r7, pc}
 8009960:	40020000 	.word	0x40020000

08009964 <_ZSt4moveIRSt5arrayIhLj4EEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4618      	mov	r0, r3
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <_ZN7LTC681113RegisterGroupIhEC1EOSt5arrayIhLj4EE>:
    template<typename T>
    struct RegisterGroup {
        /* This class bundles together the command to access some register group and data sent/received after that command */
        Command const command;
        std::array<Register<T>, kDaisyChainLength> ICDaisyChain;
        RegisterGroup(Command&& command) : command{ std::move(command) } {};
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
 8009984:	6838      	ldr	r0, [r7, #0]
 8009986:	f7ff ffed 	bl	8009964 <_ZSt4moveIRSt5arrayIhLj4EEEONSt16remove_referenceIT_E4typeEOS4_>
 800998a:	4601      	mov	r1, r0
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	461a      	mov	r2, r3
 8009990:	460b      	mov	r3, r1
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4618      	mov	r0, r3
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <_ZN7LTC681113RegisterGroupItEC1EOSt5arrayIhLj4EE>:
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
 80099aa:	6838      	ldr	r0, [r7, #0]
 80099ac:	f7ff ffda 	bl	8009964 <_ZSt4moveIRSt5arrayIhLj4EEEONSt16remove_referenceIT_E4typeEOS4_>
 80099b0:	4601      	mov	r1, r0
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	461a      	mov	r2, r3
 80099b6:	460b      	mov	r3, r1
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4618      	mov	r0, r3
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <_ZN7LTC681113RegisterGroupIsEC1EOSt5arrayIhLj4EE>:
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b082      	sub	sp, #8
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	6039      	str	r1, [r7, #0]
 80099d0:	6838      	ldr	r0, [r7, #0]
 80099d2:	f7ff ffc7 	bl	8009964 <_ZSt4moveIRSt5arrayIhLj4EEEONSt16remove_referenceIT_E4typeEOS4_>
 80099d6:	4601      	mov	r1, r0
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	461a      	mov	r2, r3
 80099dc:	460b      	mov	r3, r1
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6013      	str	r3, [r2, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <_ZNSt5arrayIhLj4EEixEj>:
      operator[](size_type __n) noexcept
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 fae7 	bl	8009fce <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
 8009a00:	4603      	mov	r3, r0
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>:
        0xa76f, 0x62f6, 0x69c4, 0xac5d, 0x7fa0, 0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
    };

    /* This has been tested against the original code and is working properly */
    template <typename T, size_t S>
    constexpr static uint16_t PEC15Calc(const std::array<T, S>& data, size_t size = S * sizeof(T)) {
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
        uint16_t PEC{ 16 }, addr{ 0 };
 8009a16:	2310      	movs	r3, #16
 8009a18:	82fb      	strh	r3, [r7, #22]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	827b      	strh	r3, [r7, #18]
        auto serialized_data = reinterpret_cast<uint8_t const *>(data.data());
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff fbff 	bl	8009222 <_ZNKSt5arrayIhLj4EE4dataEv>
 8009a24:	60f8      	str	r0, [r7, #12]

        for (uint8_t i = 0; i < size; ++i) {
 8009a26:	2300      	movs	r3, #0
 8009a28:	757b      	strb	r3, [r7, #21]
 8009a2a:	7d7b      	ldrb	r3, [r7, #21]
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d91b      	bls.n	8009a6a <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj+0x5e>
            addr = (PEC >> 7 ^ serialized_data[i]) & 0xFF;
 8009a32:	8afb      	ldrh	r3, [r7, #22]
 8009a34:	11db      	asrs	r3, r3, #7
 8009a36:	b21a      	sxth	r2, r3
 8009a38:	7d7b      	ldrb	r3, [r7, #21]
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	440b      	add	r3, r1
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	b21b      	sxth	r3, r3
 8009a42:	4053      	eors	r3, r2
 8009a44:	b21b      	sxth	r3, r3
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	827b      	strh	r3, [r7, #18]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009a4c:	8afb      	ldrh	r3, [r7, #22]
 8009a4e:	021b      	lsls	r3, r3, #8
 8009a50:	b21a      	sxth	r2, r3
 8009a52:	8a7b      	ldrh	r3, [r7, #18]
 8009a54:	4908      	ldr	r1, [pc, #32]	; (8009a78 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj+0x6c>)
 8009a56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009a5a:	b21b      	sxth	r3, r3
 8009a5c:	4053      	eors	r3, r2
 8009a5e:	b21b      	sxth	r3, r3
 8009a60:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 8009a62:	7d7b      	ldrb	r3, [r7, #21]
 8009a64:	3301      	adds	r3, #1
 8009a66:	757b      	strb	r3, [r7, #21]
 8009a68:	e7df      	b.n	8009a2a <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj+0x1e>
        }

        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8009a6a:	8afb      	ldrh	r3, [r7, #22]
 8009a6c:	005b      	lsls	r3, r3, #1
 8009a6e:	b29b      	uxth	r3, r3
    }
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	0800d8c8 	.word	0x0800d8c8

08009a7c <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE5beginEv>:
      begin() noexcept
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f8c3 	bl	8009c10 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE4dataEv>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj12EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	230c      	movs	r3, #12
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE4fillERKS2_>:
      fill(const value_type& __u)
 8009aaa:	b590      	push	{r4, r7, lr}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff ffe1 	bl	8009a7c <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE5beginEv>
 8009aba:	4604      	mov	r4, r0
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff ffe9 	bl	8009a94 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj12EE4sizeEv>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f000 fa8e 	bl	8009fea <_ZSt6fill_nIPN7LTC68118RegisterIhEEjS2_ET_S4_T0_RKT1_>
 8009ace:	bf00      	nop
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd90      	pop	{r4, r7, pc}

08009ad6 <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EEixEj>:
      operator[](size_type __n) noexcept
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 fa94 	bl	800a012 <_ZNSt14__array_traitsIN7LTC681113RegisterGroupItEELj4EE6_S_refERA4_KS2_j>
 8009aea:	4603      	mov	r3, r0
 8009aec:	4618      	mov	r0, r3
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <_ZNSt5arrayIN7LTC68118RegisterItEELj12EE5beginEv>:
      begin() noexcept
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f805 	bl	8009b0c <_ZNSt5arrayIN7LTC68118RegisterItEELj12EE4dataEv>
 8009b02:	4603      	mov	r3, r0
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <_ZNSt5arrayIN7LTC68118RegisterItEELj12EE4dataEv>:
      data() noexcept
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 f805 	bl	8009b26 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj12EE6_S_ptrERA12_KS2_>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj12EE6_S_ptrERA12_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8009b26:	b480      	push	{r7}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE>:
    bool ReadRegisterGroup(RegisterGroup<T>& register_group) {
 8009b3c:	b590      	push	{r4, r7, lr}
 8009b3e:	b089      	sub	sp, #36	; 0x24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
        WakeFromIdle();
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff faec 	bl	8009124 <_ZN7LTC681112WakeFromIdleEv>
        auto serialized_data = reinterpret_cast<uint8_t*>(register_group.ICDaisyChain.begin());
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7ff ffcf 	bl	8009af4 <_ZNSt5arrayIN7LTC68118RegisterItEELj12EE5beginEv>
 8009b56:	61b8      	str	r0, [r7, #24]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2120      	movs	r1, #32
 8009b5c:	482b      	ldr	r0, [pc, #172]	; (8009c0c <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE+0xd0>)
 8009b5e:	f7f8 f803 	bl	8001b68 <HAL_GPIO_WritePin>
        auto result = HAL_SPI_Transmit(&hspi, register_group.command.data(), kCommandLength, HAL_MAX_DELAY);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681c      	ldr	r4, [r3, #0]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7ff fb5a 	bl	8009222 <_ZNKSt5arrayIhLj4EE4dataEv>
 8009b6e:	4601      	mov	r1, r0
 8009b70:	f04f 33ff 	mov.w	r3, #4294967295
 8009b74:	2204      	movs	r2, #4
 8009b76:	4620      	mov	r0, r4
 8009b78:	f7fa f9c2 	bl	8003f00 <HAL_SPI_Transmit>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009b80:	2200      	movs	r2, #0
 8009b82:	2120      	movs	r1, #32
 8009b84:	4821      	ldr	r0, [pc, #132]	; (8009c0c <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE+0xd0>)
 8009b86:	f7f7 ffef 	bl	8001b68 <HAL_GPIO_WritePin>
        if (result == HAL_ERROR || HAL_SPI_Receive(&hspi, serialized_data, kBytesPerRegister * kDaisyChainLength, HAL_MAX_DELAY) == HAL_ERROR)
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d00a      	beq.n	8009ba6 <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE+0x6a>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	f04f 33ff 	mov.w	r3, #4294967295
 8009b98:	2260      	movs	r2, #96	; 0x60
 8009b9a:	69b9      	ldr	r1, [r7, #24]
 8009b9c:	f7fa fae4 	bl	8004168 <HAL_SPI_Receive>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d101      	bne.n	8009baa <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE+0x6e>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e000      	b.n	8009bac <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE+0x70>
 8009baa:	2300      	movs	r3, #0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE+0x78>
            return 1; // SPI error
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e026      	b.n	8009c02 <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE+0xc6>
            for (auto& IC : register_group.ICDaisyChain)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	613b      	str	r3, [r7, #16]
 8009bba:	6938      	ldr	r0, [r7, #16]
 8009bbc:	f7ff ff9a 	bl	8009af4 <_ZNSt5arrayIN7LTC68118RegisterItEELj12EE5beginEv>
 8009bc0:	61f8      	str	r0, [r7, #28]
 8009bc2:	6938      	ldr	r0, [r7, #16]
 8009bc4:	f000 fa36 	bl	800a034 <_ZNSt5arrayIN7LTC68118RegisterItEELj12EE3endEv>
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	69fa      	ldr	r2, [r7, #28]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d016      	beq.n	8009c00 <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE+0xc4>
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	60bb      	str	r3, [r7, #8]
                if (IC.PEC != PEC15Calc(IC.data))
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	88dc      	ldrh	r4, [r3, #6]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2106      	movs	r1, #6
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 fa4e 	bl	800a080 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj>
 8009be4:	4603      	mov	r3, r0
 8009be6:	429c      	cmp	r4, r3
 8009be8:	bf14      	ite	ne
 8009bea:	2301      	movne	r3, #1
 8009bec:	2300      	moveq	r3, #0
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE+0xbc>
                    return 1; // PEC error
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e004      	b.n	8009c02 <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE+0xc6>
            for (auto& IC : register_group.ICDaisyChain)
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	e7e4      	b.n	8009bca <_ZN7LTC681117ReadRegisterGroupItEEbRNS_13RegisterGroupIT_EE+0x8e>
            return 0; // Success
 8009c00:	2300      	movs	r3, #0
    }
 8009c02:	4618      	mov	r0, r3
 8009c04:	3724      	adds	r7, #36	; 0x24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd90      	pop	{r4, r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	40020000 	.word	0x40020000

08009c10 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE4dataEv>:
      data() noexcept
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 f805 	bl	8009c2a <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj12EE6_S_ptrERA12_KS2_>
 8009c20:	4603      	mov	r3, r0
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj12EE6_S_ptrERA12_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE>:
    bool ReadRegisterGroup(RegisterGroup<T>& register_group) {
 8009c40:	b590      	push	{r4, r7, lr}
 8009c42:	b089      	sub	sp, #36	; 0x24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
        WakeFromIdle();
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff fa6a 	bl	8009124 <_ZN7LTC681112WakeFromIdleEv>
        auto serialized_data = reinterpret_cast<uint8_t*>(register_group.ICDaisyChain.begin());
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	3304      	adds	r3, #4
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff ff11 	bl	8009a7c <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE5beginEv>
 8009c5a:	61b8      	str	r0, [r7, #24]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2120      	movs	r1, #32
 8009c60:	482b      	ldr	r0, [pc, #172]	; (8009d10 <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0xd0>)
 8009c62:	f7f7 ff81 	bl	8001b68 <HAL_GPIO_WritePin>
        auto result = HAL_SPI_Transmit(&hspi, register_group.command.data(), kCommandLength, HAL_MAX_DELAY);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681c      	ldr	r4, [r3, #0]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7ff fad8 	bl	8009222 <_ZNKSt5arrayIhLj4EE4dataEv>
 8009c72:	4601      	mov	r1, r0
 8009c74:	f04f 33ff 	mov.w	r3, #4294967295
 8009c78:	2204      	movs	r2, #4
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f7fa f940 	bl	8003f00 <HAL_SPI_Transmit>
 8009c80:	4603      	mov	r3, r0
 8009c82:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009c84:	2200      	movs	r2, #0
 8009c86:	2120      	movs	r1, #32
 8009c88:	4821      	ldr	r0, [pc, #132]	; (8009d10 <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0xd0>)
 8009c8a:	f7f7 ff6d 	bl	8001b68 <HAL_GPIO_WritePin>
        if (result == HAL_ERROR || HAL_SPI_Receive(&hspi, serialized_data, kBytesPerRegister * kDaisyChainLength, HAL_MAX_DELAY) == HAL_ERROR)
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d00a      	beq.n	8009caa <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0x6a>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6818      	ldr	r0, [r3, #0]
 8009c98:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9c:	2260      	movs	r2, #96	; 0x60
 8009c9e:	69b9      	ldr	r1, [r7, #24]
 8009ca0:	f7fa fa62 	bl	8004168 <HAL_SPI_Receive>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d101      	bne.n	8009cae <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0x6e>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0x70>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0x78>
            return 1; // SPI error
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e026      	b.n	8009d06 <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0xc6>
            for (auto& IC : register_group.ICDaisyChain)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	3304      	adds	r3, #4
 8009cbc:	613b      	str	r3, [r7, #16]
 8009cbe:	6938      	ldr	r0, [r7, #16]
 8009cc0:	f7ff fedc 	bl	8009a7c <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE5beginEv>
 8009cc4:	61f8      	str	r0, [r7, #28]
 8009cc6:	6938      	ldr	r0, [r7, #16]
 8009cc8:	f000 f8f6 	bl	8009eb8 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE3endEv>
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	69fa      	ldr	r2, [r7, #28]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d016      	beq.n	8009d04 <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0xc4>
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	60bb      	str	r3, [r7, #8]
                if (IC.PEC != PEC15Calc(IC.data))
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	88dc      	ldrh	r4, [r3, #6]
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2106      	movs	r1, #6
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 f92c 	bl	8009f40 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	429c      	cmp	r4, r3
 8009cec:	bf14      	ite	ne
 8009cee:	2301      	movne	r3, #1
 8009cf0:	2300      	moveq	r3, #0
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0xbc>
                    return 1; // PEC error
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e004      	b.n	8009d06 <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0xc6>
            for (auto& IC : register_group.ICDaisyChain)
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	3308      	adds	r3, #8
 8009d00:	61fb      	str	r3, [r7, #28]
 8009d02:	e7e4      	b.n	8009cce <_ZN7LTC681117ReadRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0x8e>
            return 0; // Success
 8009d04:	2300      	movs	r3, #0
    }
 8009d06:	4618      	mov	r0, r3
 8009d08:	3724      	adds	r7, #36	; 0x24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd90      	pop	{r4, r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	40020000 	.word	0x40020000

08009d14 <_ZN7LTC681118WriteRegisterGroupIhEEbRNS_13RegisterGroupIT_EE>:
    bool WriteRegisterGroup(RegisterGroup<T>& register_group) {
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
        WakeFromIdle();
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff fa00 	bl	8009124 <_ZN7LTC681112WakeFromIdleEv>
        auto serialized_data = reinterpret_cast<uint8_t*>(&register_group);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009d28:	2200      	movs	r2, #0
 8009d2a:	2120      	movs	r1, #32
 8009d2c:	480d      	ldr	r0, [pc, #52]	; (8009d64 <_ZN7LTC681118WriteRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0x50>)
 8009d2e:	f7f7 ff1b 	bl	8001b68 <HAL_GPIO_WritePin>
        auto result = HAL_SPI_Transmit(&hspi, serialized_data, sizeof(register_group), HAL_MAX_DELAY);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6818      	ldr	r0, [r3, #0]
 8009d36:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3a:	2264      	movs	r2, #100	; 0x64
 8009d3c:	68f9      	ldr	r1, [r7, #12]
 8009d3e:	f7fa f8df 	bl	8003f00 <HAL_SPI_Transmit>
 8009d42:	4603      	mov	r3, r0
 8009d44:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009d46:	2201      	movs	r2, #1
 8009d48:	2120      	movs	r1, #32
 8009d4a:	4806      	ldr	r0, [pc, #24]	; (8009d64 <_ZN7LTC681118WriteRegisterGroupIhEEbRNS_13RegisterGroupIT_EE+0x50>)
 8009d4c:	f7f7 ff0c 	bl	8001b68 <HAL_GPIO_WritePin>
        return result;
 8009d50:	7afb      	ldrb	r3, [r7, #11]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	bf14      	ite	ne
 8009d56:	2301      	movne	r3, #1
 8009d58:	2300      	moveq	r3, #0
 8009d5a:	b2db      	uxtb	r3, r3
    }
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	40020000 	.word	0x40020000

08009d68 <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1ESt9nullopt_t>:
    public:
      using value_type = _Tp;

      constexpr optional() = default;

      constexpr optional(nullopt_t) noexcept
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	7039      	strb	r1, [r7, #0]
	: _Base(nullopt) { }
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4611      	mov	r1, r2
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 f9c8 	bl	800a10c <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusEEC1ESt9nullopt_t>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE5beginEv>:
      begin() noexcept
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b082      	sub	sp, #8
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f9ca 	bl	800a128 <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE4dataEv>
 8009d94:	4603      	mov	r3, r0
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE3endEv>:
      end() noexcept
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f9be 	bl	800a128 <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE4dataEv>
 8009dac:	4603      	mov	r3, r0
 8009dae:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009db2:	4618      	mov	r0, r3
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EE5beginEv>:
      begin() const noexcept
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f9bd 	bl	800a142 <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EE4dataEv>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EE3endEv>:
      end() const noexcept
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f9b1 	bl	800a142 <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EE4dataEv>
 8009de0:	4603      	mov	r3, r0
 8009de2:	3360      	adds	r3, #96	; 0x60
 8009de4:	4618      	mov	r0, r3
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <_ZNKSt5arrayItLj3EE5beginEv>:
      begin() const noexcept
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f935 	bl	800a064 <_ZNKSt5arrayItLj3EE4dataEv>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <_ZNKSt5arrayItLj3EE3endEv>:
      end() const noexcept
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f929 	bl	800a064 <_ZNKSt5arrayItLj3EE4dataEv>
 8009e12:	4603      	mov	r3, r0
 8009e14:	3306      	adds	r3, #6
 8009e16:	4618      	mov	r0, r3
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <_ZSt7forwardIRN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1IRS1_Lb1EEEOT_>:
			      __not_<is_same<optional<_Tp>, decay_t<_Up>>>,
			      __not_<is_same<in_place_t, decay_t<_Up>>>,
			      is_constructible<_Tp, _Up&&>,
			      is_convertible<_Up&&, _Tp>
			      >::value, bool> = true>
      constexpr optional(_Up&& __t)
 8009e34:	b5b0      	push	{r4, r5, r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
        : _Base(std::in_place, std::forward<_Up>(__t)) { }
 8009e3e:	687c      	ldr	r4, [r7, #4]
 8009e40:	6838      	ldr	r0, [r7, #0]
 8009e42:	f7ff ffec 	bl	8009e1e <_ZSt7forwardIRN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009e46:	4603      	mov	r3, r0
 8009e48:	461a      	mov	r2, r3
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f000 f99e 	bl	800a18e <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusEEC1IJRS1_ELb0EEESt10in_place_tDpOT_>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bdb0      	pop	{r4, r5, r7, pc}

08009e5c <_ZNSt8optionalIN7LTC681110TempStatusEEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	7039      	strb	r1, [r7, #0]
	: _Base(nullopt) { }
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4611      	mov	r1, r2
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 f9b2 	bl	800a1d4 <_ZNSt14_Optional_baseIN7LTC681110TempStatusEEC1ESt9nullopt_t>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <_ZSt7forwardIRN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4618      	mov	r0, r3
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <_ZNSt8optionalIN7LTC681110TempStatusEEC1IRS1_Lb1EEEOT_>:
      constexpr optional(_Up&& __t)
 8009e90:	b5b0      	push	{r4, r5, r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
        : _Base(std::in_place, std::forward<_Up>(__t)) { }
 8009e9a:	687c      	ldr	r4, [r7, #4]
 8009e9c:	6838      	ldr	r0, [r7, #0]
 8009e9e:	f7ff ffec 	bl	8009e7a <_ZSt7forwardIRN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 f9b9 	bl	800a220 <_ZNSt14_Optional_baseIN7LTC681110TempStatusEEC1IJRS1_ELb0EEESt10in_place_tDpOT_>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bdb0      	pop	{r4, r5, r7, pc}

08009eb8 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE3endEv>:
      end() noexcept
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff fea5 	bl	8009c10 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EE4dataEv>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	3360      	adds	r3, #96	; 0x60
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EEixEj>:
      operator[](size_type __n) const noexcept
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 f9b2 	bl	800a24a <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj12EE6_S_refERA12_KS2_j>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <_ZNSt5arrayIhLj6EEixEj>:
      operator[](size_type __n) noexcept
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 f9b2 	bl	800a268 <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>
 8009f04:	4603      	mov	r3, r0
 8009f06:	4618      	mov	r0, r3
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <_ZNSt14__array_traitsIhLj6EE6_S_ptrERA6_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <_ZNKSt5arrayIhLj6EE4dataEv>:
      data() const noexcept
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7ff ffed 	bl	8009f0e <_ZNSt14__array_traitsIhLj6EE6_S_ptrERA6_Kh>
 8009f34:	4603      	mov	r3, r0
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
	...

08009f40 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>:
    constexpr static uint16_t PEC15Calc(const std::array<T, S>& data, size_t size = S * sizeof(T)) {
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
        uint16_t PEC{ 16 }, addr{ 0 };
 8009f4a:	2310      	movs	r3, #16
 8009f4c:	82fb      	strh	r3, [r7, #22]
 8009f4e:	2300      	movs	r3, #0
 8009f50:	827b      	strh	r3, [r7, #18]
        auto serialized_data = reinterpret_cast<uint8_t const *>(data.data());
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7ff ffe6 	bl	8009f24 <_ZNKSt5arrayIhLj6EE4dataEv>
 8009f58:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; i < size; ++i) {
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	757b      	strb	r3, [r7, #21]
 8009f5e:	7d7b      	ldrb	r3, [r7, #21]
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d91b      	bls.n	8009f9e <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x5e>
            addr = (PEC >> 7 ^ serialized_data[i]) & 0xFF;
 8009f66:	8afb      	ldrh	r3, [r7, #22]
 8009f68:	11db      	asrs	r3, r3, #7
 8009f6a:	b21a      	sxth	r2, r3
 8009f6c:	7d7b      	ldrb	r3, [r7, #21]
 8009f6e:	68f9      	ldr	r1, [r7, #12]
 8009f70:	440b      	add	r3, r1
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	b21b      	sxth	r3, r3
 8009f76:	4053      	eors	r3, r2
 8009f78:	b21b      	sxth	r3, r3
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	827b      	strh	r3, [r7, #18]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009f80:	8afb      	ldrh	r3, [r7, #22]
 8009f82:	021b      	lsls	r3, r3, #8
 8009f84:	b21a      	sxth	r2, r3
 8009f86:	8a7b      	ldrh	r3, [r7, #18]
 8009f88:	4908      	ldr	r1, [pc, #32]	; (8009fac <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x6c>)
 8009f8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009f8e:	b21b      	sxth	r3, r3
 8009f90:	4053      	eors	r3, r2
 8009f92:	b21b      	sxth	r3, r3
 8009f94:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 8009f96:	7d7b      	ldrb	r3, [r7, #21]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	757b      	strb	r3, [r7, #21]
 8009f9c:	e7df      	b.n	8009f5e <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x1e>
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8009f9e:	8afb      	ldrh	r3, [r7, #22]
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	b29b      	uxth	r3, r3
    }
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	0800d8c8 	.word	0x0800d8c8

08009fb0 <_ZNSt5arrayIN7LTC68118RegisterIhEELj12EEixEj>:
      operator[](size_type __n) noexcept
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f960 	bl	800a284 <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj12EE6_S_refERA12_KS2_j>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009fce:	b480      	push	{r7}
 8009fd0:	b083      	sub	sp, #12
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	4413      	add	r3, r2
 8009fde:	4618      	mov	r0, r3
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <_ZSt6fill_nIPN7LTC68118RegisterIhEEjS2_ET_S4_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 f953 	bl	800a2a2 <_ZSt12__niter_baseIPN7LTC68118RegisterIhEEET_S4_>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	68b9      	ldr	r1, [r7, #8]
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f958 	bl	800a2b8 <_ZSt10__fill_n_aIPN7LTC68118RegisterIhEEjS2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES9_T0_RKS7_>
 800a008:	4603      	mov	r3, r0
    }
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <_ZNSt14__array_traitsIN7LTC681113RegisterGroupItEELj4EE6_S_refERA4_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a012:	b480      	push	{r7}
 800a014:	b083      	sub	sp, #12
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2264      	movs	r2, #100	; 0x64
 800a020:	fb02 f303 	mul.w	r3, r2, r3
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	4413      	add	r3, r2
 800a028:	4618      	mov	r0, r3
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <_ZNSt5arrayIN7LTC68118RegisterItEELj12EE3endEv>:
      end() noexcept
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7ff fd65 	bl	8009b0c <_ZNSt5arrayIN7LTC68118RegisterItEELj12EE4dataEv>
 800a042:	4603      	mov	r3, r0
 800a044:	3360      	adds	r3, #96	; 0x60
 800a046:	4618      	mov	r0, r3
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <_ZNSt14__array_traitsItLj3EE6_S_ptrERA3_Kt>:
      _S_ptr(const _Type& __t) noexcept
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <_ZNKSt5arrayItLj3EE4dataEv>:
      data() const noexcept
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff ffed 	bl	800a04e <_ZNSt14__array_traitsItLj3EE6_S_ptrERA3_Kt>
 800a074:	4603      	mov	r3, r0
 800a076:	4618      	mov	r0, r3
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj>:
    constexpr static uint16_t PEC15Calc(const std::array<T, S>& data, size_t size = S * sizeof(T)) {
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
        uint16_t PEC{ 16 }, addr{ 0 };
 800a08a:	2310      	movs	r3, #16
 800a08c:	82fb      	strh	r3, [r7, #22]
 800a08e:	2300      	movs	r3, #0
 800a090:	827b      	strh	r3, [r7, #18]
        auto serialized_data = reinterpret_cast<uint8_t const *>(data.data());
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7ff ffe6 	bl	800a064 <_ZNKSt5arrayItLj3EE4dataEv>
 800a098:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; i < size; ++i) {
 800a09a:	2300      	movs	r3, #0
 800a09c:	757b      	strb	r3, [r7, #21]
 800a09e:	7d7b      	ldrb	r3, [r7, #21]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d91b      	bls.n	800a0de <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x5e>
            addr = (PEC >> 7 ^ serialized_data[i]) & 0xFF;
 800a0a6:	8afb      	ldrh	r3, [r7, #22]
 800a0a8:	11db      	asrs	r3, r3, #7
 800a0aa:	b21a      	sxth	r2, r3
 800a0ac:	7d7b      	ldrb	r3, [r7, #21]
 800a0ae:	68f9      	ldr	r1, [r7, #12]
 800a0b0:	440b      	add	r3, r1
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	b21b      	sxth	r3, r3
 800a0b6:	4053      	eors	r3, r2
 800a0b8:	b21b      	sxth	r3, r3
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	827b      	strh	r3, [r7, #18]
            PEC = PEC << 8 ^ crc15Table[addr];
 800a0c0:	8afb      	ldrh	r3, [r7, #22]
 800a0c2:	021b      	lsls	r3, r3, #8
 800a0c4:	b21a      	sxth	r2, r3
 800a0c6:	8a7b      	ldrh	r3, [r7, #18]
 800a0c8:	4908      	ldr	r1, [pc, #32]	; (800a0ec <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x6c>)
 800a0ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a0ce:	b21b      	sxth	r3, r3
 800a0d0:	4053      	eors	r3, r2
 800a0d2:	b21b      	sxth	r3, r3
 800a0d4:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 800a0d6:	7d7b      	ldrb	r3, [r7, #21]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	757b      	strb	r3, [r7, #21]
 800a0dc:	e7df      	b.n	800a09e <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x1e>
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 800a0de:	8afb      	ldrh	r3, [r7, #22]
 800a0e0:	005b      	lsls	r3, r3, #1
 800a0e2:	b29b      	uxth	r3, r3
    }
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3718      	adds	r7, #24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	0800d8c8 	.word	0x0800d8c8

0800a0f0 <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1EEC1Ev>:
      constexpr _Optional_payload()
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
	: _M_empty() {}
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	751a      	strb	r2, [r3, #20]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusEEC1ESt9nullopt_t>:
      constexpr _Optional_base(nullopt_t) noexcept
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	7039      	strb	r1, [r7, #0]
      { }
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4618      	mov	r0, r3
 800a11a:	f7ff ffe9 	bl	800a0f0 <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1EEC1Ev>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4618      	mov	r0, r3
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <_ZNSt5arrayIN7LTC681113RegisterGroupItEELj4EE4dataEv>:
      data() noexcept
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4618      	mov	r0, r3
 800a134:	f000 f8df 	bl	800a2f6 <_ZNSt14__array_traitsIN7LTC681113RegisterGroupItEELj4EE6_S_ptrERA4_KS2_>
 800a138:	4603      	mov	r3, r0
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EE4dataEv>:
      data() const noexcept
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7ff fcea 	bl	8009b26 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj12EE6_S_ptrERA12_KS2_>
 800a152:	4603      	mov	r3, r0
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1EEC1IJRS1_EEESt10in_place_tDpOT_>:
      constexpr _Optional_payload(in_place_t, _Args&&... __args)
 800a15c:	b5b0      	push	{r4, r5, r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	7239      	strb	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
	: _M_payload(std::forward<_Args>(__args)...),
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7ff fe58 	bl	8009e1e <_ZSt7forwardIRN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a16e:	4602      	mov	r2, r0
	  _M_engaged(true)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	461c      	mov	r4, r3
 800a174:	4615      	mov	r5, r2
 800a176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	6023      	str	r3, [r4, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2201      	movs	r2, #1
 800a182:	751a      	strb	r2, [r3, #20]
      {}
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bdb0      	pop	{r4, r5, r7, pc}

0800a18e <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusEEC1IJRS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800a18e:	b5b0      	push	{r4, r5, r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	60f8      	str	r0, [r7, #12]
 800a196:	7239      	strb	r1, [r7, #8]
 800a198:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800a19a:	68fc      	ldr	r4, [r7, #12]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff fe3e 	bl	8009e1e <_ZSt7forwardIRN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f7ff ffd7 	bl	800a15c <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1EEC1IJRS1_EEESt10in_place_tDpOT_>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bdb0      	pop	{r4, r5, r7, pc}

0800a1b8 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1EEC1Ev>:
      constexpr _Optional_payload()
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
	: _M_empty() {}
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	741a      	strb	r2, [r3, #16]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <_ZNSt14_Optional_baseIN7LTC681110TempStatusEEC1ESt9nullopt_t>:
      constexpr _Optional_base(nullopt_t) noexcept
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	7039      	strb	r1, [r7, #0]
      { }
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7ff ffe9 	bl	800a1b8 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1EEC1Ev>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1EEC1IJRS1_EEESt10in_place_tDpOT_>:
      constexpr _Optional_payload(in_place_t, _Args&&... __args)
 800a1f0:	b590      	push	{r4, r7, lr}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	7239      	strb	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
	: _M_payload(std::forward<_Args>(__args)...),
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff fe3c 	bl	8009e7a <_ZSt7forwardIRN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a202:	4602      	mov	r2, r0
	  _M_engaged(true)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	461c      	mov	r4, r3
 800a208:	4613      	mov	r3, r2
 800a20a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a20c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2201      	movs	r2, #1
 800a214:	741a      	strb	r2, [r3, #16]
      {}
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd90      	pop	{r4, r7, pc}

0800a220 <_ZNSt14_Optional_baseIN7LTC681110TempStatusEEC1IJRS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800a220:	b5b0      	push	{r4, r5, r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	7239      	strb	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800a22c:	68fc      	ldr	r4, [r7, #12]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff fe23 	bl	8009e7a <_ZSt7forwardIRN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a234:	4603      	mov	r3, r0
 800a236:	461a      	mov	r2, r3
 800a238:	4629      	mov	r1, r5
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7ff ffd8 	bl	800a1f0 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1EEC1IJRS1_EEESt10in_place_tDpOT_>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bdb0      	pop	{r4, r5, r7, pc}

0800a24a <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj12EE6_S_refERA12_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	4413      	add	r3, r2
 800a25c:	4618      	mov	r0, r3
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	4413      	add	r3, r2
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj12EE6_S_refERA12_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	4413      	add	r3, r2
 800a296:	4618      	mov	r0, r3
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <_ZSt12__niter_baseIPN7LTC68118RegisterIhEEET_S4_>:
    __niter_base(_Iterator __it)
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <_ZSt10__fill_n_aIPN7LTC68118RegisterIhEEjS2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES9_T0_RKS7_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 800a2b8:	b480      	push	{r7}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
      for (__decltype(__n + 0) __niter = __n;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, ++__first)
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00c      	beq.n	800a2e8 <_ZSt10__fill_n_aIPN7LTC68118RegisterIhEEjS2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES9_T0_RKS7_+0x30>
	*__first = __value;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	6811      	ldr	r1, [r2, #0]
 800a2d4:	6852      	ldr	r2, [r2, #4]
 800a2d6:	6019      	str	r1, [r3, #0]
 800a2d8:	605a      	str	r2, [r3, #4]
      for (__decltype(__n + 0) __niter = __n;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e7ef      	b.n	800a2c8 <_ZSt10__fill_n_aIPN7LTC68118RegisterIhEEjS2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES9_T0_RKS7_+0x10>
      return __first;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
    }
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <_ZNSt14__array_traitsIN7LTC681113RegisterGroupItEELj4EE6_S_ptrERA4_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a316:	f000 f879 	bl	800a40c <BSP_SD_IsDetected>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d001      	beq.n	800a324 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e012      	b.n	800a34a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a324:	480b      	ldr	r0, [pc, #44]	; (800a354 <BSP_SD_Init+0x48>)
 800a326:	f7f8 fc0f 	bl	8002b48 <HAL_SD_Init>
 800a32a:	4603      	mov	r3, r0
 800a32c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a32e:	79fb      	ldrb	r3, [r7, #7]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d109      	bne.n	800a348 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a334:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a338:	4806      	ldr	r0, [pc, #24]	; (800a354 <BSP_SD_Init+0x48>)
 800a33a:	f7f9 f9fd 	bl	8003738 <HAL_SD_ConfigWideBusOperation>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a348:	79fb      	ldrb	r3, [r7, #7]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20000114 	.word	0x20000114

0800a358 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b088      	sub	sp, #32
 800a35c:	af02      	add	r7, sp, #8
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	68f9      	ldr	r1, [r7, #12]
 800a374:	4806      	ldr	r0, [pc, #24]	; (800a390 <BSP_SD_ReadBlocks+0x38>)
 800a376:	f7f8 fc77 	bl	8002c68 <HAL_SD_ReadBlocks>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800a384:	7dfb      	ldrb	r3, [r7, #23]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20000114 	.word	0x20000114

0800a394 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b088      	sub	sp, #32
 800a398:	af02      	add	r7, sp, #8
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	68f9      	ldr	r1, [r7, #12]
 800a3b0:	4806      	ldr	r0, [pc, #24]	; (800a3cc <BSP_SD_WriteBlocks+0x38>)
 800a3b2:	f7f8 fe51 	bl	8003058 <HAL_SD_WriteBlocks>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800a3c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20000114 	.word	0x20000114

0800a3d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a3d4:	4805      	ldr	r0, [pc, #20]	; (800a3ec <BSP_SD_GetCardState+0x1c>)
 800a3d6:	f7f9 fa2b 	bl	8003830 <HAL_SD_GetCardState>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	bf14      	ite	ne
 800a3e0:	2301      	movne	r3, #1
 800a3e2:	2300      	moveq	r3, #0
 800a3e4:	b2db      	uxtb	r3, r3
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000114 	.word	0x20000114

0800a3f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a3f8:	6879      	ldr	r1, [r7, #4]
 800a3fa:	4803      	ldr	r0, [pc, #12]	; (800a408 <BSP_SD_GetCardInfo+0x18>)
 800a3fc:	f7f9 f970 	bl	80036e0 <HAL_SD_GetCardInfo>
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	20000114 	.word	0x20000114

0800a40c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a412:	2301      	movs	r3, #1
 800a414:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800a416:	f000 f825 	bl	800a464 <BSP_PlatformIsDetected>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a420:	2300      	movs	r3, #0
 800a422:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	b2db      	uxtb	r3, r3
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a430:	b580      	push	{r7, lr}
 800a432:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a434:	4904      	ldr	r1, [pc, #16]	; (800a448 <MX_FATFS_Init+0x18>)
 800a436:	4805      	ldr	r0, [pc, #20]	; (800a44c <MX_FATFS_Init+0x1c>)
 800a438:	f7fe fc5e 	bl	8008cf8 <FATFS_LinkDriver>
 800a43c:	4603      	mov	r3, r0
 800a43e:	461a      	mov	r2, r3
 800a440:	4b03      	ldr	r3, [pc, #12]	; (800a450 <MX_FATFS_Init+0x20>)
 800a442:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a444:	bf00      	nop
 800a446:	bd80      	pop	{r7, pc}
 800a448:	2000027c 	.word	0x2000027c
 800a44c:	0800dac8 	.word	0x0800dac8
 800a450:	20000278 	.word	0x20000278

0800a454 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a454:	b480      	push	{r7}
 800a456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a458:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a46a:	2301      	movs	r3, #1
 800a46c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a46e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a472:	4806      	ldr	r0, [pc, #24]	; (800a48c <BSP_PlatformIsDetected+0x28>)
 800a474:	f7f7 fb60 	bl	8001b38 <HAL_GPIO_ReadPin>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a47e:	2300      	movs	r3, #0
 800a480:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800a482:	79fb      	ldrb	r3, [r7, #7]
}  
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	40020000 	.word	0x40020000

0800a490 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(__m | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	6039      	str	r1, [r7, #0]
 800a49a:	71fb      	strb	r3, [r7, #7]
    return memory_order(__m & int(__mod));
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	b25a      	sxtb	r2, r3
 800a4a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	b25b      	sxtb	r3, r3
 800a4a8:	b2db      	uxtb	r3, r3
  }
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70fb      	strb	r3, [r7, #3]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	78fa      	ldrb	r2, [r7, #3]
 800a4c6:	4611      	mov	r1, r2
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f002 f8d0 	bl	800c66e <_ZNSt13__atomic_baseIbEC1Eb>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <_ZNSt6atomicIbEaSEb>:

    bool
    operator=(bool __i) noexcept
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	70fb      	strb	r3, [r7, #3]
    { return _M_base.operator=(__i); }
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	78fa      	ldrb	r2, [r7, #3]
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f002 f8cf 	bl	800c68e <_ZNSt13__atomic_baseIbEaSEb>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	460b      	mov	r3, r1
 800a504:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	60fb      	str	r3, [r7, #12]
 800a50a:	78fb      	ldrb	r3, [r7, #3]
 800a50c:	72fb      	strb	r3, [r7, #11]
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b = __m & __memory_order_mask;
 800a50e:	7afb      	ldrb	r3, [r7, #11]
 800a510:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a514:	4618      	mov	r0, r3
 800a516:	f7ff ffbb 	bl	800a490 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800a51a:	4603      	mov	r3, r0
 800a51c:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f3bf 8f5b 	dmb	ish
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	f3bf 8f5b 	dmb	ish
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bf14      	ite	ne
 800a530:	2301      	movne	r3, #1
 800a532:	2300      	moveq	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <_ZNSt6atomicImEC1Em>:
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 fbc1 	bl	800acd4 <_ZNSt13__atomic_baseImEC2Em>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4618      	mov	r0, r3
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <_ZN6StatusC1Eh>:
    static constexpr int16_t kMaxChargeTemp{ 4400 };
    static constexpr uint16_t kLimpMinVoltage{ 34000 };
    static constexpr float kMaxCurrent{ 180.0f };
    static constexpr float kAccuMinVoltage{ 490.0f };

    Status(uint8_t const op_mode) : op_mode { op_mode } {
 800a55c:	b590      	push	{r4, r7, lr}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	70fb      	strb	r3, [r7, #3]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2100      	movs	r1, #0
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7ff ffe6 	bl	800a53e <_ZNSt6atomicImEC1Em>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	3304      	adds	r3, #4
 800a576:	2224      	movs	r2, #36	; 0x24
 800a578:	2100      	movs	r1, #0
 800a57a:	4618      	mov	r0, r3
 800a57c:	f003 f835 	bl	800d5ea <memset>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	78fa      	ldrb	r2, [r7, #3]
 800a594:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	332c      	adds	r3, #44	; 0x2c
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	605a      	str	r2, [r3, #4]
 800a5aa:	609a      	str	r2, [r3, #8]
 800a5ac:	731a      	strb	r2, [r3, #12]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a0a      	ldr	r2, [pc, #40]	; (800a5dc <_ZN6StatusC1Eh+0x80>)
 800a5b2:	f103 0439 	add.w	r4, r3, #57	; 0x39
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a5ba:	6020      	str	r0, [r4, #0]
 800a5bc:	6061      	str	r1, [r4, #4]
 800a5be:	60a2      	str	r2, [r4, #8]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	7323      	strb	r3, [r4, #12]
        OpenPre();
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f843 	bl	800a650 <_ZN6Status7OpenPreEv>
        OpenAIR();
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f882 	bl	800a6d4 <_ZN6Status7OpenAIREv>
    };
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd90      	pop	{r4, r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	0800d7f0 	.word	0x0800d7f0

0800a5e0 <_ZNK6Status9getOpModeEv>:

    [[nodiscard]] uint8_t getOpMode(void) const noexcept {
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
        return op_mode;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    }
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	370c      	adds	r7, #12
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <_ZN6Status9setOpModeEh>:

    void setOpMode(uint8_t const op_mode) noexcept {
 800a5fa:	b480      	push	{r7}
 800a5fc:	b083      	sub	sp, #12
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	460b      	mov	r3, r1
 800a604:	70fb      	strb	r3, [r7, #3]
        this->op_mode = op_mode;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	78fa      	ldrb	r2, [r7, #3]
 800a60a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    }
 800a60e:	bf00      	nop
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
	...

0800a61c <_ZN6Status8ClosePreEv>:

    /* Energize Pre-charge Relay. */
    void ClosePre(void) noexcept {
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // PRECHARGE
 800a624:	2201      	movs	r2, #1
 800a626:	2101      	movs	r1, #1
 800a628:	4807      	ldr	r0, [pc, #28]	; (800a648 <_ZN6Status8ClosePreEv+0x2c>)
 800a62a:	f7f7 fa9d 	bl	8001b68 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // LED1
 800a62e:	2201      	movs	r2, #1
 800a630:	2102      	movs	r1, #2
 800a632:	4806      	ldr	r0, [pc, #24]	; (800a64c <_ZN6Status8ClosePreEv+0x30>)
 800a634:	f7f7 fa98 	bl	8001b68 <HAL_GPIO_WritePin>
        precharge_flag = true;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	40020400 	.word	0x40020400
 800a64c:	40020800 	.word	0x40020800

0800a650 <_ZN6Status7OpenPreEv>:

    /* De-energize Pre-charge Relay. */
    void OpenPre(void) noexcept {
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // PRECHARGE
 800a658:	2200      	movs	r2, #0
 800a65a:	2101      	movs	r1, #1
 800a65c:	4807      	ldr	r0, [pc, #28]	; (800a67c <_ZN6Status7OpenPreEv+0x2c>)
 800a65e:	f7f7 fa83 	bl	8001b68 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // LED1
 800a662:	2200      	movs	r2, #0
 800a664:	2102      	movs	r1, #2
 800a666:	4806      	ldr	r0, [pc, #24]	; (800a680 <_ZN6Status7OpenPreEv+0x30>)
 800a668:	f7f7 fa7e 	bl	8001b68 <HAL_GPIO_WritePin>
        precharge_flag = false;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	40020400 	.word	0x40020400
 800a680:	40020800 	.word	0x40020800

0800a684 <_ZNK6Status16getPrechargeFlagEv>:

    [[nodiscard]] bool getPrechargeFlag(void) const noexcept {
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
        return precharge_flag;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    }
 800a692:	4618      	mov	r0, r3
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
	...

0800a6a0 <_ZN6Status8CloseAIREv>:

    /* Energize AIR (Accumulator Indicator Relay). */
    void CloseAIR(void) noexcept {
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // BMSRelay
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	2102      	movs	r1, #2
 800a6ac:	4807      	ldr	r0, [pc, #28]	; (800a6cc <_ZN6Status8CloseAIREv+0x2c>)
 800a6ae:	f7f7 fa5b 	bl	8001b68 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // LED2
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	2104      	movs	r1, #4
 800a6b6:	4806      	ldr	r0, [pc, #24]	; (800a6d0 <_ZN6Status8CloseAIREv+0x30>)
 800a6b8:	f7f7 fa56 	bl	8001b68 <HAL_GPIO_WritePin>
        AIR_flag = true;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
 800a6c4:	bf00      	nop
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	40020400 	.word	0x40020400
 800a6d0:	40020800 	.word	0x40020800

0800a6d4 <_ZN6Status7OpenAIREv>:

    /* De-energize AIR (Accumulator Indicator Relay). */
    void OpenAIR(void) noexcept {
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // BMSRelay
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2102      	movs	r1, #2
 800a6e0:	4807      	ldr	r0, [pc, #28]	; (800a700 <_ZN6Status7OpenAIREv+0x2c>)
 800a6e2:	f7f7 fa41 	bl	8001b68 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // LED2
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	2104      	movs	r1, #4
 800a6ea:	4806      	ldr	r0, [pc, #24]	; (800a704 <_ZN6Status7OpenAIREv+0x30>)
 800a6ec:	f7f7 fa3c 	bl	8001b68 <HAL_GPIO_WritePin>
        AIR_flag = false;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	40020400 	.word	0x40020400
 800a704:	40020800 	.word	0x40020800

0800a708 <_ZNK6Status10getAIRFlagEv>:

    [[nodiscard]] bool getAIRFlag(void) const noexcept {
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
        return AIR_flag;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    }
 800a716:	4618      	mov	r0, r3
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <_ZN6Status7isErrorENS_5ErrorEb>:

    bool isError(Error const e, bool const error) noexcept {
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	460b      	mov	r3, r1
 800a72c:	70fb      	strb	r3, [r7, #3]
 800a72e:	4613      	mov	r3, r2
 800a730:	70bb      	strb	r3, [r7, #2]
        if (error) {
 800a732:	78bb      	ldrb	r3, [r7, #2]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d03c      	beq.n	800a7b2 <_ZN6Status7isErrorENS_5ErrorEb+0x90>
            if (++error_counters[e] > error_limits[e]) {
 800a738:	78fb      	ldrb	r3, [r7, #3]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	441a      	add	r2, r3
 800a73e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800a742:	3201      	adds	r2, #1
 800a744:	b2d1      	uxtb	r1, r2
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	441a      	add	r2, r3
 800a74a:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	4413      	add	r3, r2
 800a752:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	6879      	ldr	r1, [r7, #4]
 800a75a:	440b      	add	r3, r1
 800a75c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a760:	429a      	cmp	r2, r3
 800a762:	bf8c      	ite	hi
 800a764:	2301      	movhi	r3, #1
 800a766:	2300      	movls	r3, #0
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d034      	beq.n	800a7d8 <_ZN6Status7isErrorENS_5ErrorEb+0xb6>
                if (e == Limping)
 800a76e:	78fb      	ldrb	r3, [r7, #3]
 800a770:	2b03      	cmp	r3, #3
 800a772:	d10d      	bne.n	800a790 <_ZN6Status7isErrorENS_5ErrorEb+0x6e>
                    error_counters[e] += 9; // Add some amount to the counter when limping so that it takes some time to return to non-limping
 800a774:	78fb      	ldrb	r3, [r7, #3]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	4413      	add	r3, r2
 800a77a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	3209      	adds	r2, #9
 800a782:	b2d1      	uxtb	r1, r2
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	4413      	add	r3, r2
 800a788:	460a      	mov	r2, r1
 800a78a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a78e:	e023      	b.n	800a7d8 <_ZN6Status7isErrorENS_5ErrorEb+0xb6>
                else {
                    GoToSafeState(e); // This function call is the most glaring, ugly side-effect in the entire BMS. Should not be hidden away like this.
 800a790:	78fb      	ldrb	r3, [r7, #3]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f83e 	bl	800a816 <_ZN6Status13GoToSafeStateENS_5ErrorE>
                    error_counters[e] = error_limits[e];
 800a79a:	78fa      	ldrb	r2, [r7, #3]
 800a79c:	78fb      	ldrb	r3, [r7, #3]
 800a79e:	6879      	ldr	r1, [r7, #4]
 800a7a0:	440a      	add	r2, r1
 800a7a2:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	460a      	mov	r2, r1
 800a7ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a7b0:	e012      	b.n	800a7d8 <_ZN6Status7isErrorENS_5ErrorEb+0xb6>
                }
            }
        } else if (error_counters[e] > 0) {
 800a7b2:	78fb      	ldrb	r3, [r7, #3]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00b      	beq.n	800a7d8 <_ZN6Status7isErrorENS_5ErrorEb+0xb6>
            --error_counters[e];
 800a7c0:	78fb      	ldrb	r3, [r7, #3]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	441a      	add	r2, r3
 800a7c6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800a7ca:	3a01      	subs	r2, #1
 800a7cc:	b2d1      	uxtb	r1, r2
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	460a      	mov	r2, r1
 800a7d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        }

        return error;
 800a7d8:	78bb      	ldrb	r3, [r7, #2]
    }
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <_ZNK6Status11getPECErrorEv>:

    [[nodiscard]] uint32_t getPECError(void) const noexcept {
 800a7e2:	b480      	push	{r7}
 800a7e4:	b083      	sub	sp, #12
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
        return error_counters[PECError];
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
    }
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <_ZNK6Status12getLastErrorEv>:

    [[nodiscard]] uint8_t getLastError(void) const noexcept {
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
        return last_error;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    }
 800a80a:	4618      	mov	r0, r3
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <_ZN6Status13GoToSafeStateENS_5ErrorE>:
                [OverTemp] = 2, [UnderTemp] = 2, [OverCurrent] = 2,
                [OverPower] = 2, [Extern] = 2, [PECError] = 2,
                [AccuUnderVoltage] = 2, [IVTLost] = 1, [OverTempCharging] = 2
    };

    void GoToSafeState(Error const e) noexcept {
 800a816:	b580      	push	{r7, lr}
 800a818:	b082      	sub	sp, #8
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	460b      	mov	r3, r1
 800a820:	70fb      	strb	r3, [r7, #3]
#if BMS_RELAY_CTRL_BYPASS
        // Do nothing.
#elif SKIP_PEC_ERROR_ACTIONS
        if (e != PECError) {
 800a822:	78fb      	ldrb	r3, [r7, #3]
 800a824:	2b09      	cmp	r3, #9
 800a826:	d005      	beq.n	800a834 <_ZN6Status13GoToSafeStateENS_5ErrorE+0x1e>
            OpenAIR();
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff ff53 	bl	800a6d4 <_ZN6Status7OpenAIREv>
            OpenPre();
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7ff ff0e 	bl	800a650 <_ZN6Status7OpenPreEv>
        OpenAIR();
        OpenPRE();
#endif

#if STOP_CORE_ON_SAFE_STATE
        op_mode &= ~Core;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a83a:	f023 0301 	bic.w	r3, r3, #1
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
#endif
#if START_DEBUG_ON_SAFE_STATE
        op_mode |= Debug;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a84c:	f043 0308 	orr.w	r3, r3, #8
 800a850:	b2da      	uxtb	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
#endif
        last_error = e;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	78fa      	ldrb	r2, [r7, #3]
 800a85c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    }
 800a860:	bf00      	nop
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <_ZN4NLG5C1Ettt>:

struct NLG5 {
    /*** Bit definitions in NLG5 Control Bitmap (NLG5_CTLB) ***/
    enum { C_CP_V = 1 << 5, C_C_EL = 1 << 6, C_C_EN = 1 << 7 };

    NLG5(uint16_t const mc_limit = 160, uint16_t const oc_limit = 60, uint16_t const ov_limit = 2990) : mc_limit { mc_limit }, oc_limit { oc_limit }, ov_limit { ov_limit } {};
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	4608      	mov	r0, r1
 800a872:	4611      	mov	r1, r2
 800a874:	461a      	mov	r2, r3
 800a876:	4603      	mov	r3, r0
 800a878:	817b      	strh	r3, [r7, #10]
 800a87a:	460b      	mov	r3, r1
 800a87c:	813b      	strh	r3, [r7, #8]
 800a87e:	4613      	mov	r3, r2
 800a880:	80fb      	strh	r3, [r7, #6]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	897a      	ldrh	r2, [r7, #10]
 800a886:	805a      	strh	r2, [r3, #2]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	893a      	ldrh	r2, [r7, #8]
 800a88c:	809a      	strh	r2, [r3, #4]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	88fa      	ldrh	r2, [r7, #6]
 800a892:	80da      	strh	r2, [r3, #6]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	741a      	strb	r2, [r3, #16]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3314      	adds	r3, #20
 800a89e:	2100      	movs	r1, #0
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff fe4c 	bl	800a53e <_ZNSt6atomicImEC1Em>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	3318      	adds	r3, #24
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff fe02 	bl	800a4b6 <_ZNSt6atomicIbEC1Eb>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <_ZN4NLG516SetChargeCurrentEt>:

    void SetChargeCurrent(uint16_t const max_voltage) {
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	807b      	strh	r3, [r7, #2]
        if (max_voltage > kChargerDis)
 800a8c8:	887b      	ldrh	r3, [r7, #2]
 800a8ca:	f24a 3248 	movw	r2, #41800	; 0xa348
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d903      	bls.n	800a8da <_ZN4NLG516SetChargeCurrentEt+0x1e>
            ctrl = 0;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	701a      	strb	r2, [r3, #0]
        else if (max_voltage < kChargerEn)
            ctrl = C_C_EN;
    }
 800a8d8:	e007      	b.n	800a8ea <_ZN4NLG516SetChargeCurrentEt+0x2e>
        else if (max_voltage < kChargerEn)
 800a8da:	887b      	ldrh	r3, [r7, #2]
 800a8dc:	f24a 221b 	movw	r2, #41499	; 0xa21b
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d802      	bhi.n	800a8ea <_ZN4NLG516SetChargeCurrentEt+0x2e>
            ctrl = C_C_EN;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2280      	movs	r2, #128	; 0x80
 800a8e8:	701a      	strb	r2, [r3, #0]
    }
 800a8ea:	bf00      	nop
 800a8ec:	370c      	adds	r7, #12
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <_ZN4NLG54tickEv>:

    void tick() {
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b082      	sub	sp, #8
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
        /* Every fifth time the timeout occurs, ctrl is set to a reset command if charger is in fault state. Otherwise it is set to a charge command.
         * NOTE: It would be nicer if the NLG5 class had a reference to the CAN struct and sent this stuff itself when it was ready. */
        if (++counter >= kChargerEventTimeout) {
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	3314      	adds	r3, #20
 800a902:	4618      	mov	r0, r3
 800a904:	f001 fee3 	bl	800c6ce <_ZNSt13__atomic_baseImEppEv>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b63      	cmp	r3, #99	; 0x63
 800a90c:	bf8c      	ite	hi
 800a90e:	2301      	movhi	r3, #1
 800a910:	2300      	movls	r3, #0
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b00      	cmp	r3, #0
 800a916:	d034      	beq.n	800a982 <_ZN4NLG54tickEv+0x8c>
            /* This code used to check the below condition and put the charger event stuff in an else if
             * I'm not sure if I inverted the condition properly, which is why this comment is here! */
#if OLDCODE
            if ((a_buffer[0] == 136 || a_buffer[0] == 152) && (b_buffer[0] == 136 || b_buffer[0] == 152))
#endif
                if ((a_buffer[0] != 136 && a_buffer[0] != 152) || (b_buffer[0] != 136 && b_buffer[0] != 152)) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	7a1b      	ldrb	r3, [r3, #8]
 800a91c:	2b88      	cmp	r3, #136	; 0x88
 800a91e:	d003      	beq.n	800a928 <_ZN4NLG54tickEv+0x32>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	7a1b      	ldrb	r3, [r3, #8]
 800a924:	2b98      	cmp	r3, #152	; 0x98
 800a926:	d107      	bne.n	800a938 <_ZN4NLG54tickEv+0x42>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	7b1b      	ldrb	r3, [r3, #12]
 800a92c:	2b88      	cmp	r3, #136	; 0x88
 800a92e:	d01c      	beq.n	800a96a <_ZN4NLG54tickEv+0x74>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	7b1b      	ldrb	r3, [r3, #12]
 800a934:	2b98      	cmp	r3, #152	; 0x98
 800a936:	d018      	beq.n	800a96a <_ZN4NLG54tickEv+0x74>
                    if (++event_counter >= 5) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	7c1b      	ldrb	r3, [r3, #16]
 800a93c:	3301      	adds	r3, #1
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	741a      	strb	r2, [r3, #16]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	7c1b      	ldrb	r3, [r3, #16]
 800a948:	2b04      	cmp	r3, #4
 800a94a:	bf8c      	ite	hi
 800a94c:	2301      	movhi	r3, #1
 800a94e:	2300      	movls	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d006      	beq.n	800a964 <_ZN4NLG54tickEv+0x6e>
                        ctrl = NLG5::C_C_EL;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2240      	movs	r2, #64	; 0x40
 800a95a:	701a      	strb	r2, [r3, #0]
                        event_counter = 0;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	741a      	strb	r2, [r3, #16]
 800a962:	e002      	b.n	800a96a <_ZN4NLG54tickEv+0x74>
                    } else {
                        ctrl = NLG5::C_C_EN;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2280      	movs	r2, #128	; 0x80
 800a968:	701a      	strb	r2, [r3, #0]
                    }
                }

            counter = 0;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	3314      	adds	r3, #20
 800a96e:	2100      	movs	r1, #0
 800a970:	4618      	mov	r0, r3
 800a972:	f001 fec4 	bl	800c6fe <_ZNSt13__atomic_baseImEaSEm>
            charger_flag = true;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	3318      	adds	r3, #24
 800a97a:	2101      	movs	r1, #1
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fdab 	bl	800a4d8 <_ZNSt6atomicIbEaSEb>
        }
    }
 800a982:	bf00      	nop
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <_ZN4NLG514isChargerEventEv>:

    bool isChargerEvent() {
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b084      	sub	sp, #16
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
        // Basically working like a 1-item queue.
        bool previous = charger_flag.load();
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3318      	adds	r3, #24
 800a996:	2105      	movs	r1, #5
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fdae 	bl	800a4fa <_ZNKSt6atomicIbE4loadESt12memory_order>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	73fb      	strb	r3, [r7, #15]

        charger_flag = false;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	3318      	adds	r3, #24
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7ff fd95 	bl	800a4d8 <_ZNSt6atomicIbEaSEb>

        return previous;
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]

    }
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <_ZSt27__throw_bad_optional_accessv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	f002 fdd0 	bl	800d560 <abort>

0800a9c0 <_ZN7LTC681116SetDischargeModeENS_13DischargeModeE>:
    void SetDischargeMode(DischargeMode const discharge_mode) noexcept {
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	70fb      	strb	r3, [r7, #3]
        this->discharge_mode = discharge_mode;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	78fa      	ldrb	r2, [r7, #3]
 800a9d0:	711a      	strb	r2, [r3, #4]
    };
 800a9d2:	bf00      	nop
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <_ZNK7LTC681111GetCellDataEv>:
    [[nodiscard]] const auto& GetCellData() const noexcept { return cell_data; };
 800a9de:	b480      	push	{r7}
 800a9e0:	b083      	sub	sp, #12
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	33ce      	adds	r3, #206	; 0xce
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <_ZNK7LTC681111GetTempDataEv>:
    [[nodiscard]] const auto& GetTempData() const noexcept { return temp_data; };
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f203 235e 	addw	r3, r3, #606	; 0x25e
 800aa04:	4618      	mov	r0, r3
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <_ZNK7LTC681111GetSlaveCfgEv>:
    [[nodiscard]] const auto& GetSlaveCfg() const noexcept { return slave_cfg_rx; };
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	336a      	adds	r3, #106	; 0x6a
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <_ZN7PWM_FanC1Eh>:

#include "stm32f4xx_hal.h"

class PWM_Fan {
public:
    PWM_Fan(uint8_t duty_cycle = kFanLowDutyCycle) {
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	701a      	strb	r2, [r3, #0]
        setDutyCycle(duty_cycle);
 800aa3a:	78fb      	ldrb	r3, [r7, #3]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f805 	bl	800aa4e <_ZNK7PWM_Fan12setDutyCycleEh>
    }
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <_ZNK7PWM_Fan12setDutyCycleEh>:

    void setDutyCycle(uint8_t duty_cycle) const noexcept {
 800aa4e:	b480      	push	{r7}
 800aa50:	b083      	sub	sp, #12
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	460b      	mov	r3, r1
 800aa58:	70fb      	strb	r3, [r7, #3]
        if (!manual_mode) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	f083 0301 	eor.w	r3, r3, #1
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00b      	beq.n	800aa80 <_ZNK7PWM_Fan12setDutyCycleEh+0x32>
            if (duty_cycle > kFanDCMax)
 800aa68:	78fb      	ldrb	r3, [r7, #3]
 800aa6a:	2b64      	cmp	r3, #100	; 0x64
 800aa6c:	d901      	bls.n	800aa72 <_ZNK7PWM_Fan12setDutyCycleEh+0x24>
                duty_cycle = kFanDCMax;
 800aa6e:	2364      	movs	r3, #100	; 0x64
 800aa70:	70fb      	strb	r3, [r7, #3]
            else if (duty_cycle < kFanDCMin)
                duty_cycle = kFanDCMin;

            /* PWM period is 20000 cycles, so the duty cycle is:
             * (duty_cycle / 100) * 20000 or, duty_cycle * 200 */
            TIM2->CCR4 = duty_cycle * 200;
 800aa72:	78fb      	ldrb	r3, [r7, #3]
 800aa74:	22c8      	movs	r2, #200	; 0xc8
 800aa76:	fb02 f203 	mul.w	r2, r2, r3
 800aa7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa7e:	641a      	str	r2, [r3, #64]	; 0x40
        }
    }
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <_ZNK7PWM_Fan13calcDutyCycleEs>:

    [[nodiscard]] uint8_t calcDutyCycle(int16_t const max_temp) const noexcept {
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	460b      	mov	r3, r1
 800aa96:	817b      	strh	r3, [r7, #10]
        if (max_temp > kT2DCHighTemp)
 800aa98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aa9c:	f241 7270 	movw	r2, #6000	; 0x1770
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	dd01      	ble.n	800aaa8 <_ZNK7PWM_Fan13calcDutyCycleEs+0x1c>
            return kFanDCMax;
 800aaa4:	2364      	movs	r3, #100	; 0x64
 800aaa6:	e01a      	b.n	800aade <_ZNK7PWM_Fan13calcDutyCycleEs+0x52>
        else if (max_temp < kT2DCLowTemp)
 800aaa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aaac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800aab0:	da01      	bge.n	800aab6 <_ZNK7PWM_Fan13calcDutyCycleEs+0x2a>
            return kFanLowDutyCycle;
 800aab2:	230a      	movs	r3, #10
 800aab4:	e013      	b.n	800aade <_ZNK7PWM_Fan13calcDutyCycleEs+0x52>
        else
            return (max_temp * kT2DC_M) + (kFanLowDutyCycle - kT2DC_M * kT2DCLowTemp);
 800aab6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aac2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800aaec <_ZNK7PWM_Fan13calcDutyCycleEs+0x60>
 800aac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaca:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800aaf0 <_ZNK7PWM_Fan13calcDutyCycleEs+0x64>
 800aace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aad6:	edc7 7a01 	vstr	s15, [r7, #4]
 800aada:	793b      	ldrb	r3, [r7, #4]
 800aadc:	b2db      	uxtb	r3, r3
    };
 800aade:	4618      	mov	r0, r3
 800aae0:	3714      	adds	r7, #20
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	3cb851ec 	.word	0x3cb851ec
 800aaf0:	420c0000 	.word	0x420c0000

0800aaf4 <_ZNK3IVT16prechargeCompareEm>:
    static constexpr uint32_t kMaxDelay{ 500 }; // time in ms
    static constexpr float kPrechargeMinStartVoltage{ 470.0f };
    static constexpr float kPrechargeMaxEndVoltage{ 450.0f };
    static constexpr uint8_t kHysteresis{ 10 };

    int prechargeCompare(uint32_t const sum_of_cells) const {
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	ed2d 8b02 	vpush	{d8}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
        float percentage = U1 * 100 / U2;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f001 fe19 	bl	800c73c <_ZNKSt6atomicIfEcvfEv>
 800ab0a:	eeb0 7a40 	vmov.f32	s14, s0
 800ab0e:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800ac38 <_ZNK3IVT16prechargeCompareEm+0x144>
 800ab12:	ee27 8a27 	vmul.f32	s16, s14, s15
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f001 fe0e 	bl	800c73c <_ZNKSt6atomicIfEcvfEv>
 800ab20:	eeb0 7a40 	vmov.f32	s14, s0
 800ab24:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800ab28:	edc7 7a05 	vstr	s15, [r7, #20]
        float match_percentage = U2 * 100 / sum_of_cells - 100;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3304      	adds	r3, #4
 800ab30:	4618      	mov	r0, r3
 800ab32:	f001 fe03 	bl	800c73c <_ZNKSt6atomicIfEcvfEv>
 800ab36:	eeb0 7a40 	vmov.f32	s14, s0
 800ab3a:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800ac38 <_ZNK3IVT16prechargeCompareEm+0x144>
 800ab3e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	ee07 3a90 	vmov	s15, r3
 800ab48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab50:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800ac38 <_ZNK3IVT16prechargeCompareEm+0x144>
 800ab54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab58:	edc7 7a04 	vstr	s15, [r7, #16]
        bool voltage_match = match_percentage < kHysteresis && match_percentage > -kHysteresis;
 800ab5c:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ab64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab6c:	d50a      	bpl.n	800ab84 <_ZNK3IVT16prechargeCompareEm+0x90>
 800ab6e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab72:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800ab76:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7e:	dd01      	ble.n	800ab84 <_ZNK3IVT16prechargeCompareEm+0x90>
 800ab80:	2301      	movs	r3, #1
 800ab82:	e000      	b.n	800ab86 <_ZNK3IVT16prechargeCompareEm+0x92>
 800ab84:	2300      	movs	r3, #0
 800ab86:	73fb      	strb	r3, [r7, #15]

        if (percentage >= 95 && voltage_match && U1 > kPrechargeMinStartVoltage && U2 > kPrechargeMinStartVoltage)
 800ab88:	edd7 7a05 	vldr	s15, [r7, #20]
 800ab8c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800ac3c <_ZNK3IVT16prechargeCompareEm+0x148>
 800ab90:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab98:	db1f      	blt.n	800abda <_ZNK3IVT16prechargeCompareEm+0xe6>
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d01c      	beq.n	800abda <_ZNK3IVT16prechargeCompareEm+0xe6>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f001 fdca 	bl	800c73c <_ZNKSt6atomicIfEcvfEv>
 800aba8:	eeb0 7a40 	vmov.f32	s14, s0
 800abac:	eddf 7a24 	vldr	s15, [pc, #144]	; 800ac40 <_ZNK3IVT16prechargeCompareEm+0x14c>
 800abb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb8:	dd0f      	ble.n	800abda <_ZNK3IVT16prechargeCompareEm+0xe6>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	3304      	adds	r3, #4
 800abbe:	4618      	mov	r0, r3
 800abc0:	f001 fdbc 	bl	800c73c <_ZNKSt6atomicIfEcvfEv>
 800abc4:	eeb0 7a40 	vmov.f32	s14, s0
 800abc8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800ac40 <_ZNK3IVT16prechargeCompareEm+0x14c>
 800abcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd4:	dd01      	ble.n	800abda <_ZNK3IVT16prechargeCompareEm+0xe6>
 800abd6:	2301      	movs	r3, #1
 800abd8:	e000      	b.n	800abdc <_ZNK3IVT16prechargeCompareEm+0xe8>
 800abda:	2300      	movs	r3, #0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <_ZNK3IVT16prechargeCompareEm+0xf0>
            return Charged;
 800abe0:	2300      	movs	r3, #0
 800abe2:	e022      	b.n	800ac2a <_ZNK3IVT16prechargeCompareEm+0x136>
        else if (U1 < kPrechargeMaxEndVoltage || U2 < kPrechargeMaxEndVoltage)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f001 fda8 	bl	800c73c <_ZNKSt6atomicIfEcvfEv>
 800abec:	eeb0 7a40 	vmov.f32	s14, s0
 800abf0:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ac44 <_ZNK3IVT16prechargeCompareEm+0x150>
 800abf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abfc:	d40d      	bmi.n	800ac1a <_ZNK3IVT16prechargeCompareEm+0x126>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	3304      	adds	r3, #4
 800ac02:	4618      	mov	r0, r3
 800ac04:	f001 fd9a 	bl	800c73c <_ZNKSt6atomicIfEcvfEv>
 800ac08:	eeb0 7a40 	vmov.f32	s14, s0
 800ac0c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ac44 <_ZNK3IVT16prechargeCompareEm+0x150>
 800ac10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac18:	d501      	bpl.n	800ac1e <_ZNK3IVT16prechargeCompareEm+0x12a>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e000      	b.n	800ac20 <_ZNK3IVT16prechargeCompareEm+0x12c>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <_ZNK3IVT16prechargeCompareEm+0x134>
            return NotCharged;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e000      	b.n	800ac2a <_ZNK3IVT16prechargeCompareEm+0x136>
        else
            return Hysteresis;
 800ac28:	2302      	movs	r3, #2
    }
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3718      	adds	r7, #24
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	ecbd 8b02 	vpop	{d8}
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	42c80000 	.word	0x42c80000
 800ac3c:	42be0000 	.word	0x42be0000
 800ac40:	43eb0000 	.word	0x43eb0000
 800ac44:	43e10000 	.word	0x43e10000

0800ac48 <_ZNK3IVT6isLostEv>:

    bool isLost() const {
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
        return tick > kMaxDelay;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	330c      	adds	r3, #12
 800ac54:	4618      	mov	r0, r3
 800ac56:	f001 fd80 	bl	800c75a <_ZNKSt13__atomic_baseImEcvmEv>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ac60:	bf8c      	ite	hi
 800ac62:	2301      	movhi	r3, #1
 800ac64:	2300      	movls	r3, #0
 800ac66:	b2db      	uxtb	r3, r3
    }
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <HAL_IncTick>:
uint32_t CANTxVolumeSize(uint32_t const size_of_log);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C" { void HAL_IncTick(void) {
 800ac70:	b580      	push	{r7, lr}
 800ac72:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 800ac74:	4b12      	ldr	r3, [pc, #72]	; (800acc0 <HAL_IncTick+0x50>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	4b12      	ldr	r3, [pc, #72]	; (800acc4 <HAL_IncTick+0x54>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4413      	add	r3, r2
 800ac80:	4a10      	ldr	r2, [pc, #64]	; (800acc4 <HAL_IncTick+0x54>)
 800ac82:	6013      	str	r3, [r2, #0]

    if (status != nullptr)
 800ac84:	4b10      	ldr	r3, [pc, #64]	; (800acc8 <HAL_IncTick+0x58>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d004      	beq.n	800ac96 <HAL_IncTick+0x26>
        ++status->tick;
 800ac8c:	4b0e      	ldr	r3, [pc, #56]	; (800acc8 <HAL_IncTick+0x58>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f001 fd1c 	bl	800c6ce <_ZNSt13__atomic_baseImEppEv>

    if (ivt != nullptr)
 800ac96:	4b0d      	ldr	r3, [pc, #52]	; (800accc <HAL_IncTick+0x5c>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d005      	beq.n	800acaa <HAL_IncTick+0x3a>
        ++ivt->tick;
 800ac9e:	4b0b      	ldr	r3, [pc, #44]	; (800accc <HAL_IncTick+0x5c>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	330c      	adds	r3, #12
 800aca4:	4618      	mov	r0, r3
 800aca6:	f001 fd12 	bl	800c6ce <_ZNSt13__atomic_baseImEppEv>

    if (nlg5 != nullptr)
 800acaa:	4b09      	ldr	r3, [pc, #36]	; (800acd0 <HAL_IncTick+0x60>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d004      	beq.n	800acbc <HAL_IncTick+0x4c>
        nlg5->tick(); // This is a function unlike the other two. The other two should also be functions.
 800acb2:	4b07      	ldr	r3, [pc, #28]	; (800acd0 <HAL_IncTick+0x60>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff fe1d 	bl	800a8f6 <_ZN4NLG54tickEv>
}}
 800acbc:	bf00      	nop
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	20000004 	.word	0x20000004
 800acc4:	20000274 	.word	0x20000274
 800acc8:	2000024c 	.word	0x2000024c
 800accc:	20000254 	.word	0x20000254
 800acd0:	20000248 	.word	0x20000248

0800acd4 <_ZNSt13__atomic_baseImEC2Em>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4618      	mov	r0, r3
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <_ZN3IVTC1Ev>:
struct IVT {
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	330c      	adds	r3, #12
 800acfe:	2100      	movs	r1, #0
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7ff fc1c 	bl	800a53e <_ZNSt6atomicImEC1Em>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <_ZNKSt8optionalIN7LTC681113VoltageStatusEE9has_valueEv>:
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
      { return this->_M_is_engaged(); }

      constexpr bool has_value() const noexcept
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 f805 	bl	800ad2a <_ZNKSt14_Optional_baseIN7LTC681113VoltageStatusEE13_M_is_engagedEv>
 800ad20:	4603      	mov	r3, r0
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <_ZNKSt14_Optional_baseIN7LTC681113VoltageStatusEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800ad2a:	b480      	push	{r7}
 800ad2c:	b083      	sub	sp, #12
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_engaged; }
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	7d1b      	ldrb	r3, [r3, #20]
 800ad36:	4618      	mov	r0, r3
 800ad38:	370c      	adds	r7, #12
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <_ZNKSt8optionalIN7LTC681110TempStatusEE9has_valueEv>:
      constexpr bool has_value() const noexcept
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b082      	sub	sp, #8
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 f805 	bl	800ad5c <_ZNKSt14_Optional_baseIN7LTC681110TempStatusEE13_M_is_engagedEv>
 800ad52:	4603      	mov	r3, r0
 800ad54:	4618      	mov	r0, r3
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <_ZNKSt14_Optional_baseIN7LTC681110TempStatusEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_engaged; }
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	7c1b      	ldrb	r3, [r3, #16]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <_ZNKRSt8optionalIN7LTC681113VoltageStatusEE5valueEv>:

      constexpr const _Tp&
      value() const&
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
	  ?  this->_M_get()
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff ffd3 	bl	800ad2a <_ZNKSt14_Optional_baseIN7LTC681113VoltageStatusEE13_M_is_engagedEv>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d005      	beq.n	800ad96 <_ZNKRSt8optionalIN7LTC681113VoltageStatusEE5valueEv+0x22>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f001 fcff 	bl	800c790 <_ZNKSt14_Optional_baseIN7LTC681113VoltageStatusEE6_M_getEv>
 800ad92:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(),
	     this->_M_get());
 800ad94:	e001      	b.n	800ad9a <_ZNKRSt8optionalIN7LTC681113VoltageStatusEE5valueEv+0x26>
	  : (__throw_bad_optional_access(),
 800ad96:	f7ff fe0f 	bl	800a9b8 <_ZSt27__throw_bad_optional_accessv>
      }
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <_ZNKRSt8optionalIN7LTC681110TempStatusEE5valueEv>:
      value() const&
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b082      	sub	sp, #8
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
	  ?  this->_M_get()
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4618      	mov	r0, r3
 800adae:	f7ff ffd5 	bl	800ad5c <_ZNKSt14_Optional_baseIN7LTC681110TempStatusEE13_M_is_engagedEv>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d005      	beq.n	800adc4 <_ZNKRSt8optionalIN7LTC681110TempStatusEE5valueEv+0x22>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4618      	mov	r0, r3
 800adbc:	f001 fcf3 	bl	800c7a6 <_ZNKSt14_Optional_baseIN7LTC681110TempStatusEE6_M_getEv>
 800adc0:	4603      	mov	r3, r0
	     this->_M_get());
 800adc2:	e001      	b.n	800adc8 <_ZNKRSt8optionalIN7LTC681110TempStatusEE5valueEv+0x26>
	  : (__throw_bad_optional_access(),
 800adc4:	f7ff fdf8 	bl	800a9b8 <_ZSt27__throw_bad_optional_accessv>
      }
 800adc8:	4618      	mov	r0, r3
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800add0:	b5b0      	push	{r4, r5, r7, lr}
 800add2:	ed2d 8b02 	vpush	{d8}
 800add6:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 800adda:	af04      	add	r7, sp, #16


    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800addc:	f7f5 fda0 	bl	8000920 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800ade0:	f000 fc1e 	bl	800b620 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800ade4:	f000 fe66 	bl	800bab4 <_ZL12MX_GPIO_Initv>
    MX_CAN1_Init();
 800ade8:	f000 fcb6 	bl	800b758 <_ZL12MX_CAN1_Initv>
    MX_CAN2_Init();
 800adec:	f000 fd14 	bl	800b818 <_ZL12MX_CAN2_Initv>
    MX_SDIO_SD_Init();
 800adf0:	f000 fd74 	bl	800b8dc <_ZL15MX_SDIO_SD_Initv>
    MX_SPI1_Init();
 800adf4:	f000 fd92 	bl	800b91c <_ZL12MX_SPI1_Initv>
    MX_TIM2_Init();
 800adf8:	f000 fdcc 	bl	800b994 <_ZL12MX_TIM2_Initv>
    MX_FATFS_Init();
 800adfc:	f7ff fb18 	bl	800a430 <MX_FATFS_Init>

    /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800ae00:	210c      	movs	r1, #12
 800ae02:	488d      	ldr	r0, [pc, #564]	; (800b038 <main+0x268>)
 800ae04:	f7f9 fdcc 	bl	80049a0 <HAL_TIM_PWM_Start>

    nlg5 = new NLG5;
 800ae08:	201c      	movs	r0, #28
 800ae0a:	f002 fa20 	bl	800d24e <_Znwj>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	461c      	mov	r4, r3
 800ae12:	f640 33ae 	movw	r3, #2990	; 0xbae
 800ae16:	223c      	movs	r2, #60	; 0x3c
 800ae18:	21a0      	movs	r1, #160	; 0xa0
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f7ff fd24 	bl	800a868 <_ZN4NLG5C1Ettt>
 800ae20:	4b86      	ldr	r3, [pc, #536]	; (800b03c <main+0x26c>)
 800ae22:	601c      	str	r4, [r3, #0]
    ivt = new IVT;
 800ae24:	2010      	movs	r0, #16
 800ae26:	f002 fa12 	bl	800d24e <_Znwj>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	461c      	mov	r4, r3
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f7ff ff5f 	bl	800acf2 <_ZN3IVTC1Ev>
 800ae34:	4b82      	ldr	r3, [pc, #520]	; (800b040 <main+0x270>)
 800ae36:	601c      	str	r4, [r3, #0]
    status = new Status(Status::Core | Status::Logging);
 800ae38:	2048      	movs	r0, #72	; 0x48
 800ae3a:	f002 fa08 	bl	800d24e <_Znwj>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	461c      	mov	r4, r3
 800ae42:	2111      	movs	r1, #17
 800ae44:	4620      	mov	r0, r4
 800ae46:	f7ff fb89 	bl	800a55c <_ZN6StatusC1Eh>
 800ae4a:	4b7e      	ldr	r3, [pc, #504]	; (800b044 <main+0x274>)
 800ae4c:	601c      	str	r4, [r3, #0]
    ltc6811 = new LTC6811(hspi1);
 800ae4e:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 800ae52:	f002 f9fc 	bl	800d24e <_Znwj>
 800ae56:	4603      	mov	r3, r0
 800ae58:	461c      	mov	r4, r3
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	9302      	str	r3, [sp, #8]
 800ae5e:	2300      	movs	r3, #0
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	2300      	movs	r3, #0
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	2300      	movs	r3, #0
 800ae68:	2202      	movs	r2, #2
 800ae6a:	4977      	ldr	r1, [pc, #476]	; (800b048 <main+0x278>)
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f7fd ff97 	bl	8008da0 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE>
 800ae72:	4b76      	ldr	r3, [pc, #472]	; (800b04c <main+0x27c>)
 800ae74:	601c      	str	r4, [r3, #0]
    pwm_fan = new PWM_Fan;
 800ae76:	2001      	movs	r0, #1
 800ae78:	f002 f9e9 	bl	800d24e <_Znwj>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	461c      	mov	r4, r3
 800ae80:	210a      	movs	r1, #10
 800ae82:	4620      	mov	r0, r4
 800ae84:	f7ff fdd0 	bl	800aa28 <_ZN7PWM_FanC1Eh>
 800ae88:	4b71      	ldr	r3, [pc, #452]	; (800b050 <main+0x280>)
 800ae8a:	601c      	str	r4, [r3, #0]
    f_mount(&SDFatFS, "", 0);
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	4971      	ldr	r1, [pc, #452]	; (800b054 <main+0x284>)
 800ae90:	4871      	ldr	r0, [pc, #452]	; (800b058 <main+0x288>)
 800ae92:	f7fc fe41 	bl	8007b18 <f_mount>
    f_open(&SDFile, kFile, FA_WRITE | FA_OPEN_APPEND);
 800ae96:	2232      	movs	r2, #50	; 0x32
 800ae98:	4970      	ldr	r1, [pc, #448]	; (800b05c <main+0x28c>)
 800ae9a:	4871      	ldr	r0, [pc, #452]	; (800b060 <main+0x290>)
 800ae9c:	f7fc fe82 	bl	8007ba4 <f_open>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
#if BYPASS_INITIAL_CHECK
    status->CloseAIR();
#endif
    HAL_Delay(5000);
 800aea0:	f241 3088 	movw	r0, #5000	; 0x1388
 800aea4:	f7f5 fd9a 	bl	80009dc <HAL_Delay>

    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
 800aea8:	2101      	movs	r1, #1
 800aeaa:	486e      	ldr	r0, [pc, #440]	; (800b064 <main+0x294>)
 800aeac:	f7f6 fe75 	bl	8001b9a <HAL_GPIO_TogglePin>

        auto op_mode = status->getOpMode();
 800aeb0:	4b64      	ldr	r3, [pc, #400]	; (800b044 <main+0x274>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff fb93 	bl	800a5e0 <_ZNK6Status9getOpModeEv>
 800aeba:	4603      	mov	r3, r0
 800aebc:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433

        /*  Core routine for monitoring voltage and temperature of the cells.  */
        if (op_mode & Status::Core) {
 800aec0:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f000 81cc 	beq.w	800b266 <main+0x496>
            auto const voltage_status_opt = ltc6811->getVoltageStatus();
 800aece:	4b5f      	ldr	r3, [pc, #380]	; (800b04c <main+0x27c>)
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800aed6:	4611      	mov	r1, r2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fe f9af 	bl	800923c <_ZN7LTC681116getVoltageStatusEv>
            auto const temp_status_opt = ltc6811->getTemperatureStatus();
 800aede:	4b5b      	ldr	r3, [pc, #364]	; (800b04c <main+0x27c>)
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 800aee6:	4611      	mov	r1, r2
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fe faaf 	bl	800944c <_ZN7LTC681120getTemperatureStatusEv>

            if (!status->isError(Status::PECError, !voltage_status_opt.has_value()) && !status->isError(Status::PECError, !temp_status_opt.has_value())) {
 800aeee:	4b55      	ldr	r3, [pc, #340]	; (800b044 <main+0x274>)
 800aef0:	681c      	ldr	r4, [r3, #0]
 800aef2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7ff ff0a 	bl	800ad10 <_ZNKSt8optionalIN7LTC681113VoltageStatusEE9has_valueEv>
 800aefc:	4603      	mov	r3, r0
 800aefe:	f083 0301 	eor.w	r3, r3, #1
 800af02:	b2db      	uxtb	r3, r3
 800af04:	461a      	mov	r2, r3
 800af06:	2109      	movs	r1, #9
 800af08:	4620      	mov	r0, r4
 800af0a:	f7ff fc0a 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
 800af0e:	4603      	mov	r3, r0
 800af10:	f083 0301 	eor.w	r3, r3, #1
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	d017      	beq.n	800af4a <main+0x17a>
 800af1a:	4b4a      	ldr	r3, [pc, #296]	; (800b044 <main+0x274>)
 800af1c:	681c      	ldr	r4, [r3, #0]
 800af1e:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 800af22:	4618      	mov	r0, r3
 800af24:	f7ff ff0d 	bl	800ad42 <_ZNKSt8optionalIN7LTC681110TempStatusEE9has_valueEv>
 800af28:	4603      	mov	r3, r0
 800af2a:	f083 0301 	eor.w	r3, r3, #1
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	461a      	mov	r2, r3
 800af32:	2109      	movs	r1, #9
 800af34:	4620      	mov	r0, r4
 800af36:	f7ff fbf4 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f083 0301 	eor.w	r3, r3, #1
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <main+0x17a>
 800af46:	2301      	movs	r3, #1
 800af48:	e000      	b.n	800af4c <main+0x17c>
 800af4a:	2300      	movs	r3, #0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f000 8186 	beq.w	800b25e <main+0x48e>
                auto voltage_status = voltage_status_opt.value();
 800af52:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800af56:	4618      	mov	r0, r3
 800af58:	f7ff ff0c 	bl	800ad74 <_ZNKRSt8optionalIN7LTC681113VoltageStatusEE5valueEv>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 800af62:	461d      	mov	r5, r3
 800af64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	6023      	str	r3, [r4, #0]
                auto temp_status = temp_status_opt.value();
 800af6c:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff ff16 	bl	800ada2 <_ZNKRSt8optionalIN7LTC681110TempStatusEE5valueEv>
 800af76:	4603      	mov	r3, r0
 800af78:	f507 7466 	add.w	r4, r7, #920	; 0x398
 800af7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800af7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

                status->isError(Status::Limping, voltage_status.min < Status::kLimpMinVoltage);
 800af82:	4b30      	ldr	r3, [pc, #192]	; (800b044 <main+0x274>)
 800af84:	6818      	ldr	r0, [r3, #0]
 800af86:	f8b7 33ac 	ldrh.w	r3, [r7, #940]	; 0x3ac
 800af8a:	f248 42cf 	movw	r2, #33999	; 0x84cf
 800af8e:	4293      	cmp	r3, r2
 800af90:	bf94      	ite	ls
 800af92:	2301      	movls	r3, #1
 800af94:	2300      	movhi	r3, #0
 800af96:	b2db      	uxtb	r3, r3
 800af98:	461a      	mov	r2, r3
 800af9a:	2103      	movs	r1, #3
 800af9c:	f7ff fbc1 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
                nlg5->SetChargeCurrent(voltage_status.max);
 800afa0:	4b26      	ldr	r3, [pc, #152]	; (800b03c <main+0x26c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f8b7 23b4 	ldrh.w	r2, [r7, #948]	; 0x3b4
 800afa8:	4611      	mov	r1, r2
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff fc86 	bl	800a8bc <_ZN4NLG516SetChargeCurrentEt>
                pwm_fan->setDutyCycle(pwm_fan->calcDutyCycle(temp_status.max));
 800afb0:	4b27      	ldr	r3, [pc, #156]	; (800b050 <main+0x280>)
 800afb2:	681c      	ldr	r4, [r3, #0]
 800afb4:	4b26      	ldr	r3, [pc, #152]	; (800b050 <main+0x280>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f9b7 23a0 	ldrsh.w	r2, [r7, #928]	; 0x3a0
 800afbc:	4611      	mov	r1, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff fd64 	bl	800aa8c <_ZNK7PWM_Fan13calcDutyCycleEs>
 800afc4:	4603      	mov	r3, r0
 800afc6:	4619      	mov	r1, r3
 800afc8:	4620      	mov	r0, r4
 800afca:	f7ff fd40 	bl	800aa4e <_ZNK7PWM_Fan12setDutyCycleEh>

                if (op_mode & Status::Balance)
 800afce:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 800afd2:	f003 0302 	and.w	r3, r3, #2
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d007      	beq.n	800afea <main+0x21a>
                    ltc6811->BuildDischargeConfig(voltage_status);
 800afda:	4b1c      	ldr	r3, [pc, #112]	; (800b04c <main+0x27c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 800afe2:	4611      	mov	r1, r2
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7fe fac9 	bl	800957c <_ZN7LTC681120BuildDischargeConfigERKNS_13VoltageStatusE>
#if CHECK_IVT
                if (!ivt->isLost()) { // This, if anything, will be the cause of error false positives
 800afea:	4b15      	ldr	r3, [pc, #84]	; (800b040 <main+0x270>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff fe2a 	bl	800ac48 <_ZNK3IVT6isLostEv>
 800aff4:	4603      	mov	r3, r0
 800aff6:	f083 0301 	eor.w	r3, r3, #1
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b00      	cmp	r3, #0
 800affe:	d034      	beq.n	800b06a <main+0x29a>
                    switch (ivt->prechargeCompare(voltage_status.sum)) {
 800b000:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <main+0x270>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 800b008:	4611      	mov	r1, r2
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff fd72 	bl	800aaf4 <_ZNK3IVT16prechargeCompareEm>
 800b010:	4603      	mov	r3, r0
 800b012:	2b01      	cmp	r3, #1
 800b014:	d00a      	beq.n	800b02c <main+0x25c>
 800b016:	2b02      	cmp	r3, #2
 800b018:	d026      	beq.n	800b068 <main+0x298>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d000      	beq.n	800b020 <main+0x250>
                    case IVT::Hysteresis:
                        // Do nothing
                        break;

                    default:
                        break;
 800b01e:	e024      	b.n	800b06a <main+0x29a>
                        status->ClosePre();
 800b020:	4b08      	ldr	r3, [pc, #32]	; (800b044 <main+0x274>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff faf9 	bl	800a61c <_ZN6Status8ClosePreEv>
                        break;
 800b02a:	e01e      	b.n	800b06a <main+0x29a>
                        status->OpenPre();
 800b02c:	4b05      	ldr	r3, [pc, #20]	; (800b044 <main+0x274>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff fb0d 	bl	800a650 <_ZN6Status7OpenPreEv>
                        break;
 800b036:	e018      	b.n	800b06a <main+0x29a>
 800b038:	200001f0 	.word	0x200001f0
 800b03c:	20000248 	.word	0x20000248
 800b040:	20000254 	.word	0x20000254
 800b044:	2000024c 	.word	0x2000024c
 800b048:	20000198 	.word	0x20000198
 800b04c:	20000250 	.word	0x20000250
 800b050:	20000258 	.word	0x20000258
 800b054:	0800d818 	.word	0x0800d818
 800b058:	200004b0 	.word	0x200004b0
 800b05c:	0800d808 	.word	0x0800d808
 800b060:	20000280 	.word	0x20000280
 800b064:	40020800 	.word	0x40020800
                        break;
 800b068:	bf00      	nop
#endif
                // NOTE: Bitwise & will not short circuit like Logical &&. We want all isError() calls to happen, so do not replace & with &&.
                if (
#if CHECK_IVT
#if IVT_TIMEOUT
                        !status->isError(Status::IVTLost, ivt->isLost()) &
 800b06a:	4bb4      	ldr	r3, [pc, #720]	; (800b33c <main+0x56c>)
 800b06c:	681c      	ldr	r4, [r3, #0]
 800b06e:	4bb4      	ldr	r3, [pc, #720]	; (800b340 <main+0x570>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff fde8 	bl	800ac48 <_ZNK3IVT6isLostEv>
 800b078:	4603      	mov	r3, r0
 800b07a:	461a      	mov	r2, r3
 800b07c:	210b      	movs	r1, #11
 800b07e:	4620      	mov	r0, r4
 800b080:	f7ff fb4f 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
 800b084:	4603      	mov	r3, r0
 800b086:	f083 0301 	eor.w	r3, r3, #1
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	461c      	mov	r4, r3
#endif
#if TEST_OVERPOWER
                        !status->isError(Status::OverPower, voltage_status.sum * ivt->I > Status::kMaxPower) &
 800b08e:	4bab      	ldr	r3, [pc, #684]	; (800b33c <main+0x56c>)
 800b090:	681d      	ldr	r5, [r3, #0]
 800b092:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800b09e:	4ba8      	ldr	r3, [pc, #672]	; (800b340 <main+0x570>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f001 fb49 	bl	800c73c <_ZNKSt6atomicIfEcvfEv>
 800b0aa:	eef0 7a40 	vmov.f32	s15, s0
 800b0ae:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b0b2:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800b344 <main+0x574>
 800b0b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0be:	bfcc      	ite	gt
 800b0c0:	2301      	movgt	r3, #1
 800b0c2:	2300      	movle	r3, #0
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	2107      	movs	r1, #7
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	f7ff fb29 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	f083 0301 	eor.w	r3, r3, #1
 800b0d6:	b2db      	uxtb	r3, r3
                        !status->isError(Status::IVTLost, ivt->isLost()) &
 800b0d8:	401c      	ands	r4, r3
#endif
#if TEST_OVERCURRENT
                        !status->isError(Status::OverCurrent, ivt->I > Status::kMaxCurrent) &
 800b0da:	4b98      	ldr	r3, [pc, #608]	; (800b33c <main+0x56c>)
 800b0dc:	681d      	ldr	r5, [r3, #0]
 800b0de:	4b98      	ldr	r3, [pc, #608]	; (800b340 <main+0x570>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f001 fb29 	bl	800c73c <_ZNKSt6atomicIfEcvfEv>
 800b0ea:	eeb0 7a40 	vmov.f32	s14, s0
 800b0ee:	eddf 7a96 	vldr	s15, [pc, #600]	; 800b348 <main+0x578>
 800b0f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0fa:	bfcc      	ite	gt
 800b0fc:	2301      	movgt	r3, #1
 800b0fe:	2300      	movle	r3, #0
 800b100:	b2db      	uxtb	r3, r3
 800b102:	461a      	mov	r2, r3
 800b104:	2106      	movs	r1, #6
 800b106:	4628      	mov	r0, r5
 800b108:	f7ff fb0b 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f083 0301 	eor.w	r3, r3, #1
 800b112:	b2db      	uxtb	r3, r3
                        !status->isError(Status::OverPower, voltage_status.sum * ivt->I > Status::kMaxPower) &
 800b114:	401c      	ands	r4, r3
#endif
#if TEST_ACCU_UNDERVOLTAGE
                        !status->isError(Status::AccuUnderVoltage, ivt->U2 < Status::kAccuMinVoltage) &
 800b116:	4b89      	ldr	r3, [pc, #548]	; (800b33c <main+0x56c>)
 800b118:	681d      	ldr	r5, [r3, #0]
 800b11a:	4b89      	ldr	r3, [pc, #548]	; (800b340 <main+0x570>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	3304      	adds	r3, #4
 800b120:	4618      	mov	r0, r3
 800b122:	f001 fb0b 	bl	800c73c <_ZNKSt6atomicIfEcvfEv>
 800b126:	eeb0 7a40 	vmov.f32	s14, s0
 800b12a:	eddf 7a88 	vldr	s15, [pc, #544]	; 800b34c <main+0x57c>
 800b12e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b136:	bf4c      	ite	mi
 800b138:	2301      	movmi	r3, #1
 800b13a:	2300      	movpl	r3, #0
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	461a      	mov	r2, r3
 800b140:	210a      	movs	r1, #10
 800b142:	4628      	mov	r0, r5
 800b144:	f7ff faed 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
 800b148:	4603      	mov	r3, r0
 800b14a:	f083 0301 	eor.w	r3, r3, #1
 800b14e:	b2db      	uxtb	r3, r3
                        !status->isError(Status::OverCurrent, ivt->I > Status::kMaxCurrent) &
 800b150:	401c      	ands	r4, r3
#endif
#endif
#if TEST_UNDERVOLTAGE
                        !status->isError(Status::UnderVoltage, voltage_status.min < Status::kMinVoltage) &
 800b152:	4b7a      	ldr	r3, [pc, #488]	; (800b33c <main+0x56c>)
 800b154:	6818      	ldr	r0, [r3, #0]
 800b156:	f8b7 33ac 	ldrh.w	r3, [r7, #940]	; 0x3ac
 800b15a:	f647 1217 	movw	r2, #30999	; 0x7917
 800b15e:	4293      	cmp	r3, r2
 800b160:	bf94      	ite	ls
 800b162:	2301      	movls	r3, #1
 800b164:	2300      	movhi	r3, #0
 800b166:	b2db      	uxtb	r3, r3
 800b168:	461a      	mov	r2, r3
 800b16a:	2102      	movs	r1, #2
 800b16c:	f7ff fad9 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
 800b170:	4603      	mov	r3, r0
 800b172:	f083 0301 	eor.w	r3, r3, #1
 800b176:	b2db      	uxtb	r3, r3
                        !status->isError(Status::AccuUnderVoltage, ivt->U2 < Status::kAccuMinVoltage) &
 800b178:	401c      	ands	r4, r3
#endif
#if TEST_OVERVOLTAGE
                        !status->isError(Status::OverVoltage, voltage_status.max > Status::kMaxVoltage) &
 800b17a:	4b70      	ldr	r3, [pc, #448]	; (800b33c <main+0x56c>)
 800b17c:	6818      	ldr	r0, [r3, #0]
 800b17e:	f8b7 33b4 	ldrh.w	r3, [r7, #948]	; 0x3b4
 800b182:	f24a 4210 	movw	r2, #42000	; 0xa410
 800b186:	4293      	cmp	r3, r2
 800b188:	bf8c      	ite	hi
 800b18a:	2301      	movhi	r3, #1
 800b18c:	2300      	movls	r3, #0
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	461a      	mov	r2, r3
 800b192:	2101      	movs	r1, #1
 800b194:	f7ff fac5 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
 800b198:	4603      	mov	r3, r0
 800b19a:	f083 0301 	eor.w	r3, r3, #1
 800b19e:	b2db      	uxtb	r3, r3
                        !status->isError(Status::UnderVoltage, voltage_status.min < Status::kMinVoltage) &
 800b1a0:	401c      	ands	r4, r3
#endif
#if TEST_UNDERTEMPERATURE
                        !status->isError(Status::UnderTemp, temp_status.min < Status::kMinTemp) &
 800b1a2:	4b66      	ldr	r3, [pc, #408]	; (800b33c <main+0x56c>)
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	f9b7 3398 	ldrsh.w	r3, [r7, #920]	; 0x398
 800b1aa:	4a69      	ldr	r2, [pc, #420]	; (800b350 <main+0x580>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	bfb4      	ite	lt
 800b1b0:	2301      	movlt	r3, #1
 800b1b2:	2300      	movge	r3, #0
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	2105      	movs	r1, #5
 800b1ba:	f7ff fab2 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	f083 0301 	eor.w	r3, r3, #1
 800b1c4:	b2db      	uxtb	r3, r3
                        !status->isError(Status::OverVoltage, voltage_status.max > Status::kMaxVoltage) &
 800b1c6:	401c      	ands	r4, r3
#endif
#if TEST_OVERTEMPERATURE
                        !status->isError(Status::OverTemp, temp_status.max > Status::kMaxTemp) &
 800b1c8:	4b5c      	ldr	r3, [pc, #368]	; (800b33c <main+0x56c>)
 800b1ca:	6818      	ldr	r0, [r3, #0]
 800b1cc:	f9b7 33a0 	ldrsh.w	r3, [r7, #928]	; 0x3a0
 800b1d0:	f241 720c 	movw	r2, #5900	; 0x170c
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	bfcc      	ite	gt
 800b1d8:	2301      	movgt	r3, #1
 800b1da:	2300      	movle	r3, #0
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	461a      	mov	r2, r3
 800b1e0:	2104      	movs	r1, #4
 800b1e2:	f7ff fa9e 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	f083 0301 	eor.w	r3, r3, #1
 800b1ec:	b2db      	uxtb	r3, r3
                        !status->isError(Status::UnderTemp, temp_status.min < Status::kMinTemp) &
 800b1ee:	401c      	ands	r4, r3
#endif
#if TEST_OVERTEMPERATURE_CHARGING
                        !status->isError(Status::OverTempCharging, (op_mode & Status::Charging) && (temp_status.max > Status::kMaxChargeTemp)) &
 800b1f0:	4b52      	ldr	r3, [pc, #328]	; (800b33c <main+0x56c>)
 800b1f2:	6818      	ldr	r0, [r3, #0]
 800b1f4:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 800b1f8:	f003 0304 	and.w	r3, r3, #4
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d007      	beq.n	800b210 <main+0x440>
 800b200:	f9b7 33a0 	ldrsh.w	r3, [r7, #928]	; 0x3a0
 800b204:	f241 1230 	movw	r2, #4400	; 0x1130
 800b208:	4293      	cmp	r3, r2
 800b20a:	dd01      	ble.n	800b210 <main+0x440>
 800b20c:	2301      	movs	r3, #1
 800b20e:	e000      	b.n	800b212 <main+0x442>
 800b210:	2300      	movs	r3, #0
 800b212:	461a      	mov	r2, r3
 800b214:	210c      	movs	r1, #12
 800b216:	f7ff fa84 	bl	800a722 <_ZN6Status7isErrorENS_5ErrorEb>
 800b21a:	4603      	mov	r3, r0
 800b21c:	f083 0301 	eor.w	r3, r3, #1
 800b220:	b2db      	uxtb	r3, r3
                        !status->isError(Status::OverTemp, temp_status.max > Status::kMaxTemp) &
 800b222:	4023      	ands	r3, r4
                        !status->isError(Status::OverTempCharging, (op_mode & Status::Charging) && (temp_status.max > Status::kMaxChargeTemp)) &
 800b224:	f003 0301 	and.w	r3, r3, #1
#endif
                        true
                ) {
 800b228:	2b00      	cmp	r3, #0
 800b22a:	bf14      	ite	ne
 800b22c:	2301      	movne	r3, #1
 800b22e:	2300      	moveq	r3, #0
 800b230:	b2db      	uxtb	r3, r3
                if (
 800b232:	2b00      	cmp	r3, #0
 800b234:	d004      	beq.n	800b240 <main+0x470>
                    status->CloseAIR();
 800b236:	4b41      	ldr	r3, [pc, #260]	; (800b33c <main+0x56c>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff fa30 	bl	800a6a0 <_ZN6Status8CloseAIREv>
#if !CHECK_IVT
                    status->ClosePre();
#endif
                }

                CANTxData(voltage_status.min, voltage_status.max, temp_status.max);
 800b240:	f8b7 33ac 	ldrh.w	r3, [r7, #940]	; 0x3ac
 800b244:	f8b7 13b4 	ldrh.w	r1, [r7, #948]	; 0x3b4
 800b248:	f9b7 23a0 	ldrsh.w	r2, [r7, #928]	; 0x3a0
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 ff0b 	bl	800c068 <_Z9CANTxDatatts>
                CANTxVoltageLimpTotal(voltage_status.sum, true);
 800b252:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800b256:	2101      	movs	r1, #1
 800b258:	4618      	mov	r0, r3
 800b25a:	f001 f879 	bl	800c350 <_Z21CANTxVoltageLimpTotalmb>
            }

            CANTxStatus();
 800b25e:	f000 fe4d 	bl	800befc <_Z11CANTxStatusv>
            CANTxPECError();
 800b262:	f000 feab 	bl	800bfbc <_Z13CANTxPECErrorv>
        }
#if CAN_ENABLED
        /*  Send charger command messages on CAN bus.  */
        if (op_mode & Status::Charging) {
 800b266:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 800b26a:	f003 0304 	and.w	r3, r3, #4
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00b      	beq.n	800b28a <main+0x4ba>
            if (nlg5->isChargerEvent()) {
 800b272:	4b38      	ldr	r3, [pc, #224]	; (800b354 <main+0x584>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4618      	mov	r0, r3
 800b278:	f7ff fb87 	bl	800a98a <_ZN4NLG514isChargerEventEv>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <main+0x4ba>
                CANTxNLGAControl();
 800b282:	f001 f919 	bl	800c4b8 <_Z16CANTxNLGAControlv>
                CANTxNLGBControl();
 800b286:	f001 f965 	bl	800c554 <_Z16CANTxNLGBControlv>
            }
        }
#endif
#if CAN_DEBUG
        /*  Functions for debugging and untested code.  */
        if (op_mode & Status::Debug) {
 800b28a:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 800b28e:	f003 0308 	and.w	r3, r3, #8
 800b292:	2b00      	cmp	r3, #0
 800b294:	d01c      	beq.n	800b2d0 <main+0x500>
            CANTxVoltage(ltc6811->GetCellData());
 800b296:	4b30      	ldr	r3, [pc, #192]	; (800b358 <main+0x588>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7ff fb9f 	bl	800a9de <_ZNK7LTC681111GetCellDataEv>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f000 ff38 	bl	800c118 <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE>
            CANTxTemperature(ltc6811->GetTempData());
 800b2a8:	4b2b      	ldr	r3, [pc, #172]	; (800b358 <main+0x588>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff fba2 	bl	800a9f6 <_ZNK7LTC681111GetTempDataEv>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 ffbd 	bl	800c234 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE>
            CANTxDCCfg(ltc6811->GetSlaveCfg());
 800b2ba:	4b27      	ldr	r3, [pc, #156]	; (800b358 <main+0x588>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7ff fba6 	bl	800aa10 <_ZNK7LTC681111GetSlaveCfgEv>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f001 f882 	bl	800c3d0 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE>
            CANTxStatus();
 800b2cc:	f000 fe16 	bl	800befc <_Z11CANTxStatusv>
        }
#endif
        /*  Log data to SD card.  */
        if (op_mode & Status::Logging) {
 800b2d0:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 800b2d4:	f003 0310 	and.w	r3, r3, #16
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f43f ade5 	beq.w	800aea8 <main+0xd8>
            if (BSP_SD_IsDetected()) {
 800b2de:	f7ff f895 	bl	800a40c <BSP_SD_IsDetected>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	bf14      	ite	ne
 800b2e8:	2301      	movne	r3, #1
 800b2ea:	2300      	moveq	r3, #0
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f43f adda 	beq.w	800aea8 <main+0xd8>
                HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 800b2f4:	2104      	movs	r1, #4
 800b2f6:	4819      	ldr	r0, [pc, #100]	; (800b35c <main+0x58c>)
 800b2f8:	f7f6 fc4f 	bl	8001b9a <HAL_GPIO_TogglePin>

                FILINFO inf;

                if (f_stat(kDirectory, &inf) == FR_NO_FILE)
 800b2fc:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800b300:	4619      	mov	r1, r3
 800b302:	4817      	ldr	r0, [pc, #92]	; (800b360 <main+0x590>)
 800b304:	f7fd f829 	bl	800835a <f_stat>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b04      	cmp	r3, #4
 800b30c:	bf0c      	ite	eq
 800b30e:	2301      	moveq	r3, #1
 800b310:	2300      	movne	r3, #0
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <main+0x54e>
                    f_mkdir(kDirectory);
 800b318:	4811      	ldr	r0, [pc, #68]	; (800b360 <main+0x590>)
 800b31a:	f7fd f902 	bl	8008522 <f_mkdir>

                // Magic number below is probably 500MiB
                if (f_size(&SDFile) < 524288000 && f_open(&SDFile, kFile, FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
 800b31e:	4b11      	ldr	r3, [pc, #68]	; (800b364 <main+0x594>)
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	f1b3 5ffa 	cmp.w	r3, #524288000	; 0x1f400000
 800b326:	d221      	bcs.n	800b36c <main+0x59c>
 800b328:	2232      	movs	r2, #50	; 0x32
 800b32a:	490f      	ldr	r1, [pc, #60]	; (800b368 <main+0x598>)
 800b32c:	480d      	ldr	r0, [pc, #52]	; (800b364 <main+0x594>)
 800b32e:	f7fc fc39 	bl	8007ba4 <f_open>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d119      	bne.n	800b36c <main+0x59c>
 800b338:	2301      	movs	r3, #1
 800b33a:	e018      	b.n	800b36e <main+0x59e>
 800b33c:	2000024c 	.word	0x2000024c
 800b340:	20000254 	.word	0x20000254
 800b344:	4af42400 	.word	0x4af42400
 800b348:	43340000 	.word	0x43340000
 800b34c:	43f50000 	.word	0x43f50000
 800b350:	fffffa24 	.word	0xfffffa24
 800b354:	20000248 	.word	0x20000248
 800b358:	20000250 	.word	0x20000250
 800b35c:	40020800 	.word	0x40020800
 800b360:	0800d800 	.word	0x0800d800
 800b364:	20000280 	.word	0x20000280
 800b368:	0800d808 	.word	0x0800d808
 800b36c:	2300      	movs	r3, #0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f43f ad9a 	beq.w	800aea8 <main+0xd8>
                    /* NOTE: f_printf might be pretty slow compared to f_write. */
                    f_printf(&SDFile, "%u,", status->tick / 100); // If the uptime number seems wrong, just change or remove the / 100.
 800b374:	4ba4      	ldr	r3, [pc, #656]	; (800b608 <main+0x838>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4618      	mov	r0, r3
 800b37a:	f001 f9ee 	bl	800c75a <_ZNKSt13__atomic_baseImEcvmEv>
 800b37e:	4602      	mov	r2, r0
 800b380:	4ba2      	ldr	r3, [pc, #648]	; (800b60c <main+0x83c>)
 800b382:	fba3 2302 	umull	r2, r3, r3, r2
 800b386:	095b      	lsrs	r3, r3, #5
 800b388:	461a      	mov	r2, r3
 800b38a:	49a1      	ldr	r1, [pc, #644]	; (800b610 <main+0x840>)
 800b38c:	48a1      	ldr	r0, [pc, #644]	; (800b614 <main+0x844>)
 800b38e:	f7fd fa47 	bl	8008820 <f_printf>
                    /* ISO 8601 Notation (yyyy-mm-ddThh:mm:ss) */
                    // TODO Not implemented.
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 800b392:	4b9d      	ldr	r3, [pc, #628]	; (800b608 <main+0x838>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	699c      	ldr	r4, [r3, #24]
 800b398:	4b9b      	ldr	r3, [pc, #620]	; (800b608 <main+0x838>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	695d      	ldr	r5, [r3, #20]
 800b39e:	4b9a      	ldr	r3, [pc, #616]	; (800b608 <main+0x838>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	4a98      	ldr	r2, [pc, #608]	; (800b608 <main+0x838>)
 800b3a6:	6812      	ldr	r2, [r2, #0]
 800b3a8:	68d2      	ldr	r2, [r2, #12]
 800b3aa:	4997      	ldr	r1, [pc, #604]	; (800b608 <main+0x838>)
 800b3ac:	6809      	ldr	r1, [r1, #0]
 800b3ae:	6889      	ldr	r1, [r1, #8]
 800b3b0:	4895      	ldr	r0, [pc, #596]	; (800b608 <main+0x838>)
 800b3b2:	6800      	ldr	r0, [r0, #0]
 800b3b4:	6840      	ldr	r0, [r0, #4]
 800b3b6:	9003      	str	r0, [sp, #12]
 800b3b8:	9102      	str	r1, [sp, #8]
 800b3ba:	9201      	str	r2, [sp, #4]
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	462b      	mov	r3, r5
 800b3c0:	4622      	mov	r2, r4
 800b3c2:	4995      	ldr	r1, [pc, #596]	; (800b618 <main+0x848>)
 800b3c4:	4893      	ldr	r0, [pc, #588]	; (800b614 <main+0x844>)
 800b3c6:	f7fd fa2b 	bl	8008820 <f_printf>
                            status->rtc.tm_year, status->rtc.tm_mon, status->rtc.tm_mday, status->rtc.tm_hour, status->rtc.tm_min, status->rtc.tm_sec);

                    UINT number_written{ 0 };
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
                    uint16_t buffer[4 * LTC6811::kDaisyChainLength * 3]{ 0 };
 800b3d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f44f 7390 	mov.w	r3, #288	; 0x120
 800b3da:	461a      	mov	r2, r3
 800b3dc:	2100      	movs	r1, #0
 800b3de:	f002 f904 	bl	800d5ea <memset>

                    size_t position{ 0 };
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
                    auto const cell_data = ltc6811->GetCellData();
 800b3e8:	4b8c      	ldr	r3, [pc, #560]	; (800b61c <main+0x84c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7ff faf6 	bl	800a9de <_ZNK7LTC681111GetCellDataEv>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	4611      	mov	r1, r2
 800b3fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b400:	461a      	mov	r2, r3
 800b402:	f002 f8e7 	bl	800d5d4 <memcpy>

                    for (const auto& register_group : cell_data) // 4 voltage register groups
 800b406:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800b40a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800b40e:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 800b412:	f001 f9d3 	bl	800c7bc <_ZNKSt5arrayIN7LTC681113RegisterGroupItEELj4EE5beginEv>
 800b416:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
 800b41a:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 800b41e:	f001 f9d9 	bl	800c7d4 <_ZNKSt5arrayIN7LTC681113RegisterGroupItEELj4EE3endEv>
 800b422:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428
 800b426:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800b42a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800b42e:	429a      	cmp	r2, r3
 800b430:	d056      	beq.n	800b4e0 <main+0x710>
 800b432:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800b436:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
                        for (const auto& IC : register_group.ICDaisyChain) // N ICs in daisy chain, determined by kDaisyChainLength
 800b43a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800b43e:	3304      	adds	r3, #4
 800b440:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 800b444:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 800b448:	f7fe fcb7 	bl	8009dba <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EE5beginEv>
 800b44c:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
 800b450:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 800b454:	f7fe fcbd 	bl	8009dd2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EE3endEv>
 800b458:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
 800b45c:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 800b460:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800b464:	429a      	cmp	r2, r3
 800b466:	d035      	beq.n	800b4d4 <main+0x704>
 800b468:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800b46c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
                            for (const auto voltage : IC.data) // 3 voltages in IC.data
 800b470:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800b474:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800b478:	f8d7 0414 	ldr.w	r0, [r7, #1044]	; 0x414
 800b47c:	f7fe fcb6 	bl	8009dec <_ZNKSt5arrayItLj3EE5beginEv>
 800b480:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
 800b484:	f8d7 0414 	ldr.w	r0, [r7, #1044]	; 0x414
 800b488:	f7fe fcbc 	bl	8009e04 <_ZNKSt5arrayItLj3EE3endEv>
 800b48c:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
 800b490:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 800b494:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800b498:	429a      	cmp	r2, r3
 800b49a:	d015      	beq.n	800b4c8 <main+0x6f8>
 800b49c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
                                buffer[position++] = voltage;
 800b4a6:	f8b7 140e 	ldrh.w	r1, [r7, #1038]	; 0x40e
 800b4aa:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 800b4b4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800b4b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                            for (const auto voltage : IC.data) // 3 voltages in IC.data
 800b4bc:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800b4c0:	3302      	adds	r3, #2
 800b4c2:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 800b4c6:	e7e3      	b.n	800b490 <main+0x6c0>
                        for (const auto& IC : register_group.ICDaisyChain) // N ICs in daisy chain, determined by kDaisyChainLength
 800b4c8:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800b4cc:	3308      	adds	r3, #8
 800b4ce:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800b4d2:	e7c3      	b.n	800b45c <main+0x68c>
                    for (const auto& register_group : cell_data) // 4 voltage register groups
 800b4d4:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800b4d8:	3364      	adds	r3, #100	; 0x64
 800b4da:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800b4de:	e7a2      	b.n	800b426 <main+0x656>

                    f_write(&SDFile, buffer, sizeof(buffer), &number_written);
 800b4e0:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800b4e4:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800b4e8:	f44f 7290 	mov.w	r2, #288	; 0x120
 800b4ec:	4849      	ldr	r0, [pc, #292]	; (800b614 <main+0x844>)
 800b4ee:	f7fc fd17 	bl	8007f20 <f_write>

                    position = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
                    auto const temp_data = ltc6811->GetTempData();
 800b4f8:	4b48      	ldr	r3, [pc, #288]	; (800b61c <main+0x84c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7ff fa7a 	bl	800a9f6 <_ZNK7LTC681111GetTempDataEv>
 800b502:	4602      	mov	r2, r0
 800b504:	1d3b      	adds	r3, r7, #4
 800b506:	4618      	mov	r0, r3
 800b508:	4611      	mov	r1, r2
 800b50a:	23c8      	movs	r3, #200	; 0xc8
 800b50c:	461a      	mov	r2, r3
 800b50e:	f002 f861 	bl	800d5d4 <memcpy>

                    for (const auto& register_group : temp_data) // 2 temperature register groups
 800b512:	1d3b      	adds	r3, r7, #4
 800b514:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 800b518:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 800b51c:	f001 f968 	bl	800c7f0 <_ZNKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE5beginEv>
 800b520:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
 800b524:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 800b528:	f001 f96e 	bl	800c808 <_ZNKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE3endEv>
 800b52c:	f8c7 0404 	str.w	r0, [r7, #1028]	; 0x404
 800b530:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 800b534:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800b538:	429a      	cmp	r2, r3
 800b53a:	d056      	beq.n	800b5ea <main+0x81a>
 800b53c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800b540:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                        for (const auto& IC : register_group.ICDaisyChain) // N ICs in daisy chain, determined by kDaisyChainLength
 800b544:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800b548:	3304      	adds	r3, #4
 800b54a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800b54e:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800b552:	f001 f966 	bl	800c822 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj12EE5beginEv>
 800b556:	f8c7 0438 	str.w	r0, [r7, #1080]	; 0x438
 800b55a:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800b55e:	f001 f96c 	bl	800c83a <_ZNKSt5arrayIN7LTC68118RegisterIsEELj12EE3endEv>
 800b562:	f8c7 03f8 	str.w	r0, [r7, #1016]	; 0x3f8
 800b566:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 800b56a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800b56e:	429a      	cmp	r2, r3
 800b570:	d035      	beq.n	800b5de <main+0x80e>
 800b572:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800b576:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
                            for (const auto temperature : IC.data) // 3 temperatures in IC.data
 800b57a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800b57e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800b582:	f8d7 03f0 	ldr.w	r0, [r7, #1008]	; 0x3f0
 800b586:	f001 f965 	bl	800c854 <_ZNKSt5arrayIsLj3EE5beginEv>
 800b58a:	f8c7 0434 	str.w	r0, [r7, #1076]	; 0x434
 800b58e:	f8d7 03f0 	ldr.w	r0, [r7, #1008]	; 0x3f0
 800b592:	f001 f96b 	bl	800c86c <_ZNKSt5arrayIsLj3EE3endEv>
 800b596:	f8c7 03ec 	str.w	r0, [r7, #1004]	; 0x3ec
 800b59a:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800b59e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d015      	beq.n	800b5d2 <main+0x802>
 800b5a6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800b5aa:	881b      	ldrh	r3, [r3, #0]
 800b5ac:	f8a7 33ea 	strh.w	r3, [r7, #1002]	; 0x3ea
                                buffer[position++] = temperature;
 800b5b0:	f8b7 13ea 	ldrh.w	r1, [r7, #1002]	; 0x3ea
 800b5b4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800b5b8:	1c5a      	adds	r2, r3, #1
 800b5ba:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 800b5be:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800b5c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                            for (const auto temperature : IC.data) // 3 temperatures in IC.data
 800b5c6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800b5ca:	3302      	adds	r3, #2
 800b5cc:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800b5d0:	e7e3      	b.n	800b59a <main+0x7ca>
                        for (const auto& IC : register_group.ICDaisyChain) // N ICs in daisy chain, determined by kDaisyChainLength
 800b5d2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800b5d6:	3308      	adds	r3, #8
 800b5d8:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800b5dc:	e7c3      	b.n	800b566 <main+0x796>
                    for (const auto& register_group : temp_data) // 2 temperature register groups
 800b5de:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800b5e2:	3364      	adds	r3, #100	; 0x64
 800b5e4:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800b5e8:	e7a2      	b.n	800b530 <main+0x760>

                    f_write(&SDFile, buffer, sizeof(buffer) / 2, &number_written);
 800b5ea:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800b5ee:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800b5f2:	2290      	movs	r2, #144	; 0x90
 800b5f4:	4807      	ldr	r0, [pc, #28]	; (800b614 <main+0x844>)
 800b5f6:	f7fc fc93 	bl	8007f20 <f_write>

                    f_sync(&SDFile);
 800b5fa:	4806      	ldr	r0, [pc, #24]	; (800b614 <main+0x844>)
 800b5fc:	f7fc fe05 	bl	800820a <f_sync>
                    f_close(&SDFile);
 800b600:	4804      	ldr	r0, [pc, #16]	; (800b614 <main+0x844>)
 800b602:	f7fc fe80 	bl	8008306 <f_close>
                }
            }
        }
    }
 800b606:	e44f      	b.n	800aea8 <main+0xd8>
 800b608:	2000024c 	.word	0x2000024c
 800b60c:	51eb851f 	.word	0x51eb851f
 800b610:	0800d81c 	.word	0x0800d81c
 800b614:	20000280 	.word	0x20000280
 800b618:	0800d820 	.word	0x0800d820
 800b61c:	20000250 	.word	0x20000250

0800b620 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b0ac      	sub	sp, #176	; 0xb0
 800b624:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b626:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b62a:	2234      	movs	r2, #52	; 0x34
 800b62c:	2100      	movs	r1, #0
 800b62e:	4618      	mov	r0, r3
 800b630:	f001 ffdb 	bl	800d5ea <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b634:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	605a      	str	r2, [r3, #4]
 800b63e:	609a      	str	r2, [r3, #8]
 800b640:	60da      	str	r2, [r3, #12]
 800b642:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b644:	f107 030c 	add.w	r3, r7, #12
 800b648:	225c      	movs	r2, #92	; 0x5c
 800b64a:	2100      	movs	r1, #0
 800b64c:	4618      	mov	r0, r3
 800b64e:	f001 ffcc 	bl	800d5ea <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800b652:	2300      	movs	r3, #0
 800b654:	60bb      	str	r3, [r7, #8]
 800b656:	4b3e      	ldr	r3, [pc, #248]	; (800b750 <_Z18SystemClock_Configv+0x130>)
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	4a3d      	ldr	r2, [pc, #244]	; (800b750 <_Z18SystemClock_Configv+0x130>)
 800b65c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b660:	6413      	str	r3, [r2, #64]	; 0x40
 800b662:	4b3b      	ldr	r3, [pc, #236]	; (800b750 <_Z18SystemClock_Configv+0x130>)
 800b664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b66a:	60bb      	str	r3, [r7, #8]
 800b66c:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800b66e:	2300      	movs	r3, #0
 800b670:	607b      	str	r3, [r7, #4]
 800b672:	4b38      	ldr	r3, [pc, #224]	; (800b754 <_Z18SystemClock_Configv+0x134>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b67a:	4a36      	ldr	r2, [pc, #216]	; (800b754 <_Z18SystemClock_Configv+0x134>)
 800b67c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b680:	6013      	str	r3, [r2, #0]
 800b682:	4b34      	ldr	r3, [pc, #208]	; (800b754 <_Z18SystemClock_Configv+0x134>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b68a:	607b      	str	r3, [r7, #4]
 800b68c:	687b      	ldr	r3, [r7, #4]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b68e:	2302      	movs	r3, #2
 800b690:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b692:	2301      	movs	r3, #1
 800b694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b698:	2310      	movs	r3, #16
 800b69a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b69e:	2302      	movs	r3, #2
 800b6a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    RCC_OscInitStruct.PLL.PLLM = 8;
 800b6aa:	2308      	movs	r3, #8
 800b6ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.PLL.PLLN = 50;
 800b6b0:	2332      	movs	r3, #50	; 0x32
 800b6b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_OscInitStruct.PLL.PLLQ = 3;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    RCC_OscInitStruct.PLL.PLLR = 2;
 800b6c2:	2302      	movs	r3, #2
 800b6c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b6c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7f6 ffe1 	bl	8002694 <HAL_RCC_OscConfig>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	bf14      	ite	ne
 800b6d8:	2301      	movne	r3, #1
 800b6da:	2300      	moveq	r3, #0
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <_Z18SystemClock_Configv+0xc6>
    {
        Error_Handler();
 800b6e2:	f000 ffbd 	bl	800c660 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b6e6:	230f      	movs	r3, #15
 800b6e8:	66bb      	str	r3, [r7, #104]	; 0x68
            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	67bb      	str	r3, [r7, #120]	; 0x78

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800b6fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b6fe:	2100      	movs	r1, #0
 800b700:	4618      	mov	r0, r3
 800b702:	f7f6 fa65 	bl	8001bd0 <HAL_RCC_ClockConfig>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	bf14      	ite	ne
 800b70c:	2301      	movne	r3, #1
 800b70e:	2300      	moveq	r3, #0
 800b710:	b2db      	uxtb	r3, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <_Z18SystemClock_Configv+0xfa>
    {
        Error_Handler();
 800b716:	f000 ffa3 	bl	800c660 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800b71a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b71e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b720:	2300      	movs	r3, #0
 800b722:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800b724:	2300      	movs	r3, #0
 800b726:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b728:	f107 030c 	add.w	r3, r7, #12
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7f6 fb35 	bl	8001d9c <HAL_RCCEx_PeriphCLKConfig>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	bf14      	ite	ne
 800b738:	2301      	movne	r3, #1
 800b73a:	2300      	moveq	r3, #0
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <_Z18SystemClock_Configv+0x126>
    {
        Error_Handler();
 800b742:	f000 ff8d 	bl	800c660 <Error_Handler>
    }
}
 800b746:	bf00      	nop
 800b748:	37b0      	adds	r7, #176	; 0xb0
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	40023800 	.word	0x40023800
 800b754:	40007000 	.word	0x40007000

0800b758 <_ZL12MX_CAN1_Initv>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08a      	sub	sp, #40	; 0x28
 800b75c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN CAN1_Init 1 */
    CAN_FilterTypeDef  sFilterConfig;

    /* USER CODE END CAN1_Init 1 */
    hcan1.Instance = CAN1;
 800b75e:	4b2c      	ldr	r3, [pc, #176]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b760:	4a2c      	ldr	r2, [pc, #176]	; (800b814 <_ZL12MX_CAN1_Initv+0xbc>)
 800b762:	601a      	str	r2, [r3, #0]
    hcan1.Init.Prescaler = 16;
 800b764:	4b2a      	ldr	r3, [pc, #168]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b766:	2210      	movs	r2, #16
 800b768:	605a      	str	r2, [r3, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 800b76a:	4b29      	ldr	r3, [pc, #164]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	609a      	str	r2, [r3, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800b770:	4b27      	ldr	r3, [pc, #156]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b772:	2200      	movs	r2, #0
 800b774:	60da      	str	r2, [r3, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800b776:	4b26      	ldr	r3, [pc, #152]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b778:	2200      	movs	r2, #0
 800b77a:	611a      	str	r2, [r3, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800b77c:	4b24      	ldr	r3, [pc, #144]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b77e:	2200      	movs	r2, #0
 800b780:	615a      	str	r2, [r3, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 800b782:	4b23      	ldr	r3, [pc, #140]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b784:	2200      	movs	r2, #0
 800b786:	761a      	strb	r2, [r3, #24]
    hcan1.Init.AutoBusOff = DISABLE;
 800b788:	4b21      	ldr	r3, [pc, #132]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	765a      	strb	r2, [r3, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 800b78e:	4b20      	ldr	r3, [pc, #128]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b790:	2200      	movs	r2, #0
 800b792:	769a      	strb	r2, [r3, #26]
    hcan1.Init.AutoRetransmission = DISABLE;
 800b794:	4b1e      	ldr	r3, [pc, #120]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b796:	2200      	movs	r2, #0
 800b798:	76da      	strb	r2, [r3, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 800b79a:	4b1d      	ldr	r3, [pc, #116]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	771a      	strb	r2, [r3, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 800b7a0:	4b1b      	ldr	r3, [pc, #108]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800b7a6:	481a      	ldr	r0, [pc, #104]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b7a8:	f7f5 f93a 	bl	8000a20 <HAL_CAN_Init>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	bf14      	ite	ne
 800b7b2:	2301      	movne	r3, #1
 800b7b4:	2300      	moveq	r3, #0
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <_ZL12MX_CAN1_Initv+0x68>
        Error_Handler();
 800b7bc:	f000 ff50 	bl	800c660 <Error_Handler>
    /* USER CODE BEGIN CAN1_Init 2 */

    sFilterConfig.FilterBank = 0;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // allows two IDs to be set to one filter with IDLIST
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000; // first ID
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000; //second ID
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000; // don't think anything goes here
 800b7d8:	2300      	movs	r3, #0
 800b7da:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 800b7e4:	230e      	movs	r3, #14
 800b7e6:	627b      	str	r3, [r7, #36]	; 0x24

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800b7e8:	463b      	mov	r3, r7
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	4808      	ldr	r0, [pc, #32]	; (800b810 <_ZL12MX_CAN1_Initv+0xb8>)
 800b7ee:	f7f5 fa13 	bl	8000c18 <HAL_CAN_ConfigFilter>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	bf14      	ite	ne
 800b7f8:	2301      	movne	r3, #1
 800b7fa:	2300      	moveq	r3, #0
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <_ZL12MX_CAN1_Initv+0xae>
        /* Filter configuration Error */
        Error_Handler();
 800b802:	f000 ff2d 	bl	800c660 <Error_Handler>
    }


    /* USER CODE END CAN1_Init 2 */

}
 800b806:	bf00      	nop
 800b808:	3728      	adds	r7, #40	; 0x28
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	200000c4 	.word	0x200000c4
 800b814:	40006400 	.word	0x40006400

0800b818 <_ZL12MX_CAN2_Initv>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b08a      	sub	sp, #40	; 0x28
 800b81c:	af00      	add	r7, sp, #0
    /* USER CODE END CAN2_Init 0 */

    /* USER CODE BEGIN CAN2_Init 1 */

    /* USER CODE END CAN2_Init 1 */
    hcan2.Instance = CAN2;
 800b81e:	4b2c      	ldr	r3, [pc, #176]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b820:	4a2c      	ldr	r2, [pc, #176]	; (800b8d4 <_ZL12MX_CAN2_Initv+0xbc>)
 800b822:	601a      	str	r2, [r3, #0]
    hcan2.Init.Prescaler = 16;
 800b824:	4b2a      	ldr	r3, [pc, #168]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b826:	2210      	movs	r2, #16
 800b828:	605a      	str	r2, [r3, #4]
    hcan2.Init.Mode = CAN_MODE_NORMAL;
 800b82a:	4b29      	ldr	r3, [pc, #164]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	609a      	str	r2, [r3, #8]
    hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800b830:	4b27      	ldr	r3, [pc, #156]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b832:	2200      	movs	r2, #0
 800b834:	60da      	str	r2, [r3, #12]
    hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800b836:	4b26      	ldr	r3, [pc, #152]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b838:	2200      	movs	r2, #0
 800b83a:	611a      	str	r2, [r3, #16]
    hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800b83c:	4b24      	ldr	r3, [pc, #144]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b83e:	2200      	movs	r2, #0
 800b840:	615a      	str	r2, [r3, #20]
    hcan2.Init.TimeTriggeredMode = DISABLE;
 800b842:	4b23      	ldr	r3, [pc, #140]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b844:	2200      	movs	r2, #0
 800b846:	761a      	strb	r2, [r3, #24]
    hcan2.Init.AutoBusOff = DISABLE;
 800b848:	4b21      	ldr	r3, [pc, #132]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	765a      	strb	r2, [r3, #25]
    hcan2.Init.AutoWakeUp = DISABLE;
 800b84e:	4b20      	ldr	r3, [pc, #128]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b850:	2200      	movs	r2, #0
 800b852:	769a      	strb	r2, [r3, #26]
    hcan2.Init.AutoRetransmission = DISABLE;
 800b854:	4b1e      	ldr	r3, [pc, #120]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b856:	2200      	movs	r2, #0
 800b858:	76da      	strb	r2, [r3, #27]
    hcan2.Init.ReceiveFifoLocked = DISABLE;
 800b85a:	4b1d      	ldr	r3, [pc, #116]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	771a      	strb	r2, [r3, #28]
    hcan2.Init.TransmitFifoPriority = DISABLE;
 800b860:	4b1b      	ldr	r3, [pc, #108]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b862:	2200      	movs	r2, #0
 800b864:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800b866:	481a      	ldr	r0, [pc, #104]	; (800b8d0 <_ZL12MX_CAN2_Initv+0xb8>)
 800b868:	f7f5 f8da 	bl	8000a20 <HAL_CAN_Init>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	bf14      	ite	ne
 800b872:	2301      	movne	r3, #1
 800b874:	2300      	moveq	r3, #0
 800b876:	b2db      	uxtb	r3, r3
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d001      	beq.n	800b880 <_ZL12MX_CAN2_Initv+0x68>
    {
        Error_Handler();
 800b87c:	f000 fef0 	bl	800c660 <Error_Handler>
    }
    /* USER CODE BEGIN CAN2_Init 2 */
    sFilterConfig.FilterBank = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800b884:	2300      	movs	r3, #0
 800b886:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // allows two IDs to be set to one filter with IDLIST
 800b888:	2301      	movs	r3, #1
 800b88a:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000; // first ID
 800b88c:	2300      	movs	r3, #0
 800b88e:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 800b890:	2300      	movs	r3, #0
 800b892:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000; //second ID
 800b894:	2300      	movs	r3, #0
 800b896:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000; // don't think anything goes here
 800b898:	2300      	movs	r3, #0
 800b89a:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 800b8a4:	230e      	movs	r3, #14
 800b8a6:	627b      	str	r3, [r7, #36]	; 0x24

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800b8a8:	463b      	mov	r3, r7
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	480a      	ldr	r0, [pc, #40]	; (800b8d8 <_ZL12MX_CAN2_Initv+0xc0>)
 800b8ae:	f7f5 f9b3 	bl	8000c18 <HAL_CAN_ConfigFilter>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	bf14      	ite	ne
 800b8b8:	2301      	movne	r3, #1
 800b8ba:	2300      	moveq	r3, #0
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <_ZL12MX_CAN2_Initv+0xae>
        /* Filter configuration Error */
        Error_Handler();
 800b8c2:	f000 fecd 	bl	800c660 <Error_Handler>
    }
    /* USER CODE END CAN2_Init 2 */

}
 800b8c6:	bf00      	nop
 800b8c8:	3728      	adds	r7, #40	; 0x28
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	200000ec 	.word	0x200000ec
 800b8d4:	40006800 	.word	0x40006800
 800b8d8:	200000c4 	.word	0x200000c4

0800b8dc <_ZL15MX_SDIO_SD_Initv>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 800b8e0:	4b0c      	ldr	r3, [pc, #48]	; (800b914 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b8e2:	4a0d      	ldr	r2, [pc, #52]	; (800b918 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 800b8e4:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800b8e6:	4b0b      	ldr	r3, [pc, #44]	; (800b914 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800b8ec:	4b09      	ldr	r3, [pc, #36]	; (800b914 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b8f2:	4b08      	ldr	r3, [pc, #32]	; (800b914 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800b8f8:	4b06      	ldr	r3, [pc, #24]	; (800b914 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b8fe:	4b05      	ldr	r3, [pc, #20]	; (800b914 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b900:	2200      	movs	r2, #0
 800b902:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 0;
 800b904:	4b03      	ldr	r3, [pc, #12]	; (800b914 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800b906:	2200      	movs	r2, #0
 800b908:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 800b90a:	bf00      	nop
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr
 800b914:	20000114 	.word	0x20000114
 800b918:	40012c00 	.word	0x40012c00

0800b91c <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 800b920:	4b1a      	ldr	r3, [pc, #104]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b922:	4a1b      	ldr	r2, [pc, #108]	; (800b990 <_ZL12MX_SPI1_Initv+0x74>)
 800b924:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800b926:	4b19      	ldr	r3, [pc, #100]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b92c:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800b92e:	4b17      	ldr	r3, [pc, #92]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b930:	2200      	movs	r2, #0
 800b932:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT; // correct
 800b934:	4b15      	ldr	r3, [pc, #84]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b936:	2200      	movs	r2, #0
 800b938:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; // correct
 800b93a:	4b14      	ldr	r3, [pc, #80]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE; // I THINK this is now correct (was 0)
 800b940:	4b12      	ldr	r3, [pc, #72]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b942:	2201      	movs	r2, #1
 800b944:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800b946:	4b11      	ldr	r3, [pc, #68]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b94c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b94e:	4b0f      	ldr	r3, [pc, #60]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b950:	2200      	movs	r2, #0
 800b952:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b954:	4b0d      	ldr	r3, [pc, #52]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b956:	2200      	movs	r2, #0
 800b958:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b95a:	4b0c      	ldr	r3, [pc, #48]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b960:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b962:	2200      	movs	r2, #0
 800b964:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 800b966:	4b09      	ldr	r3, [pc, #36]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b968:	220a      	movs	r2, #10
 800b96a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b96c:	4807      	ldr	r0, [pc, #28]	; (800b98c <_ZL12MX_SPI1_Initv+0x70>)
 800b96e:	f7f8 fa63 	bl	8003e38 <HAL_SPI_Init>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	bf14      	ite	ne
 800b978:	2301      	movne	r3, #1
 800b97a:	2300      	moveq	r3, #0
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <_ZL12MX_SPI1_Initv+0x6a>
    {
        Error_Handler();
 800b982:	f000 fe6d 	bl	800c660 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 800b986:	bf00      	nop
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	20000198 	.word	0x20000198
 800b990:	40013000 	.word	0x40013000

0800b994 <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b08e      	sub	sp, #56	; 0x38
 800b998:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b99a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b99e:	2200      	movs	r2, #0
 800b9a0:	601a      	str	r2, [r3, #0]
 800b9a2:	605a      	str	r2, [r3, #4]
 800b9a4:	609a      	str	r2, [r3, #8]
 800b9a6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b9a8:	f107 0320 	add.w	r3, r7, #32
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]
 800b9b0:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800b9b2:	1d3b      	adds	r3, r7, #4
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	605a      	str	r2, [r3, #4]
 800b9ba:	609a      	str	r2, [r3, #8]
 800b9bc:	60da      	str	r2, [r3, #12]
 800b9be:	611a      	str	r2, [r3, #16]
 800b9c0:	615a      	str	r2, [r3, #20]
 800b9c2:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */
    /* In the code below, prescaler is 800 as 16MHz / 800 == 20kHz. */
    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 800b9c4:	4b3a      	ldr	r3, [pc, #232]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800b9c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b9ca:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 800;
 800b9cc:	4b38      	ldr	r3, [pc, #224]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800b9ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b9d2:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b9d4:	4b36      	ldr	r3, [pc, #216]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 19999;
 800b9da:	4b35      	ldr	r3, [pc, #212]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800b9dc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800b9e0:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b9e2:	4b33      	ldr	r3, [pc, #204]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b9e8:	4b31      	ldr	r3, [pc, #196]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b9ee:	4830      	ldr	r0, [pc, #192]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800b9f0:	f7f8 ff76 	bl	80048e0 <HAL_TIM_Base_Init>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	bf14      	ite	ne
 800b9fa:	2301      	movne	r3, #1
 800b9fc:	2300      	moveq	r3, #0
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <_ZL12MX_TIM2_Initv+0x74>
    {
        Error_Handler();
 800ba04:	f000 fe2c 	bl	800c660 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ba08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba0c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ba0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba12:	4619      	mov	r1, r3
 800ba14:	4826      	ldr	r0, [pc, #152]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800ba16:	f7f9 f8c7 	bl	8004ba8 <HAL_TIM_ConfigClockSource>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	bf14      	ite	ne
 800ba20:	2301      	movne	r3, #1
 800ba22:	2300      	moveq	r3, #0
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <_ZL12MX_TIM2_Initv+0x9a>
    {
        Error_Handler();
 800ba2a:	f000 fe19 	bl	800c660 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800ba2e:	4820      	ldr	r0, [pc, #128]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800ba30:	f7f8 ff81 	bl	8004936 <HAL_TIM_PWM_Init>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	bf14      	ite	ne
 800ba3a:	2301      	movne	r3, #1
 800ba3c:	2300      	moveq	r3, #0
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <_ZL12MX_TIM2_Initv+0xb4>
    {
        Error_Handler();
 800ba44:	f000 fe0c 	bl	800c660 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ba50:	f107 0320 	add.w	r3, r7, #32
 800ba54:	4619      	mov	r1, r3
 800ba56:	4816      	ldr	r0, [pc, #88]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800ba58:	f7f9 fc6e 	bl	8005338 <HAL_TIMEx_MasterConfigSynchronization>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	bf14      	ite	ne
 800ba62:	2301      	movne	r3, #1
 800ba64:	2300      	moveq	r3, #0
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d001      	beq.n	800ba70 <_ZL12MX_TIM2_Initv+0xdc>
    {
        Error_Handler();
 800ba6c:	f000 fdf8 	bl	800c660 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ba70:	2360      	movs	r3, #96	; 0x60
 800ba72:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ba80:	1d3b      	adds	r3, r7, #4
 800ba82:	220c      	movs	r2, #12
 800ba84:	4619      	mov	r1, r3
 800ba86:	480a      	ldr	r0, [pc, #40]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800ba88:	f7f8 ffc8 	bl	8004a1c <HAL_TIM_PWM_ConfigChannel>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	bf14      	ite	ne
 800ba92:	2301      	movne	r3, #1
 800ba94:	2300      	moveq	r3, #0
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <_ZL12MX_TIM2_Initv+0x10c>
    {
        Error_Handler();
 800ba9c:	f000 fde0 	bl	800c660 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 800baa0:	4803      	ldr	r0, [pc, #12]	; (800bab0 <_ZL12MX_TIM2_Initv+0x11c>)
 800baa2:	f001 faad 	bl	800d000 <HAL_TIM_MspPostInit>

}
 800baa6:	bf00      	nop
 800baa8:	3738      	adds	r7, #56	; 0x38
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	200001f0 	.word	0x200001f0

0800bab4 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b08a      	sub	sp, #40	; 0x28
 800bab8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800baba:	f107 0314 	add.w	r3, r7, #20
 800babe:	2200      	movs	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	605a      	str	r2, [r3, #4]
 800bac4:	609a      	str	r2, [r3, #8]
 800bac6:	60da      	str	r2, [r3, #12]
 800bac8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800baca:	2300      	movs	r3, #0
 800bacc:	613b      	str	r3, [r7, #16]
 800bace:	4b55      	ldr	r3, [pc, #340]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800bad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad2:	4a54      	ldr	r2, [pc, #336]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800bad4:	f043 0304 	orr.w	r3, r3, #4
 800bad8:	6313      	str	r3, [r2, #48]	; 0x30
 800bada:	4b52      	ldr	r3, [pc, #328]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800badc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bade:	f003 0304 	and.w	r3, r3, #4
 800bae2:	613b      	str	r3, [r7, #16]
 800bae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800bae6:	2300      	movs	r3, #0
 800bae8:	60fb      	str	r3, [r7, #12]
 800baea:	4b4e      	ldr	r3, [pc, #312]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800baec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baee:	4a4d      	ldr	r2, [pc, #308]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800baf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baf4:	6313      	str	r3, [r2, #48]	; 0x30
 800baf6:	4b4b      	ldr	r3, [pc, #300]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800baf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bafa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bafe:	60fb      	str	r3, [r7, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb02:	2300      	movs	r3, #0
 800bb04:	60bb      	str	r3, [r7, #8]
 800bb06:	4b47      	ldr	r3, [pc, #284]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800bb08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb0a:	4a46      	ldr	r2, [pc, #280]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800bb0c:	f043 0301 	orr.w	r3, r3, #1
 800bb10:	6313      	str	r3, [r2, #48]	; 0x30
 800bb12:	4b44      	ldr	r3, [pc, #272]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800bb14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	60bb      	str	r3, [r7, #8]
 800bb1c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb1e:	2300      	movs	r3, #0
 800bb20:	607b      	str	r3, [r7, #4]
 800bb22:	4b40      	ldr	r3, [pc, #256]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800bb24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb26:	4a3f      	ldr	r2, [pc, #252]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800bb28:	f043 0302 	orr.w	r3, r3, #2
 800bb2c:	6313      	str	r3, [r2, #48]	; 0x30
 800bb2e:	4b3d      	ldr	r3, [pc, #244]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800bb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb32:	f003 0302 	and.w	r3, r3, #2
 800bb36:	607b      	str	r3, [r7, #4]
 800bb38:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	603b      	str	r3, [r7, #0]
 800bb3e:	4b39      	ldr	r3, [pc, #228]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800bb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb42:	4a38      	ldr	r2, [pc, #224]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800bb44:	f043 0308 	orr.w	r3, r3, #8
 800bb48:	6313      	str	r3, [r2, #48]	; 0x30
 800bb4a:	4b36      	ldr	r3, [pc, #216]	; (800bc24 <_ZL12MX_GPIO_Initv+0x170>)
 800bb4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb4e:	f003 0308 	and.w	r3, r3, #8
 800bb52:	603b      	str	r3, [r7, #0]
 800bb54:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 800bb56:	2201      	movs	r2, #1
 800bb58:	213f      	movs	r1, #63	; 0x3f
 800bb5a:	4833      	ldr	r0, [pc, #204]	; (800bc28 <_ZL12MX_GPIO_Initv+0x174>)
 800bb5c:	f7f6 f804 	bl	8001b68 <HAL_GPIO_WritePin>
            |IO_1_Pin|IO_2_Pin, GPIO_PIN_SET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(IO_0_GPIO_Port, IO_0_Pin, GPIO_PIN_RESET);
 800bb60:	2200      	movs	r2, #0
 800bb62:	2180      	movs	r1, #128	; 0x80
 800bb64:	4831      	ldr	r0, [pc, #196]	; (800bc2c <_ZL12MX_GPIO_Initv+0x178>)
 800bb66:	f7f5 ffff 	bl	8001b68 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, PreCharge_Pin|BMSrelay_Pin, GPIO_PIN_RESET);
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	2103      	movs	r1, #3
 800bb6e:	4830      	ldr	r0, [pc, #192]	; (800bc30 <_ZL12MX_GPIO_Initv+0x17c>)
 800bb70:	f7f5 fffa 	bl	8001b68 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : Led0_Pin Led1_Pin Led2_Pin Led3_Pin
                           IO_1_Pin IO_2_Pin */
    GPIO_InitStruct.Pin = Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 800bb74:	233f      	movs	r3, #63	; 0x3f
 800bb76:	617b      	str	r3, [r7, #20]
            |IO_1_Pin|IO_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb80:	2300      	movs	r3, #0
 800bb82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bb84:	f107 0314 	add.w	r3, r7, #20
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4827      	ldr	r0, [pc, #156]	; (800bc28 <_ZL12MX_GPIO_Initv+0x174>)
 800bb8c:	f7f5 fe42 	bl	8001814 <HAL_GPIO_Init>

    /*Configure GPIO pin : IO_0_Pin */
    GPIO_InitStruct.Pin = IO_0_Pin;
 800bb90:	2380      	movs	r3, #128	; 0x80
 800bb92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb94:	2301      	movs	r3, #1
 800bb96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(IO_0_GPIO_Port, &GPIO_InitStruct);
 800bba0:	f107 0314 	add.w	r3, r7, #20
 800bba4:	4619      	mov	r1, r3
 800bba6:	4821      	ldr	r0, [pc, #132]	; (800bc2c <_ZL12MX_GPIO_Initv+0x178>)
 800bba8:	f7f5 fe34 	bl	8001814 <HAL_GPIO_Init>

    /*Configure GPIO pins : PreCharge_Pin BMSrelay_Pin */
    GPIO_InitStruct.Pin = PreCharge_Pin|BMSrelay_Pin;
 800bbac:	2303      	movs	r3, #3
 800bbae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbbc:	f107 0314 	add.w	r3, r7, #20
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	481b      	ldr	r0, [pc, #108]	; (800bc30 <_ZL12MX_GPIO_Initv+0x17c>)
 800bbc4:	f7f5 fe26 	bl	8001814 <HAL_GPIO_Init>

    /*Configure GPIO pin : FansPWM_Pin */
    GPIO_InitStruct.Pin = FansPWM_Pin;
 800bbc8:	2304      	movs	r3, #4
 800bbca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbcc:	2302      	movs	r3, #2
 800bbce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 800bbdc:	f107 0314 	add.w	r3, r7, #20
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	4813      	ldr	r0, [pc, #76]	; (800bc30 <_ZL12MX_GPIO_Initv+0x17c>)
 800bbe4:	f7f5 fe16 	bl	8001814 <HAL_GPIO_Init>

    /*Configure GPIO pins : Det_Pin Lock_Pin Det_Lock_Pin */
    GPIO_InitStruct.Pin = Det_Pin|Lock_Pin|Det_Lock_Pin;
 800bbe8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800bbec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbf6:	f107 0314 	add.w	r3, r7, #20
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	480b      	ldr	r0, [pc, #44]	; (800bc2c <_ZL12MX_GPIO_Initv+0x178>)
 800bbfe:	f7f5 fe09 	bl	8001814 <HAL_GPIO_Init>

    /*Configure GPIO pin : SOS_Pin */
    GPIO_InitStruct.Pin = SOS_Pin;
 800bc02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 800bc10:	f107 0314 	add.w	r3, r7, #20
 800bc14:	4619      	mov	r1, r3
 800bc16:	4806      	ldr	r0, [pc, #24]	; (800bc30 <_ZL12MX_GPIO_Initv+0x17c>)
 800bc18:	f7f5 fdfc 	bl	8001814 <HAL_GPIO_Init>

}
 800bc1c:	bf00      	nop
 800bc1e:	3728      	adds	r7, #40	; 0x28
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	40023800 	.word	0x40023800
 800bc28:	40020800 	.word	0x40020800
 800bc2c:	40020000 	.word	0x40020000
 800bc30:	40020400 	.word	0x40020400

0800bc34 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// CAN0 / CAN2
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08c      	sub	sp, #48	; 0x30
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[8]{ 0 };
 800bc3c:	f107 030c 	add.w	r3, r7, #12
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]
 800bc44:	605a      	str	r2, [r3, #4]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800bc46:	f107 030c 	add.w	r3, r7, #12
 800bc4a:	f107 0214 	add.w	r2, r7, #20
 800bc4e:	2100      	movs	r1, #0
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7f5 f99c 	bl	8000f8e <HAL_CAN_GetRxMessage>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	bf0c      	ite	eq
 800bc5c:	2301      	moveq	r3, #1
 800bc5e:	2300      	movne	r3, #0
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d073      	beq.n	800bd4e <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
        switch(static_cast<CAN0_ID>(RxHeader.StdId)) {
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	f240 5222 	movw	r2, #1314	; 0x522
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d02a      	beq.n	800bcc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
 800bc72:	f240 5223 	movw	r2, #1315	; 0x523
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d047      	beq.n	800bd0a <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
 800bc7a:	f240 5221 	movw	r2, #1313	; 0x521
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d000      	beq.n	800bc84 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
            ivt->U2 = static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f;
            ivt->tick = 0;
            break;

        default:
            break;
 800bc82:	e064      	b.n	800bd4e <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
            ivt->I = static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f;
 800bc84:	7bbb      	ldrb	r3, [r7, #14]
 800bc86:	061a      	lsls	r2, r3, #24
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	041b      	lsls	r3, r3, #16
 800bc8c:	431a      	orrs	r2, r3
 800bc8e:	7c3b      	ldrb	r3, [r7, #16]
 800bc90:	021b      	lsls	r3, r3, #8
 800bc92:	4313      	orrs	r3, r2
 800bc94:	7c7a      	ldrb	r2, [r7, #17]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	ee07 3a90 	vmov	s15, r3
 800bc9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bca0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800bd58 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
 800bca4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bca8:	4b2c      	ldr	r3, [pc, #176]	; (800bd5c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3308      	adds	r3, #8
 800bcae:	eeb0 0a66 	vmov.f32	s0, s13
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 fde7 	bl	800c886 <_ZNSt6atomicIfEaSEf>
            ivt->tick = 0;
 800bcb8:	4b28      	ldr	r3, [pc, #160]	; (800bd5c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	330c      	adds	r3, #12
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f000 fd1c 	bl	800c6fe <_ZNSt13__atomic_baseImEaSEm>
            break;
 800bcc6:	e042      	b.n	800bd4e <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
            ivt->U1 = static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f;
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
 800bcca:	061a      	lsls	r2, r3, #24
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	041b      	lsls	r3, r3, #16
 800bcd0:	431a      	orrs	r2, r3
 800bcd2:	7c3b      	ldrb	r3, [r7, #16]
 800bcd4:	021b      	lsls	r3, r3, #8
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	7c7a      	ldrb	r2, [r7, #17]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	ee07 3a90 	vmov	s15, r3
 800bce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bce4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800bd58 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
 800bce8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bcec:	4b1b      	ldr	r3, [pc, #108]	; (800bd5c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	eeb0 0a66 	vmov.f32	s0, s13
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 fdc6 	bl	800c886 <_ZNSt6atomicIfEaSEf>
            ivt->tick = 0;
 800bcfa:	4b18      	ldr	r3, [pc, #96]	; (800bd5c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	330c      	adds	r3, #12
 800bd00:	2100      	movs	r1, #0
 800bd02:	4618      	mov	r0, r3
 800bd04:	f000 fcfb 	bl	800c6fe <_ZNSt13__atomic_baseImEaSEm>
            break;
 800bd08:	e021      	b.n	800bd4e <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
            ivt->U2 = static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f;
 800bd0a:	7bbb      	ldrb	r3, [r7, #14]
 800bd0c:	061a      	lsls	r2, r3, #24
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
 800bd10:	041b      	lsls	r3, r3, #16
 800bd12:	431a      	orrs	r2, r3
 800bd14:	7c3b      	ldrb	r3, [r7, #16]
 800bd16:	021b      	lsls	r3, r3, #8
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	7c7a      	ldrb	r2, [r7, #17]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	ee07 3a90 	vmov	s15, r3
 800bd22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd26:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800bd58 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
 800bd2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bd2e:	4b0b      	ldr	r3, [pc, #44]	; (800bd5c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	3304      	adds	r3, #4
 800bd34:	eeb0 0a66 	vmov.f32	s0, s13
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 fda4 	bl	800c886 <_ZNSt6atomicIfEaSEf>
            ivt->tick = 0;
 800bd3e:	4b07      	ldr	r3, [pc, #28]	; (800bd5c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	330c      	adds	r3, #12
 800bd44:	2100      	movs	r1, #0
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 fcd9 	bl	800c6fe <_ZNSt13__atomic_baseImEaSEm>
            break;
 800bd4c:	bf00      	nop
        }
    }
}
 800bd4e:	bf00      	nop
 800bd50:	3730      	adds	r7, #48	; 0x30
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	447a0000 	.word	0x447a0000
 800bd5c:	20000254 	.word	0x20000254

0800bd60 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN1
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08c      	sub	sp, #48	; 0x30
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[8]{ 0 };
 800bd68:	f107 030c 	add.w	r3, r7, #12
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	605a      	str	r2, [r3, #4]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800bd72:	f107 030c 	add.w	r3, r7, #12
 800bd76:	f107 0214 	add.w	r2, r7, #20
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7f5 f906 	bl	8000f8e <HAL_CAN_GetRxMessage>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	bf0c      	ite	eq
 800bd88:	2301      	moveq	r3, #1
 800bd8a:	2300      	movne	r3, #0
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 809f 	beq.w	800bed2 <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
        switch(static_cast<CAN1_ID>(RxHeader.StdId)) {
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 800bd9c:	d020      	beq.n	800bde0 <HAL_CAN_RxFifo1MsgPendingCallback+0x80>
 800bd9e:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 800bda2:	dc03      	bgt.n	800bdac <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
 800bda4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800bda8:	d009      	beq.n	800bdbe <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
            pwm_fan->manual_mode = static_cast<bool>(data[7] & 0x80);
            pwm_fan->setDutyCycle(data[7]);
            break;

        default:
            break;
 800bdaa:	e092      	b.n	800bed2 <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
        switch(static_cast<CAN1_ID>(RxHeader.StdId)) {
 800bdac:	f240 726e 	movw	r2, #1902	; 0x76e
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d06b      	beq.n	800be8c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
 800bdb4:	f240 72b4 	movw	r2, #1972	; 0x7b4
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d022      	beq.n	800be02 <HAL_CAN_RxFifo1MsgPendingCallback+0xa2>
            break;
 800bdbc:	e089      	b.n	800bed2 <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
            nlg5->a_buffer[0] = data[0];
 800bdbe:	4b47      	ldr	r3, [pc, #284]	; (800bedc <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	7b3a      	ldrb	r2, [r7, #12]
 800bdc4:	721a      	strb	r2, [r3, #8]
            nlg5->a_buffer[1] = data[1];
 800bdc6:	4b45      	ldr	r3, [pc, #276]	; (800bedc <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	7b7a      	ldrb	r2, [r7, #13]
 800bdcc:	725a      	strb	r2, [r3, #9]
            nlg5->a_buffer[2] = data[2];
 800bdce:	4b43      	ldr	r3, [pc, #268]	; (800bedc <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	7bba      	ldrb	r2, [r7, #14]
 800bdd4:	729a      	strb	r2, [r3, #10]
            nlg5->a_buffer[3] = data[3];
 800bdd6:	4b41      	ldr	r3, [pc, #260]	; (800bedc <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	7bfa      	ldrb	r2, [r7, #15]
 800bddc:	72da      	strb	r2, [r3, #11]
            break;
 800bdde:	e078      	b.n	800bed2 <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
            nlg5->b_buffer[0] = data[0];
 800bde0:	4b3e      	ldr	r3, [pc, #248]	; (800bedc <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	7b3a      	ldrb	r2, [r7, #12]
 800bde6:	731a      	strb	r2, [r3, #12]
            nlg5->b_buffer[1] = data[1];
 800bde8:	4b3c      	ldr	r3, [pc, #240]	; (800bedc <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	7b7a      	ldrb	r2, [r7, #13]
 800bdee:	735a      	strb	r2, [r3, #13]
            nlg5->b_buffer[2] = data[2];
 800bdf0:	4b3a      	ldr	r3, [pc, #232]	; (800bedc <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	7bba      	ldrb	r2, [r7, #14]
 800bdf6:	739a      	strb	r2, [r3, #14]
            nlg5->b_buffer[3] = data[3];
 800bdf8:	4b38      	ldr	r3, [pc, #224]	; (800bedc <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	7bfa      	ldrb	r2, [r7, #15]
 800bdfe:	73da      	strb	r2, [r3, #15]
            break;
 800be00:	e067      	b.n	800bed2 <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
            switch (data[3]) {
 800be02:	7bfb      	ldrb	r3, [r7, #15]
 800be04:	2b03      	cmp	r3, #3
 800be06:	d83d      	bhi.n	800be84 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>
 800be08:	a201      	add	r2, pc, #4	; (adr r2, 800be10 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>)
 800be0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0e:	bf00      	nop
 800be10:	0800be85 	.word	0x0800be85
 800be14:	0800be21 	.word	0x0800be21
 800be18:	0800be59 	.word	0x0800be59
 800be1c:	0800be85 	.word	0x0800be85
                if (f_mount(&SDFatFS, "", 0) == FR_OK) {
 800be20:	2200      	movs	r2, #0
 800be22:	492f      	ldr	r1, [pc, #188]	; (800bee0 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>)
 800be24:	482f      	ldr	r0, [pc, #188]	; (800bee4 <HAL_CAN_RxFifo1MsgPendingCallback+0x184>)
 800be26:	f7fb fe77 	bl	8007b18 <f_mount>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	bf0c      	ite	eq
 800be30:	2301      	moveq	r3, #1
 800be32:	2300      	movne	r3, #0
 800be34:	b2db      	uxtb	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>
                    CANTxVolumeSize(f_size(&SDFile));
 800be3a:	4b2b      	ldr	r3, [pc, #172]	; (800bee8 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>)
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 fbd6 	bl	800c5f0 <_Z15CANTxVolumeSizem>
                    f_mount(NULL, "", 0); /* Unmount */
 800be44:	2200      	movs	r2, #0
 800be46:	4926      	ldr	r1, [pc, #152]	; (800bee0 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>)
 800be48:	2000      	movs	r0, #0
 800be4a:	f7fb fe65 	bl	8007b18 <f_mount>
                break;
 800be4e:	e01c      	b.n	800be8a <HAL_CAN_RxFifo1MsgPendingCallback+0x12a>
                    CANTxVolumeSize(0);
 800be50:	2000      	movs	r0, #0
 800be52:	f000 fbcd 	bl	800c5f0 <_Z15CANTxVolumeSizem>
                break;
 800be56:	e018      	b.n	800be8a <HAL_CAN_RxFifo1MsgPendingCallback+0x12a>
                if (f_mount(&SDFatFS, "", 0) == FR_OK) {
 800be58:	2200      	movs	r2, #0
 800be5a:	4921      	ldr	r1, [pc, #132]	; (800bee0 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>)
 800be5c:	4821      	ldr	r0, [pc, #132]	; (800bee4 <HAL_CAN_RxFifo1MsgPendingCallback+0x184>)
 800be5e:	f7fb fe5b 	bl	8007b18 <f_mount>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	bf0c      	ite	eq
 800be68:	2301      	moveq	r3, #1
 800be6a:	2300      	movne	r3, #0
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00a      	beq.n	800be88 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
                    f_unlink(kFile);
 800be72:	481e      	ldr	r0, [pc, #120]	; (800beec <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800be74:	f7fc faaa 	bl	80083cc <f_unlink>
                    f_mount(NULL, "", 0); /* Unmount */
 800be78:	2200      	movs	r2, #0
 800be7a:	4919      	ldr	r1, [pc, #100]	; (800bee0 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>)
 800be7c:	2000      	movs	r0, #0
 800be7e:	f7fb fe4b 	bl	8007b18 <f_mount>
                break;
 800be82:	e001      	b.n	800be88 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
                break;
 800be84:	bf00      	nop
 800be86:	e024      	b.n	800bed2 <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
                break;
 800be88:	bf00      	nop
            break;
 800be8a:	e022      	b.n	800bed2 <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
            status->setOpMode(data[2]);
 800be8c:	4b18      	ldr	r3, [pc, #96]	; (800bef0 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	7bba      	ldrb	r2, [r7, #14]
 800be92:	4611      	mov	r1, r2
 800be94:	4618      	mov	r0, r3
 800be96:	f7fe fbb0 	bl	800a5fa <_ZN6Status9setOpModeEh>
            ltc6811->SetDischargeMode(static_cast<LTC6811::DischargeMode>(data[3]));
 800be9a:	4b16      	ldr	r3, [pc, #88]	; (800bef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	7bfa      	ldrb	r2, [r7, #15]
 800bea0:	4611      	mov	r1, r2
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fe fd8c 	bl	800a9c0 <_ZN7LTC681116SetDischargeModeENS_13DischargeModeE>
            nlg5->oc_limit = data[6];
 800bea8:	7cba      	ldrb	r2, [r7, #18]
 800beaa:	4b0c      	ldr	r3, [pc, #48]	; (800bedc <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	b292      	uxth	r2, r2
 800beb0:	809a      	strh	r2, [r3, #4]
            pwm_fan->manual_mode = static_cast<bool>(data[7] & 0x80);
 800beb2:	7cfb      	ldrb	r3, [r7, #19]
 800beb4:	b25a      	sxtb	r2, r3
 800beb6:	4b10      	ldr	r3, [pc, #64]	; (800bef8 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	b2d2      	uxtb	r2, r2
 800bebc:	09d2      	lsrs	r2, r2, #7
 800bebe:	b2d2      	uxtb	r2, r2
 800bec0:	701a      	strb	r2, [r3, #0]
            pwm_fan->setDutyCycle(data[7]);
 800bec2:	4b0d      	ldr	r3, [pc, #52]	; (800bef8 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	7cfa      	ldrb	r2, [r7, #19]
 800bec8:	4611      	mov	r1, r2
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe fdbf 	bl	800aa4e <_ZNK7PWM_Fan12setDutyCycleEh>
            break;
 800bed0:	bf00      	nop
        }
    }
}
 800bed2:	bf00      	nop
 800bed4:	3730      	adds	r7, #48	; 0x30
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20000248 	.word	0x20000248
 800bee0:	0800d818 	.word	0x0800d818
 800bee4:	200004b0 	.word	0x200004b0
 800bee8:	20000280 	.word	0x20000280
 800beec:	0800d808 	.word	0x0800d808
 800bef0:	2000024c 	.word	0x2000024c
 800bef4:	20000250 	.word	0x20000250
 800bef8:	20000258 	.word	0x20000258

0800befc <_Z11CANTxStatusv>:
        return Fail;
    else
        return Success;
}

uint32_t CANTxStatus(void) {
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
    TxHeader.StdId = CAN1_ID::OpMode;
 800bf02:	4b2a      	ldr	r3, [pc, #168]	; (800bfac <_Z11CANTxStatusv+0xb0>)
 800bf04:	2208      	movs	r2, #8
 800bf06:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800bf08:	4b28      	ldr	r3, [pc, #160]	; (800bfac <_Z11CANTxStatusv+0xb0>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800bf0e:	4b27      	ldr	r3, [pc, #156]	; (800bfac <_Z11CANTxStatusv+0xb0>)
 800bf10:	2208      	movs	r2, #8
 800bf12:	611a      	str	r2, [r3, #16]

    uint32_t uptime = status->tick / 100; // TODO petition to just give uptime in ms instead of ds
 800bf14:	4b26      	ldr	r3, [pc, #152]	; (800bfb0 <_Z11CANTxStatusv+0xb4>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f000 fc1e 	bl	800c75a <_ZNKSt13__atomic_baseImEcvmEv>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	4b24      	ldr	r3, [pc, #144]	; (800bfb4 <_Z11CANTxStatusv+0xb8>)
 800bf22:	fba3 2302 	umull	r2, r3, r3, r2
 800bf26:	095b      	lsrs	r3, r3, #5
 800bf28:	60fb      	str	r3, [r7, #12]

    uint8_t data[] = {
            static_cast<uint8_t>(uptime >> 24),
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(uptime >>  0),
            status->getOpMode(),
            status->getLastError(),
            status->getPrechargeFlag(),
            status->getAIRFlag()
    };
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(uptime >> 16),
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	0c1b      	lsrs	r3, r3, #16
    };
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(uptime >>  8),
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	0a1b      	lsrs	r3, r3, #8
    };
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	71bb      	strb	r3, [r7, #6]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	71fb      	strb	r3, [r7, #7]
            status->getOpMode(),
 800bf48:	4b19      	ldr	r3, [pc, #100]	; (800bfb0 <_Z11CANTxStatusv+0xb4>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fe fb47 	bl	800a5e0 <_ZNK6Status9getOpModeEv>
 800bf52:	4603      	mov	r3, r0
    };
 800bf54:	723b      	strb	r3, [r7, #8]
            status->getLastError(),
 800bf56:	4b16      	ldr	r3, [pc, #88]	; (800bfb0 <_Z11CANTxStatusv+0xb4>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fe fc4e 	bl	800a7fc <_ZNK6Status12getLastErrorEv>
 800bf60:	4603      	mov	r3, r0
    };
 800bf62:	727b      	strb	r3, [r7, #9]
            status->getPrechargeFlag(),
 800bf64:	4b12      	ldr	r3, [pc, #72]	; (800bfb0 <_Z11CANTxStatusv+0xb4>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fe fb8b 	bl	800a684 <_ZNK6Status16getPrechargeFlagEv>
 800bf6e:	4603      	mov	r3, r0
    };
 800bf70:	72bb      	strb	r3, [r7, #10]
            status->getAIRFlag()
 800bf72:	4b0f      	ldr	r3, [pc, #60]	; (800bfb0 <_Z11CANTxStatusv+0xb4>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fe fbc6 	bl	800a708 <_ZNK6Status10getAIRFlagEv>
 800bf7c:	4603      	mov	r3, r0
    };
 800bf7e:	72fb      	strb	r3, [r7, #11]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800bf80:	1d3a      	adds	r2, r7, #4
 800bf82:	2301      	movs	r3, #1
 800bf84:	4909      	ldr	r1, [pc, #36]	; (800bfac <_Z11CANTxStatusv+0xb0>)
 800bf86:	480c      	ldr	r0, [pc, #48]	; (800bfb8 <_Z11CANTxStatusv+0xbc>)
 800bf88:	f7f4 ff26 	bl	8000dd8 <HAL_CAN_AddTxMessage>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	bf14      	ite	ne
 800bf92:	2301      	movne	r3, #1
 800bf94:	2300      	moveq	r3, #0
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <_Z11CANTxStatusv+0xa4>
        return Fail;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e000      	b.n	800bfa2 <_Z11CANTxStatusv+0xa6>
    else
        return Success;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	20000230 	.word	0x20000230
 800bfb0:	2000024c 	.word	0x2000024c
 800bfb4:	51eb851f 	.word	0x51eb851f
 800bfb8:	200000c4 	.word	0x200000c4

0800bfbc <_Z13CANTxPECErrorv>:

uint32_t CANTxPECError(void) {
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
    TxHeader.StdId = CAN1_ID::PECError;
 800bfc2:	4b25      	ldr	r3, [pc, #148]	; (800c058 <_Z13CANTxPECErrorv+0x9c>)
 800bfc4:	2209      	movs	r2, #9
 800bfc6:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800bfc8:	4b23      	ldr	r3, [pc, #140]	; (800c058 <_Z13CANTxPECErrorv+0x9c>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800bfce:	4b22      	ldr	r3, [pc, #136]	; (800c058 <_Z13CANTxPECErrorv+0x9c>)
 800bfd0:	2208      	movs	r2, #8
 800bfd2:	611a      	str	r2, [r3, #16]

    static uint32_t last_error;

    uint32_t total_error{ status->getPECError() };
 800bfd4:	4b21      	ldr	r3, [pc, #132]	; (800c05c <_Z13CANTxPECErrorv+0xa0>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe fc02 	bl	800a7e2 <_ZNK6Status11getPECErrorEv>
 800bfde:	60f8      	str	r0, [r7, #12]
    uint32_t error_change = total_error - last_error;
 800bfe0:	4b1f      	ldr	r3, [pc, #124]	; (800c060 <_Z13CANTxPECErrorv+0xa4>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	60bb      	str	r3, [r7, #8]
    uint8_t data[] = {
            static_cast<uint8_t>(total_error >> 24),
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(total_error >>  0),
            static_cast<uint8_t>(error_change >> 24),
            static_cast<uint8_t>(error_change >> 16),
            static_cast<uint8_t>(error_change >>  8),
            static_cast<uint8_t>(error_change >>  0),
    };
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	703b      	strb	r3, [r7, #0]
            static_cast<uint8_t>(total_error >> 16),
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	0c1b      	lsrs	r3, r3, #16
    };
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	707b      	strb	r3, [r7, #1]
            static_cast<uint8_t>(total_error >>  8),
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	0a1b      	lsrs	r3, r3, #8
    };
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	70bb      	strb	r3, [r7, #2]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	b2db      	uxtb	r3, r3
 800c006:	70fb      	strb	r3, [r7, #3]
            static_cast<uint8_t>(error_change >> 24),
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	0e1b      	lsrs	r3, r3, #24
    };
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(error_change >> 16),
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	0c1b      	lsrs	r3, r3, #16
    };
 800c014:	b2db      	uxtb	r3, r3
 800c016:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(error_change >>  8),
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	0a1b      	lsrs	r3, r3, #8
    };
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	71bb      	strb	r3, [r7, #6]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	b2db      	uxtb	r3, r3
 800c024:	71fb      	strb	r3, [r7, #7]

    last_error = total_error;
 800c026:	4a0e      	ldr	r2, [pc, #56]	; (800c060 <_Z13CANTxPECErrorv+0xa4>)
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6013      	str	r3, [r2, #0]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800c02c:	463a      	mov	r2, r7
 800c02e:	2301      	movs	r3, #1
 800c030:	4909      	ldr	r1, [pc, #36]	; (800c058 <_Z13CANTxPECErrorv+0x9c>)
 800c032:	480c      	ldr	r0, [pc, #48]	; (800c064 <_Z13CANTxPECErrorv+0xa8>)
 800c034:	f7f4 fed0 	bl	8000dd8 <HAL_CAN_AddTxMessage>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	bf14      	ite	ne
 800c03e:	2301      	movne	r3, #1
 800c040:	2300      	moveq	r3, #0
 800c042:	b2db      	uxtb	r3, r3
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <_Z13CANTxPECErrorv+0x90>
        return Fail;
 800c048:	2301      	movs	r3, #1
 800c04a:	e000      	b.n	800c04e <_Z13CANTxPECErrorv+0x92>
    else
        return Success;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	20000230 	.word	0x20000230
 800c05c:	2000024c 	.word	0x2000024c
 800c060:	2000025c 	.word	0x2000025c
 800c064:	200000c4 	.word	0x200000c4

0800c068 <_Z9CANTxDatatts>:

uint32_t CANTxData(uint16_t const v_min, uint16_t const v_max, int16_t const t_max) {
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	80fb      	strh	r3, [r7, #6]
 800c072:	460b      	mov	r3, r1
 800c074:	80bb      	strh	r3, [r7, #4]
 800c076:	4613      	mov	r3, r2
 800c078:	807b      	strh	r3, [r7, #2]
    TxHeader.StdId = CAN1_ID::Data;
 800c07a:	4b24      	ldr	r3, [pc, #144]	; (800c10c <_Z9CANTxDatatts+0xa4>)
 800c07c:	220a      	movs	r2, #10
 800c07e:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800c080:	4b22      	ldr	r3, [pc, #136]	; (800c10c <_Z9CANTxDatatts+0xa4>)
 800c082:	2200      	movs	r2, #0
 800c084:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800c086:	4b21      	ldr	r3, [pc, #132]	; (800c10c <_Z9CANTxDatatts+0xa4>)
 800c088:	2208      	movs	r2, #8
 800c08a:	611a      	str	r2, [r3, #16]

    uint16_t U1 = static_cast<uint16_t>(ivt->U1); // TODO this is bad
 800c08c:	4b20      	ldr	r3, [pc, #128]	; (800c110 <_Z9CANTxDatatts+0xa8>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4618      	mov	r0, r3
 800c092:	f000 fb53 	bl	800c73c <_ZNKSt6atomicIfEcvfEv>
 800c096:	eef0 7a40 	vmov.f32	s15, s0
 800c09a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c09e:	ee17 3a90 	vmov	r3, s15
 800c0a2:	82fb      	strh	r3, [r7, #22]
    uint8_t data[] = {
            static_cast<uint8_t>(U1 >> 8),
 800c0a4:	8afb      	ldrh	r3, [r7, #22]
 800c0a6:	121b      	asrs	r3, r3, #8
            static_cast<uint8_t>(v_min >> 0),
            static_cast<uint8_t>(v_max >> 8),
            static_cast<uint8_t>(v_max >> 0),
            static_cast<uint8_t>(t_max >> 8),
            static_cast<uint8_t>(t_max >> 0)
    };
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	733b      	strb	r3, [r7, #12]
 800c0ac:	8afb      	ldrh	r3, [r7, #22]
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(v_min >> 8),
 800c0b2:	88fb      	ldrh	r3, [r7, #6]
 800c0b4:	121b      	asrs	r3, r3, #8
    };
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	73bb      	strb	r3, [r7, #14]
 800c0ba:	88fb      	ldrh	r3, [r7, #6]
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	73fb      	strb	r3, [r7, #15]
            static_cast<uint8_t>(v_max >> 8),
 800c0c0:	88bb      	ldrh	r3, [r7, #4]
 800c0c2:	121b      	asrs	r3, r3, #8
    };
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	743b      	strb	r3, [r7, #16]
 800c0c8:	88bb      	ldrh	r3, [r7, #4]
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	747b      	strb	r3, [r7, #17]
            static_cast<uint8_t>(t_max >> 8),
 800c0ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0d2:	121b      	asrs	r3, r3, #8
    };
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	74bb      	strb	r3, [r7, #18]
 800c0d8:	887b      	ldrh	r3, [r7, #2]
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	74fb      	strb	r3, [r7, #19]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800c0de:	f107 020c 	add.w	r2, r7, #12
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	4909      	ldr	r1, [pc, #36]	; (800c10c <_Z9CANTxDatatts+0xa4>)
 800c0e6:	480b      	ldr	r0, [pc, #44]	; (800c114 <_Z9CANTxDatatts+0xac>)
 800c0e8:	f7f4 fe76 	bl	8000dd8 <HAL_CAN_AddTxMessage>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	bf14      	ite	ne
 800c0f2:	2301      	movne	r3, #1
 800c0f4:	2300      	moveq	r3, #0
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d001      	beq.n	800c100 <_Z9CANTxDatatts+0x98>
        return Fail;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e000      	b.n	800c102 <_Z9CANTxDatatts+0x9a>
    else
        return Success;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3718      	adds	r7, #24
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	20000230 	.word	0x20000230
 800c110:	20000254 	.word	0x20000254
 800c114:	200000c4 	.word	0x200000c4

0800c118 <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE>:

uint32_t CANTxVoltage(const std::array<LTC6811::RegisterGroup<uint16_t>, 4>& cell_data) {
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08e      	sub	sp, #56	; 0x38
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = CAN1_ID::Volt;
 800c120:	4b42      	ldr	r3, [pc, #264]	; (800c22c <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x114>)
 800c122:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800c126:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800c128:	4b40      	ldr	r3, [pc, #256]	; (800c22c <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x114>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800c12e:	4b3f      	ldr	r3, [pc, #252]	; (800c22c <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x114>)
 800c130:	2208      	movs	r2, #8
 800c132:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 800c134:	f107 0308 	add.w	r3, r7, #8
 800c138:	2200      	movs	r2, #0
 800c13a:	601a      	str	r2, [r3, #0]
 800c13c:	605a      	str	r2, [r3, #4]
    uint8_t byte_position{ 0 };
 800c13e:	2300      	movs	r3, #0
 800c140:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800c144:	2300      	movs	r3, #0
 800c146:	633b      	str	r3, [r7, #48]	; 0x30
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	2b0b      	cmp	r3, #11
 800c14c:	d868      	bhi.n	800c220 <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x108>
        for (const auto& register_group : cell_data) { // 4 voltage register groups
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	627b      	str	r3, [r7, #36]	; 0x24
 800c152:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c154:	f000 fb32 	bl	800c7bc <_ZNKSt5arrayIN7LTC681113RegisterGroupItEELj4EE5beginEv>
 800c158:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c15a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c15c:	f000 fb3a 	bl	800c7d4 <_ZNKSt5arrayIN7LTC681113RegisterGroupItEELj4EE3endEv>
 800c160:	6238      	str	r0, [r7, #32]
 800c162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	429a      	cmp	r2, r3
 800c168:	d056      	beq.n	800c218 <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x100>
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	61fb      	str	r3, [r7, #28]
            for (const auto voltage : register_group.ICDaisyChain[current_ic].data) { // 3 voltages per IC
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	3304      	adds	r3, #4
 800c172:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c174:	4618      	mov	r0, r3
 800c176:	f7fd feac 	bl	8009ed2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj12EEixEj>
 800c17a:	4603      	mov	r3, r0
 800c17c:	61bb      	str	r3, [r7, #24]
 800c17e:	69b8      	ldr	r0, [r7, #24]
 800c180:	f7fd fe34 	bl	8009dec <_ZNKSt5arrayItLj3EE5beginEv>
 800c184:	62b8      	str	r0, [r7, #40]	; 0x28
 800c186:	69b8      	ldr	r0, [r7, #24]
 800c188:	f7fd fe3c 	bl	8009e04 <_ZNKSt5arrayItLj3EE3endEv>
 800c18c:	6178      	str	r0, [r7, #20]
 800c18e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	429a      	cmp	r2, r3
 800c194:	d03c      	beq.n	800c210 <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0xf8>
 800c196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	827b      	strh	r3, [r7, #18]
                data[byte_position++] = static_cast<uint8_t>(voltage >> 8);
 800c19c:	8a7b      	ldrh	r3, [r7, #18]
 800c19e:	121b      	asrs	r3, r3, #8
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1a6:	1c59      	adds	r1, r3, #1
 800c1a8:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800c1ac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c1b0:	440b      	add	r3, r1
 800c1b2:	f803 2c30 	strb.w	r2, [r3, #-48]
                data[byte_position++] = static_cast<uint8_t>(voltage);
 800c1b6:	8a7b      	ldrh	r3, [r7, #18]
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1be:	1c59      	adds	r1, r3, #1
 800c1c0:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800c1c4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c1c8:	440b      	add	r3, r1
 800c1ca:	f803 2c30 	strb.w	r2, [r3, #-48]

                if (byte_position == 8) {
 800c1ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1d2:	2b08      	cmp	r3, #8
 800c1d4:	d118      	bne.n	800c208 <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0xf0>
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800c1d6:	f107 0208 	add.w	r2, r7, #8
 800c1da:	2301      	movs	r3, #1
 800c1dc:	4913      	ldr	r1, [pc, #76]	; (800c22c <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x114>)
 800c1de:	4814      	ldr	r0, [pc, #80]	; (800c230 <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x118>)
 800c1e0:	f7f4 fdfa 	bl	8000dd8 <HAL_CAN_AddTxMessage>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	bf14      	ite	ne
 800c1ea:	2301      	movne	r3, #1
 800c1ec:	2300      	moveq	r3, #0
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0xe0>
                        return Fail;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e014      	b.n	800c222 <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x10a>

                    byte_position = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    ++TxHeader.StdId;
 800c1fe:	4b0b      	ldr	r3, [pc, #44]	; (800c22c <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x114>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	3301      	adds	r3, #1
 800c204:	4a09      	ldr	r2, [pc, #36]	; (800c22c <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x114>)
 800c206:	6013      	str	r3, [r2, #0]
            for (const auto voltage : register_group.ICDaisyChain[current_ic].data) { // 3 voltages per IC
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	3302      	adds	r3, #2
 800c20c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c20e:	e7be      	b.n	800c18e <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x76>
        for (const auto& register_group : cell_data) { // 4 voltage register groups
 800c210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c212:	3364      	adds	r3, #100	; 0x64
 800c214:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c216:	e7a4      	b.n	800c162 <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x4a>
    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800c218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21a:	3301      	adds	r3, #1
 800c21c:	633b      	str	r3, [r7, #48]	; 0x30
 800c21e:	e793      	b.n	800c148 <_Z12CANTxVoltageRKSt5arrayIN7LTC681113RegisterGroupItEELj4EE+0x30>
                }
            } // 4 * 3 == 12 voltages associated with each LTC6811 in the daisy chain
        }
    } // 4 * 3 * kDaisyChainLength == all voltages associated with the daisy chain
    return Success;
 800c220:	2300      	movs	r3, #0
}
 800c222:	4618      	mov	r0, r3
 800c224:	3738      	adds	r7, #56	; 0x38
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	20000230 	.word	0x20000230
 800c230:	200000c4 	.word	0x200000c4

0800c234 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE>:

uint32_t CANTxTemperature(const std::array<LTC6811::RegisterGroup<int16_t>, 2>& temp_data) {
 800c234:	b580      	push	{r7, lr}
 800c236:	b08e      	sub	sp, #56	; 0x38
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = CAN1_ID::Temp;
 800c23c:	4b42      	ldr	r3, [pc, #264]	; (800c348 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x114>)
 800c23e:	f240 729c 	movw	r2, #1948	; 0x79c
 800c242:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800c244:	4b40      	ldr	r3, [pc, #256]	; (800c348 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x114>)
 800c246:	2200      	movs	r2, #0
 800c248:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800c24a:	4b3f      	ldr	r3, [pc, #252]	; (800c348 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x114>)
 800c24c:	2208      	movs	r2, #8
 800c24e:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 800c250:	f107 0308 	add.w	r3, r7, #8
 800c254:	2200      	movs	r2, #0
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	605a      	str	r2, [r3, #4]
    uint8_t byte_position{ 0 };
 800c25a:	2300      	movs	r3, #0
 800c25c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800c260:	2300      	movs	r3, #0
 800c262:	633b      	str	r3, [r7, #48]	; 0x30
 800c264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c266:	2b0b      	cmp	r3, #11
 800c268:	d869      	bhi.n	800c33e <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x10a>
        for (const auto& register_group : temp_data) { // 2 voltage register groups
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
 800c26e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c270:	f000 fabe 	bl	800c7f0 <_ZNKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE5beginEv>
 800c274:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c278:	f000 fac6 	bl	800c808 <_ZNKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE3endEv>
 800c27c:	6238      	str	r0, [r7, #32]
 800c27e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c280:	6a3b      	ldr	r3, [r7, #32]
 800c282:	429a      	cmp	r2, r3
 800c284:	d057      	beq.n	800c336 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x102>
 800c286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c288:	61fb      	str	r3, [r7, #28]
            for (const auto temperature : register_group.ICDaisyChain[current_ic].data) { // 3 temperatures per IC
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	3304      	adds	r3, #4
 800c28e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c290:	4618      	mov	r0, r3
 800c292:	f000 fb0c 	bl	800c8ae <_ZNKSt5arrayIN7LTC68118RegisterIsEELj12EEixEj>
 800c296:	4603      	mov	r3, r0
 800c298:	61bb      	str	r3, [r7, #24]
 800c29a:	69b8      	ldr	r0, [r7, #24]
 800c29c:	f000 fada 	bl	800c854 <_ZNKSt5arrayIsLj3EE5beginEv>
 800c2a0:	62b8      	str	r0, [r7, #40]	; 0x28
 800c2a2:	69b8      	ldr	r0, [r7, #24]
 800c2a4:	f000 fae2 	bl	800c86c <_ZNKSt5arrayIsLj3EE3endEv>
 800c2a8:	6178      	str	r0, [r7, #20]
 800c2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d03d      	beq.n	800c32e <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0xfa>
 800c2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b4:	881b      	ldrh	r3, [r3, #0]
 800c2b6:	827b      	strh	r3, [r7, #18]
                data[byte_position++] = static_cast<uint8_t>(temperature >> 8);
 800c2b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c2bc:	121b      	asrs	r3, r3, #8
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2c4:	1c59      	adds	r1, r3, #1
 800c2c6:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800c2ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c2ce:	440b      	add	r3, r1
 800c2d0:	f803 2c30 	strb.w	r2, [r3, #-48]
                data[byte_position++] = static_cast<uint8_t>(temperature);
 800c2d4:	8a7b      	ldrh	r3, [r7, #18]
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2dc:	1c59      	adds	r1, r3, #1
 800c2de:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800c2e2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c2e6:	440b      	add	r3, r1
 800c2e8:	f803 2c30 	strb.w	r2, [r3, #-48]

                if (byte_position == 8) {
 800c2ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2f0:	2b08      	cmp	r3, #8
 800c2f2:	d118      	bne.n	800c326 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0xf2>
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800c2f4:	f107 0208 	add.w	r2, r7, #8
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	4913      	ldr	r1, [pc, #76]	; (800c348 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x114>)
 800c2fc:	4813      	ldr	r0, [pc, #76]	; (800c34c <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x118>)
 800c2fe:	f7f4 fd6b 	bl	8000dd8 <HAL_CAN_AddTxMessage>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	bf14      	ite	ne
 800c308:	2301      	movne	r3, #1
 800c30a:	2300      	moveq	r3, #0
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0xe2>
                        return Fail;
 800c312:	2301      	movs	r3, #1
 800c314:	e014      	b.n	800c340 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x10c>

                    byte_position = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    ++TxHeader.StdId;
 800c31c:	4b0a      	ldr	r3, [pc, #40]	; (800c348 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x114>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3301      	adds	r3, #1
 800c322:	4a09      	ldr	r2, [pc, #36]	; (800c348 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x114>)
 800c324:	6013      	str	r3, [r2, #0]
            for (const auto temperature : register_group.ICDaisyChain[current_ic].data) { // 3 temperatures per IC
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	3302      	adds	r3, #2
 800c32a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c32c:	e7bd      	b.n	800c2aa <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x76>
        for (const auto& register_group : temp_data) { // 2 voltage register groups
 800c32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c330:	3364      	adds	r3, #100	; 0x64
 800c332:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c334:	e7a3      	b.n	800c27e <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x4a>
    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800c336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c338:	3301      	adds	r3, #1
 800c33a:	633b      	str	r3, [r7, #48]	; 0x30
 800c33c:	e792      	b.n	800c264 <_Z16CANTxTemperatureRKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE+0x30>
                }
            } // 2 * 3 == 6 temperatures associated with each LTC6811 in the daisy chain
        }
    } // 2 * 3 * kDaisyChainLength == all temperatures associated with the daisy chain

    return Success;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3738      	adds	r7, #56	; 0x38
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	20000230 	.word	0x20000230
 800c34c:	200000c4 	.word	0x200000c4

0800c350 <_Z21CANTxVoltageLimpTotalmb>:

uint32_t CANTxVoltageLimpTotal(uint32_t const sum_of_cells, bool const limping) {
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	460b      	mov	r3, r1
 800c35a:	70fb      	strb	r3, [r7, #3]
    TxHeader.StdId = CAN1_ID::VoltTotal;
 800c35c:	4b1a      	ldr	r3, [pc, #104]	; (800c3c8 <_Z21CANTxVoltageLimpTotalmb+0x78>)
 800c35e:	220b      	movs	r2, #11
 800c360:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800c362:	4b19      	ldr	r3, [pc, #100]	; (800c3c8 <_Z21CANTxVoltageLimpTotalmb+0x78>)
 800c364:	2200      	movs	r2, #0
 800c366:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800c368:	4b17      	ldr	r3, [pc, #92]	; (800c3c8 <_Z21CANTxVoltageLimpTotalmb+0x78>)
 800c36a:	2208      	movs	r2, #8
 800c36c:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{
 800c36e:	f107 0308 	add.w	r3, r7, #8
 800c372:	2200      	movs	r2, #0
 800c374:	601a      	str	r2, [r3, #0]
 800c376:	605a      	str	r2, [r3, #4]
            // Swap endian-ness of SOC value
            static_cast<uint8_t>(sum_of_cells >> 24),
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(sum_of_cells >>  0),
            limping,
            0x0,
            0x0,
            0x0
    };
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	723b      	strb	r3, [r7, #8]
            static_cast<uint8_t>(sum_of_cells >> 16),
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	0c1b      	lsrs	r3, r3, #16
    };
 800c384:	b2db      	uxtb	r3, r3
 800c386:	727b      	strb	r3, [r7, #9]
            static_cast<uint8_t>(sum_of_cells >>  8),
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	0a1b      	lsrs	r3, r3, #8
    };
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	72bb      	strb	r3, [r7, #10]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	b2db      	uxtb	r3, r3
 800c394:	72fb      	strb	r3, [r7, #11]
 800c396:	78fb      	ldrb	r3, [r7, #3]
 800c398:	733b      	strb	r3, [r7, #12]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800c39a:	f107 0208 	add.w	r2, r7, #8
 800c39e:	2301      	movs	r3, #1
 800c3a0:	4909      	ldr	r1, [pc, #36]	; (800c3c8 <_Z21CANTxVoltageLimpTotalmb+0x78>)
 800c3a2:	480a      	ldr	r0, [pc, #40]	; (800c3cc <_Z21CANTxVoltageLimpTotalmb+0x7c>)
 800c3a4:	f7f4 fd18 	bl	8000dd8 <HAL_CAN_AddTxMessage>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	bf14      	ite	ne
 800c3ae:	2301      	movne	r3, #1
 800c3b0:	2300      	moveq	r3, #0
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d001      	beq.n	800c3bc <_Z21CANTxVoltageLimpTotalmb+0x6c>
        return Fail;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e000      	b.n	800c3be <_Z21CANTxVoltageLimpTotalmb+0x6e>
    else
        return Success;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20000230 	.word	0x20000230
 800c3cc:	200000c4 	.word	0x200000c4

0800c3d0 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE>:

/* Put discharge flag data on CAN bus. */
uint32_t CANTxDCCfg(const LTC6811::RegisterGroup<uint8_t>& slave_cfg_rx) {
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b08a      	sub	sp, #40	; 0x28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = CAN1_ID::DishB;
 800c3d8:	4b35      	ldr	r3, [pc, #212]	; (800c4b0 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0xe0>)
 800c3da:	f240 7275 	movw	r2, #1909	; 0x775
 800c3de:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800c3e0:	4b33      	ldr	r3, [pc, #204]	; (800c4b0 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0xe0>)
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800c3e6:	4b32      	ldr	r3, [pc, #200]	; (800c4b0 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0xe0>)
 800c3e8:	2208      	movs	r2, #8
 800c3ea:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 800c3ec:	f107 030c 	add.w	r3, r7, #12
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	605a      	str	r2, [r3, #4]
    uint8_t byte_position{ 0 };
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    for (const auto& IC : slave_cfg_rx.ICDaisyChain) {
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3304      	adds	r3, #4
 800c400:	61fb      	str	r3, [r7, #28]
 800c402:	69f8      	ldr	r0, [r7, #28]
 800c404:	f000 fa62 	bl	800c8cc <_ZNKSt5arrayIN7LTC68118RegisterIhEELj12EE5beginEv>
 800c408:	6238      	str	r0, [r7, #32]
 800c40a:	69f8      	ldr	r0, [r7, #28]
 800c40c:	f000 fa6a 	bl	800c8e4 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj12EE3endEv>
 800c410:	61b8      	str	r0, [r7, #24]
 800c412:	6a3a      	ldr	r2, [r7, #32]
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	429a      	cmp	r2, r3
 800c418:	d044      	beq.n	800c4a4 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0xd4>
 800c41a:	6a3b      	ldr	r3, [r7, #32]
 800c41c:	617b      	str	r3, [r7, #20]
        data[byte_position++] = IC.data[5];
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	2105      	movs	r1, #5
 800c422:	4618      	mov	r0, r3
 800c424:	f000 fa6b 	bl	800c8fe <_ZNKSt5arrayIhLj6EEixEj>
 800c428:	4603      	mov	r3, r0
 800c42a:	781a      	ldrb	r2, [r3, #0]
 800c42c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c430:	1c59      	adds	r1, r3, #1
 800c432:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 800c436:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c43a:	440b      	add	r3, r1
 800c43c:	f803 2c1c 	strb.w	r2, [r3, #-28]
        data[byte_position++] = IC.data[4];
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	2104      	movs	r1, #4
 800c444:	4618      	mov	r0, r3
 800c446:	f000 fa5a 	bl	800c8fe <_ZNKSt5arrayIhLj6EEixEj>
 800c44a:	4603      	mov	r3, r0
 800c44c:	781a      	ldrb	r2, [r3, #0]
 800c44e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c452:	1c59      	adds	r1, r3, #1
 800c454:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 800c458:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c45c:	440b      	add	r3, r1
 800c45e:	f803 2c1c 	strb.w	r2, [r3, #-28]

        if (byte_position == 8) {
 800c462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c466:	2b08      	cmp	r3, #8
 800c468:	d118      	bne.n	800c49c <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0xcc>
            if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800c46a:	f107 020c 	add.w	r2, r7, #12
 800c46e:	2301      	movs	r3, #1
 800c470:	490f      	ldr	r1, [pc, #60]	; (800c4b0 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0xe0>)
 800c472:	4810      	ldr	r0, [pc, #64]	; (800c4b4 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0xe4>)
 800c474:	f7f4 fcb0 	bl	8000dd8 <HAL_CAN_AddTxMessage>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	bf14      	ite	ne
 800c47e:	2301      	movne	r3, #1
 800c480:	2300      	moveq	r3, #0
 800c482:	b2db      	uxtb	r3, r3
 800c484:	2b00      	cmp	r3, #0
 800c486:	d001      	beq.n	800c48c <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0xbc>
                return Fail;
 800c488:	2301      	movs	r3, #1
 800c48a:	e00c      	b.n	800c4a6 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0xd6>

            byte_position = 0;
 800c48c:	2300      	movs	r3, #0
 800c48e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            ++TxHeader.StdId;
 800c492:	4b07      	ldr	r3, [pc, #28]	; (800c4b0 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0xe0>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3301      	adds	r3, #1
 800c498:	4a05      	ldr	r2, [pc, #20]	; (800c4b0 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0xe0>)
 800c49a:	6013      	str	r3, [r2, #0]
    for (const auto& IC : slave_cfg_rx.ICDaisyChain) {
 800c49c:	6a3b      	ldr	r3, [r7, #32]
 800c49e:	3308      	adds	r3, #8
 800c4a0:	623b      	str	r3, [r7, #32]
 800c4a2:	e7b6      	b.n	800c412 <_Z10CANTxDCCfgRKN7LTC681113RegisterGroupIhEE+0x42>
        }
    }

    return Success;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3728      	adds	r7, #40	; 0x28
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20000230 	.word	0x20000230
 800c4b4:	200000c4 	.word	0x200000c4

0800c4b8 <_Z16CANTxNLGAControlv>:

/* Checks specified chargers MOB status */
uint32_t CANTxNLGAControl(void) {
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
    TxHeader.StdId = CAN1_ID::NLGACtrl;
 800c4be:	4b22      	ldr	r3, [pc, #136]	; (800c548 <_Z16CANTxNLGAControlv+0x90>)
 800c4c0:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 800c4c4:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800c4c6:	4b20      	ldr	r3, [pc, #128]	; (800c548 <_Z16CANTxNLGAControlv+0x90>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 7;
 800c4cc:	4b1e      	ldr	r3, [pc, #120]	; (800c548 <_Z16CANTxNLGAControlv+0x90>)
 800c4ce:	2207      	movs	r2, #7
 800c4d0:	611a      	str	r2, [r3, #16]

    uint8_t data[7]{
        nlg5->ctrl,
 800c4d2:	4b1e      	ldr	r3, [pc, #120]	; (800c54c <_Z16CANTxNLGAControlv+0x94>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
        static_cast<uint8_t>(nlg5->mc_limit),
        static_cast<uint8_t>(nlg5->ov_limit >> 8),
        static_cast<uint8_t>(nlg5->ov_limit),
        static_cast<uint8_t>(nlg5->oc_limit >> 8),
        static_cast<uint8_t>(nlg5->oc_limit)
    };
 800c4d8:	703b      	strb	r3, [r7, #0]
        static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800c4da:	4b1c      	ldr	r3, [pc, #112]	; (800c54c <_Z16CANTxNLGAControlv+0x94>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	885b      	ldrh	r3, [r3, #2]
 800c4e0:	121b      	asrs	r3, r3, #8
    };
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	707b      	strb	r3, [r7, #1]
        static_cast<uint8_t>(nlg5->mc_limit),
 800c4e6:	4b19      	ldr	r3, [pc, #100]	; (800c54c <_Z16CANTxNLGAControlv+0x94>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	885b      	ldrh	r3, [r3, #2]
    };
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	70bb      	strb	r3, [r7, #2]
        static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800c4f0:	4b16      	ldr	r3, [pc, #88]	; (800c54c <_Z16CANTxNLGAControlv+0x94>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	88db      	ldrh	r3, [r3, #6]
 800c4f6:	121b      	asrs	r3, r3, #8
    };
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	70fb      	strb	r3, [r7, #3]
        static_cast<uint8_t>(nlg5->ov_limit),
 800c4fc:	4b13      	ldr	r3, [pc, #76]	; (800c54c <_Z16CANTxNLGAControlv+0x94>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	88db      	ldrh	r3, [r3, #6]
    };
 800c502:	b2db      	uxtb	r3, r3
 800c504:	713b      	strb	r3, [r7, #4]
        static_cast<uint8_t>(nlg5->oc_limit >> 8),
 800c506:	4b11      	ldr	r3, [pc, #68]	; (800c54c <_Z16CANTxNLGAControlv+0x94>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	889b      	ldrh	r3, [r3, #4]
 800c50c:	121b      	asrs	r3, r3, #8
    };
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	717b      	strb	r3, [r7, #5]
        static_cast<uint8_t>(nlg5->oc_limit)
 800c512:	4b0e      	ldr	r3, [pc, #56]	; (800c54c <_Z16CANTxNLGAControlv+0x94>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	889b      	ldrh	r3, [r3, #4]
    };
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	71bb      	strb	r3, [r7, #6]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800c51c:	463a      	mov	r2, r7
 800c51e:	2301      	movs	r3, #1
 800c520:	4909      	ldr	r1, [pc, #36]	; (800c548 <_Z16CANTxNLGAControlv+0x90>)
 800c522:	480b      	ldr	r0, [pc, #44]	; (800c550 <_Z16CANTxNLGAControlv+0x98>)
 800c524:	f7f4 fc58 	bl	8000dd8 <HAL_CAN_AddTxMessage>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	bf14      	ite	ne
 800c52e:	2301      	movne	r3, #1
 800c530:	2300      	moveq	r3, #0
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b00      	cmp	r3, #0
 800c536:	d001      	beq.n	800c53c <_Z16CANTxNLGAControlv+0x84>
        return Fail;
 800c538:	2301      	movs	r3, #1
 800c53a:	e000      	b.n	800c53e <_Z16CANTxNLGAControlv+0x86>
    else
        return Success;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	20000230 	.word	0x20000230
 800c54c:	20000248 	.word	0x20000248
 800c550:	200000c4 	.word	0x200000c4

0800c554 <_Z16CANTxNLGBControlv>:

// TODO This is exactly the same as the function above?
uint32_t CANTxNLGBControl(void) {
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
    TxHeader.StdId = CAN1_ID::NLGBCtrl;
 800c55a:	4b22      	ldr	r3, [pc, #136]	; (800c5e4 <_Z16CANTxNLGBControlv+0x90>)
 800c55c:	f44f 62c5 	mov.w	r2, #1576	; 0x628
 800c560:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800c562:	4b20      	ldr	r3, [pc, #128]	; (800c5e4 <_Z16CANTxNLGBControlv+0x90>)
 800c564:	2200      	movs	r2, #0
 800c566:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 7;
 800c568:	4b1e      	ldr	r3, [pc, #120]	; (800c5e4 <_Z16CANTxNLGBControlv+0x90>)
 800c56a:	2207      	movs	r2, #7
 800c56c:	611a      	str	r2, [r3, #16]

    uint8_t data[7]{
        nlg5->ctrl,
 800c56e:	4b1e      	ldr	r3, [pc, #120]	; (800c5e8 <_Z16CANTxNLGBControlv+0x94>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	781b      	ldrb	r3, [r3, #0]
        static_cast<uint8_t>(nlg5->mc_limit),
        static_cast<uint8_t>(nlg5->ov_limit >> 8),
        static_cast<uint8_t>(nlg5->ov_limit),
        static_cast<uint8_t>(nlg5->oc_limit >> 8),
        static_cast<uint8_t>(nlg5->oc_limit)
    };
 800c574:	703b      	strb	r3, [r7, #0]
        static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800c576:	4b1c      	ldr	r3, [pc, #112]	; (800c5e8 <_Z16CANTxNLGBControlv+0x94>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	885b      	ldrh	r3, [r3, #2]
 800c57c:	121b      	asrs	r3, r3, #8
    };
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	707b      	strb	r3, [r7, #1]
        static_cast<uint8_t>(nlg5->mc_limit),
 800c582:	4b19      	ldr	r3, [pc, #100]	; (800c5e8 <_Z16CANTxNLGBControlv+0x94>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	885b      	ldrh	r3, [r3, #2]
    };
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	70bb      	strb	r3, [r7, #2]
        static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800c58c:	4b16      	ldr	r3, [pc, #88]	; (800c5e8 <_Z16CANTxNLGBControlv+0x94>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	88db      	ldrh	r3, [r3, #6]
 800c592:	121b      	asrs	r3, r3, #8
    };
 800c594:	b2db      	uxtb	r3, r3
 800c596:	70fb      	strb	r3, [r7, #3]
        static_cast<uint8_t>(nlg5->ov_limit),
 800c598:	4b13      	ldr	r3, [pc, #76]	; (800c5e8 <_Z16CANTxNLGBControlv+0x94>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	88db      	ldrh	r3, [r3, #6]
    };
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	713b      	strb	r3, [r7, #4]
        static_cast<uint8_t>(nlg5->oc_limit >> 8),
 800c5a2:	4b11      	ldr	r3, [pc, #68]	; (800c5e8 <_Z16CANTxNLGBControlv+0x94>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	889b      	ldrh	r3, [r3, #4]
 800c5a8:	121b      	asrs	r3, r3, #8
    };
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	717b      	strb	r3, [r7, #5]
        static_cast<uint8_t>(nlg5->oc_limit)
 800c5ae:	4b0e      	ldr	r3, [pc, #56]	; (800c5e8 <_Z16CANTxNLGBControlv+0x94>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	889b      	ldrh	r3, [r3, #4]
    };
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	71bb      	strb	r3, [r7, #6]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800c5b8:	463a      	mov	r2, r7
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	4909      	ldr	r1, [pc, #36]	; (800c5e4 <_Z16CANTxNLGBControlv+0x90>)
 800c5be:	480b      	ldr	r0, [pc, #44]	; (800c5ec <_Z16CANTxNLGBControlv+0x98>)
 800c5c0:	f7f4 fc0a 	bl	8000dd8 <HAL_CAN_AddTxMessage>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	bf14      	ite	ne
 800c5ca:	2301      	movne	r3, #1
 800c5cc:	2300      	moveq	r3, #0
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <_Z16CANTxNLGBControlv+0x84>
        return Fail;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	e000      	b.n	800c5da <_Z16CANTxNLGBControlv+0x86>
    else
        return Success;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20000230 	.word	0x20000230
 800c5e8:	20000248 	.word	0x20000248
 800c5ec:	200000c4 	.word	0x200000c4

0800c5f0 <_Z15CANTxVolumeSizem>:

uint32_t CANTxVolumeSize(uint32_t const size_of_log) {
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = CAN1_ID::LoggerResp;
 800c5f8:	4b17      	ldr	r3, [pc, #92]	; (800c658 <_Z15CANTxVolumeSizem+0x68>)
 800c5fa:	f240 72b5 	movw	r2, #1973	; 0x7b5
 800c5fe:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800c600:	4b15      	ldr	r3, [pc, #84]	; (800c658 <_Z15CANTxVolumeSizem+0x68>)
 800c602:	2200      	movs	r2, #0
 800c604:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 4;
 800c606:	4b14      	ldr	r3, [pc, #80]	; (800c658 <_Z15CANTxVolumeSizem+0x68>)
 800c608:	2204      	movs	r2, #4
 800c60a:	611a      	str	r2, [r3, #16]

    uint8_t data[] = {
            static_cast<uint8_t>(size_of_log >> 24),
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(size_of_log >> 16),
            static_cast<uint8_t>(size_of_log >>  8),
            static_cast<uint8_t>(size_of_log >>  0)
    };
 800c610:	b2db      	uxtb	r3, r3
 800c612:	733b      	strb	r3, [r7, #12]
            static_cast<uint8_t>(size_of_log >> 16),
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	0c1b      	lsrs	r3, r3, #16
    };
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(size_of_log >>  8),
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	0a1b      	lsrs	r3, r3, #8
    };
 800c620:	b2db      	uxtb	r3, r3
 800c622:	73bb      	strb	r3, [r7, #14]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	b2db      	uxtb	r3, r3
 800c628:	73fb      	strb	r3, [r7, #15]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800c62a:	f107 020c 	add.w	r2, r7, #12
 800c62e:	2301      	movs	r3, #1
 800c630:	4909      	ldr	r1, [pc, #36]	; (800c658 <_Z15CANTxVolumeSizem+0x68>)
 800c632:	480a      	ldr	r0, [pc, #40]	; (800c65c <_Z15CANTxVolumeSizem+0x6c>)
 800c634:	f7f4 fbd0 	bl	8000dd8 <HAL_CAN_AddTxMessage>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bf14      	ite	ne
 800c63e:	2301      	movne	r3, #1
 800c640:	2300      	moveq	r3, #0
 800c642:	b2db      	uxtb	r3, r3
 800c644:	2b00      	cmp	r3, #0
 800c646:	d001      	beq.n	800c64c <_Z15CANTxVolumeSizem+0x5c>
        return Fail;
 800c648:	2301      	movs	r3, #1
 800c64a:	e000      	b.n	800c64e <_Z15CANTxVolumeSizem+0x5e>
    else
        return Success;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	20000230 	.word	0x20000230
 800c65c:	200000c4 	.word	0x200000c4

0800c660 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800c660:	b480      	push	{r7}
 800c662:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 800c664:	bf00      	nop
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <_ZNSt13__atomic_baseIbEC1Eb>:
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	460b      	mov	r3, r1
 800c678:	70fb      	strb	r3, [r7, #3]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	78fa      	ldrb	r2, [r7, #3]
 800c67e:	701a      	strb	r2, [r3, #0]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4618      	mov	r0, r3
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <_ZNSt13__atomic_baseIbEaSEb>:
      operator=(__int_type __i) noexcept
 800c68e:	b580      	push	{r7, lr}
 800c690:	b084      	sub	sp, #16
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	460b      	mov	r3, r1
 800c698:	70fb      	strb	r3, [r7, #3]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	60fb      	str	r3, [r7, #12]
 800c69e:	78fb      	ldrb	r3, [r7, #3]
 800c6a0:	72fb      	strb	r3, [r7, #11]
 800c6a2:	2305      	movs	r3, #5
 800c6a4:	72bb      	strb	r3, [r7, #10]
	memory_order __b = __m & __memory_order_mask;
 800c6a6:	7abb      	ldrb	r3, [r7, #10]
 800c6a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fd feef 	bl	800a490 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	727b      	strb	r3, [r7, #9]
	__atomic_store_n(&_M_i, __i, __m);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	7afa      	ldrb	r2, [r7, #11]
 800c6ba:	f3bf 8f5b 	dmb	ish
 800c6be:	701a      	strb	r2, [r3, #0]
 800c6c0:	f3bf 8f5b 	dmb	ish
	return __i;
 800c6c4:	78fb      	ldrb	r3, [r7, #3]
      }
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <_ZNSt13__atomic_baseImEppEv>:
      operator++() noexcept
 800c6ce:	b480      	push	{r7}
 800c6d0:	b083      	sub	sp, #12
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f3bf 8f5b 	dmb	ish
 800c6dc:	e853 2f00 	ldrex	r2, [r3]
 800c6e0:	f102 0201 	add.w	r2, r2, #1
 800c6e4:	e843 2100 	strex	r1, r2, [r3]
 800c6e8:	2900      	cmp	r1, #0
 800c6ea:	d1f7      	bne.n	800c6dc <_ZNSt13__atomic_baseImEppEv+0xe>
 800c6ec:	f3bf 8f5b 	dmb	ish
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <_ZNSt13__atomic_baseImEaSEm>:
      operator=(__int_type __i) noexcept
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b086      	sub	sp, #24
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	6039      	str	r1, [r7, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	617b      	str	r3, [r7, #20]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	613b      	str	r3, [r7, #16]
 800c710:	2305      	movs	r3, #5
 800c712:	73fb      	strb	r3, [r7, #15]
	memory_order __b = __m & __memory_order_mask;
 800c714:	7bfb      	ldrb	r3, [r7, #15]
 800c716:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fd feb8 	bl	800a490 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800c720:	4603      	mov	r3, r0
 800c722:	73bb      	strb	r3, [r7, #14]
	__atomic_store_n(&_M_i, __i, __m);
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	f3bf 8f5b 	dmb	ish
 800c72a:	693a      	ldr	r2, [r7, #16]
 800c72c:	601a      	str	r2, [r3, #0]
 800c72e:	f3bf 8f5b 	dmb	ish
	return __i;
 800c732:	683b      	ldr	r3, [r7, #0]
      }
 800c734:	4618      	mov	r0, r3
 800c736:	3718      	adds	r7, #24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <_ZNKSt6atomicIfEcvfEv>:
      operator _Tp() const noexcept
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
      { return load(); }
 800c744:	2105      	movs	r1, #5
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f8e8 	bl	800c91c <_ZNKSt6atomicIfE4loadESt12memory_order>
 800c74c:	eef0 7a40 	vmov.f32	s15, s0
 800c750:	eeb0 0a67 	vmov.f32	s0, s15
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <_ZNKSt13__atomic_baseImEcvmEv>:
      operator __int_type() const noexcept
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b084      	sub	sp, #16
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	60fb      	str	r3, [r7, #12]
 800c766:	2305      	movs	r3, #5
 800c768:	72fb      	strb	r3, [r7, #11]
	memory_order __b = __m & __memory_order_mask;
 800c76a:	7afb      	ldrb	r3, [r7, #11]
 800c76c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c770:	4618      	mov	r0, r3
 800c772:	f7fd fe8d 	bl	800a490 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800c776:	4603      	mov	r3, r0
 800c778:	72bb      	strb	r3, [r7, #10]
	return __atomic_load_n(&_M_i, __m);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f3bf 8f5b 	dmb	ish
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f3bf 8f5b 	dmb	ish
      { return load(); }
 800c786:	bf00      	nop
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <_ZNKSt14_Optional_baseIN7LTC681113VoltageStatusEE6_M_getEv>:
      _M_get() const noexcept
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_payload; }
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4618      	mov	r0, r3
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <_ZNKSt14_Optional_baseIN7LTC681110TempStatusEE6_M_getEv>:
      _M_get() const noexcept
 800c7a6:	b480      	push	{r7}
 800c7a8:	b083      	sub	sp, #12
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_payload; }
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <_ZNKSt5arrayIN7LTC681113RegisterGroupItEELj4EE5beginEv>:
      begin() const noexcept
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f8c8 	bl	800c95a <_ZNKSt5arrayIN7LTC681113RegisterGroupItEELj4EE4dataEv>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <_ZNKSt5arrayIN7LTC681113RegisterGroupItEELj4EE3endEv>:
      end() const noexcept
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 f8bc 	bl	800c95a <_ZNKSt5arrayIN7LTC681113RegisterGroupItEELj4EE4dataEv>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <_ZNKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE5beginEv>:
      begin() const noexcept
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f8c6 	bl	800c98a <_ZNKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE4dataEv>
 800c7fe:	4603      	mov	r3, r0
 800c800:	4618      	mov	r0, r3
 800c802:	3708      	adds	r7, #8
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <_ZNKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE3endEv>:
      end() const noexcept
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 f8ba 	bl	800c98a <_ZNKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE4dataEv>
 800c816:	4603      	mov	r3, r0
 800c818:	33c8      	adds	r3, #200	; 0xc8
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj12EE5beginEv>:
      begin() const noexcept
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f8c5 	bl	800c9ba <_ZNKSt5arrayIN7LTC68118RegisterIsEELj12EE4dataEv>
 800c830:	4603      	mov	r3, r0
 800c832:	4618      	mov	r0, r3
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <_ZNKSt5arrayIN7LTC68118RegisterIsEELj12EE3endEv>:
      end() const noexcept
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b082      	sub	sp, #8
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f8b9 	bl	800c9ba <_ZNKSt5arrayIN7LTC68118RegisterIsEELj12EE4dataEv>
 800c848:	4603      	mov	r3, r0
 800c84a:	3360      	adds	r3, #96	; 0x60
 800c84c:	4618      	mov	r0, r3
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <_ZNKSt5arrayIsLj3EE5beginEv>:
      begin() const noexcept
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 f8c4 	bl	800c9ea <_ZNKSt5arrayIsLj3EE4dataEv>
 800c862:	4603      	mov	r3, r0
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <_ZNKSt5arrayIsLj3EE3endEv>:
      end() const noexcept
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 f8b8 	bl	800c9ea <_ZNKSt5arrayIsLj3EE4dataEv>
 800c87a:	4603      	mov	r3, r0
 800c87c:	3306      	adds	r3, #6
 800c87e:	4618      	mov	r0, r3
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <_ZNSt6atomicIfEaSEf>:
      operator=(_Tp __i) noexcept
 800c886:	b580      	push	{r7, lr}
 800c888:	b082      	sub	sp, #8
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
 800c88e:	ed87 0a00 	vstr	s0, [r7]
      { store(__i); return __i; }
 800c892:	2105      	movs	r1, #5
 800c894:	ed97 0a00 	vldr	s0, [r7]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 f8be 	bl	800ca1a <_ZNSt6atomicIfE5storeEfSt12memory_order>
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	ee07 3a90 	vmov	s15, r3
 800c8a4:	eeb0 0a67 	vmov.f32	s0, s15
 800c8a8:	3708      	adds	r7, #8
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <_ZNKSt5arrayIN7LTC68118RegisterIsEELj12EEixEj>:
      operator[](size_type __n) const noexcept
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b082      	sub	sp, #8
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f000 f8c9 	bl	800ca54 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj12EE6_S_refERA12_KS2_j>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <_ZNKSt5arrayIN7LTC68118RegisterIhEELj12EE5beginEv>:
      begin() const noexcept
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 f8cc 	bl	800ca72 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj12EE4dataEv>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj12EE3endEv>:
      end() const noexcept
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f8c0 	bl	800ca72 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj12EE4dataEv>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	3360      	adds	r3, #96	; 0x60
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <_ZNKSt5arrayIhLj6EEixEj>:
      operator[](size_type __n) const noexcept
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b082      	sub	sp, #8
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6839      	ldr	r1, [r7, #0]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fd fcab 	bl	800a268 <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>
 800c912:	4603      	mov	r3, r0
 800c914:	4618      	mov	r0, r3
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <_ZNKSt6atomicIfE4loadESt12memory_order>:
      load(memory_order __m = memory_order_seq_cst) const noexcept
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	460b      	mov	r3, r1
 800c926:	70fb      	strb	r3, [r7, #3]
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 800c928:	f107 0308 	add.w	r3, r7, #8
 800c92c:	60fb      	str	r3, [r7, #12]
	__atomic_load(std::__addressof(_M_i), __ptr, __m);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	4618      	mov	r0, r3
 800c932:	f000 f8ab 	bl	800ca8c <_ZSt11__addressofIKfEPT_RS1_>
 800c936:	4603      	mov	r3, r0
 800c938:	f3bf 8f5b 	dmb	ish
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f3bf 8f5b 	dmb	ish
 800c942:	461a      	mov	r2, r3
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	601a      	str	r2, [r3, #0]
	return *__ptr;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	ee07 3a90 	vmov	s15, r3
      }
 800c950:	eeb0 0a67 	vmov.f32	s0, s15
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <_ZNKSt5arrayIN7LTC681113RegisterGroupItEELj4EE4dataEv>:
      data() const noexcept
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4618      	mov	r0, r3
 800c966:	f7fd fcc6 	bl	800a2f6 <_ZNSt14__array_traitsIN7LTC681113RegisterGroupItEELj4EE6_S_ptrERA4_KS2_>
 800c96a:	4603      	mov	r3, r0
 800c96c:	4618      	mov	r0, r3
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <_ZNSt14__array_traitsIN7LTC681113RegisterGroupIsEELj2EE6_S_ptrERA2_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4618      	mov	r0, r3
 800c980:	370c      	adds	r7, #12
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <_ZNKSt5arrayIN7LTC681113RegisterGroupIsEELj2EE4dataEv>:
      data() const noexcept
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b082      	sub	sp, #8
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4618      	mov	r0, r3
 800c996:	f7ff ffed 	bl	800c974 <_ZNSt14__array_traitsIN7LTC681113RegisterGroupIsEELj2EE6_S_ptrERA2_KS2_>
 800c99a:	4603      	mov	r3, r0
 800c99c:	4618      	mov	r0, r3
 800c99e:	3708      	adds	r7, #8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj12EE6_S_ptrERA12_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	370c      	adds	r7, #12
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <_ZNKSt5arrayIN7LTC68118RegisterIsEELj12EE4dataEv>:
      data() const noexcept
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b082      	sub	sp, #8
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff ffed 	bl	800c9a4 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj12EE6_S_ptrERA12_KS2_>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>:
      _S_ptr(const _Type& __t) noexcept
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	370c      	adds	r7, #12
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr

0800c9ea <_ZNKSt5arrayIsLj3EE4dataEv>:
      data() const noexcept
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b082      	sub	sp, #8
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7ff ffed 	bl	800c9d4 <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <_ZNSt6atomicIfE5storeEfSt12memory_order>:
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
 800ca1a:	b590      	push	{r4, r7, lr}
 800ca1c:	b085      	sub	sp, #20
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	60f8      	str	r0, [r7, #12]
 800ca22:	ed87 0a02 	vstr	s0, [r7, #8]
 800ca26:	460b      	mov	r3, r1
 800ca28:	71fb      	strb	r3, [r7, #7]
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); }
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7ff ffe9 	bl	800ca04 <_ZSt11__addressofIfEPT_RS0_>
 800ca32:	4604      	mov	r4, r0
 800ca34:	f107 0308 	add.w	r3, r7, #8
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7ff ffe3 	bl	800ca04 <_ZSt11__addressofIfEPT_RS0_>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f3bf 8f5b 	dmb	ish
 800ca46:	6023      	str	r3, [r4, #0]
 800ca48:	f3bf 8f5b 	dmb	ish
 800ca4c:	bf00      	nop
 800ca4e:	3714      	adds	r7, #20
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd90      	pop	{r4, r7, pc}

0800ca54 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj12EE6_S_refERA12_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	4413      	add	r3, r2
 800ca66:	4618      	mov	r0, r3
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr

0800ca72 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj12EE4dataEv>:
      data() const noexcept
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b082      	sub	sp, #8
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7fd f8d4 	bl	8009c2a <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj12EE6_S_ptrERA12_KS2_>
 800ca82:	4603      	mov	r3, r0
 800ca84:	4618      	mov	r0, r3
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <_ZSt11__addressofIKfEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4618      	mov	r0, r3
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
	...

0800caa4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	4603      	mov	r3, r0
 800caac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800caae:	4b0b      	ldr	r3, [pc, #44]	; (800cadc <SD_CheckStatus+0x38>)
 800cab0:	2201      	movs	r2, #1
 800cab2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cab4:	f7fd fc8c 	bl	800a3d0 <BSP_SD_GetCardState>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d107      	bne.n	800cace <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cabe:	4b07      	ldr	r3, [pc, #28]	; (800cadc <SD_CheckStatus+0x38>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	f023 0301 	bic.w	r3, r3, #1
 800cac8:	b2da      	uxtb	r2, r3
 800caca:	4b04      	ldr	r3, [pc, #16]	; (800cadc <SD_CheckStatus+0x38>)
 800cacc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cace:	4b03      	ldr	r3, [pc, #12]	; (800cadc <SD_CheckStatus+0x38>)
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	b2db      	uxtb	r3, r3
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	20000005 	.word	0x20000005

0800cae0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4603      	mov	r3, r0
 800cae8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800caea:	4b0b      	ldr	r3, [pc, #44]	; (800cb18 <SD_initialize+0x38>)
 800caec:	2201      	movs	r2, #1
 800caee:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800caf0:	f7fd fc0c 	bl	800a30c <BSP_SD_Init>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d107      	bne.n	800cb0a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cafa:	79fb      	ldrb	r3, [r7, #7]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7ff ffd1 	bl	800caa4 <SD_CheckStatus>
 800cb02:	4603      	mov	r3, r0
 800cb04:	461a      	mov	r2, r3
 800cb06:	4b04      	ldr	r3, [pc, #16]	; (800cb18 <SD_initialize+0x38>)
 800cb08:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cb0a:	4b03      	ldr	r3, [pc, #12]	; (800cb18 <SD_initialize+0x38>)
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	b2db      	uxtb	r3, r3
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	20000005 	.word	0x20000005

0800cb1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	4603      	mov	r3, r0
 800cb24:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cb26:	79fb      	ldrb	r3, [r7, #7]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7ff ffbb 	bl	800caa4 <SD_CheckStatus>
 800cb2e:	4603      	mov	r3, r0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60b9      	str	r1, [r7, #8]
 800cb40:	607a      	str	r2, [r7, #4]
 800cb42:	603b      	str	r3, [r7, #0]
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cb4c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	6879      	ldr	r1, [r7, #4]
 800cb54:	68b8      	ldr	r0, [r7, #8]
 800cb56:	f7fd fbff 	bl	800a358 <BSP_SD_ReadBlocks>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d107      	bne.n	800cb70 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cb60:	bf00      	nop
 800cb62:	f7fd fc35 	bl	800a3d0 <BSP_SD_GetCardState>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1fa      	bne.n	800cb62 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b086      	sub	sp, #24
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
 800cb84:	603b      	str	r3, [r7, #0]
 800cb86:	4603      	mov	r3, r0
 800cb88:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cb8e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	6879      	ldr	r1, [r7, #4]
 800cb96:	68b8      	ldr	r0, [r7, #8]
 800cb98:	f7fd fbfc 	bl	800a394 <BSP_SD_WriteBlocks>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d107      	bne.n	800cbb2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cba2:	bf00      	nop
 800cba4:	f7fd fc14 	bl	800a3d0 <BSP_SD_GetCardState>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1fa      	bne.n	800cba4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cbb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b08c      	sub	sp, #48	; 0x30
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	603a      	str	r2, [r7, #0]
 800cbc6:	71fb      	strb	r3, [r7, #7]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cbd2:	4b25      	ldr	r3, [pc, #148]	; (800cc68 <SD_ioctl+0xac>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	f003 0301 	and.w	r3, r3, #1
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <SD_ioctl+0x28>
 800cbe0:	2303      	movs	r3, #3
 800cbe2:	e03c      	b.n	800cc5e <SD_ioctl+0xa2>

  switch (cmd)
 800cbe4:	79bb      	ldrb	r3, [r7, #6]
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	d834      	bhi.n	800cc54 <SD_ioctl+0x98>
 800cbea:	a201      	add	r2, pc, #4	; (adr r2, 800cbf0 <SD_ioctl+0x34>)
 800cbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf0:	0800cc01 	.word	0x0800cc01
 800cbf4:	0800cc09 	.word	0x0800cc09
 800cbf8:	0800cc21 	.word	0x0800cc21
 800cbfc:	0800cc3b 	.word	0x0800cc3b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc06:	e028      	b.n	800cc5a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc08:	f107 030c 	add.w	r3, r7, #12
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7fd fbef 	bl	800a3f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cc12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc1e:	e01c      	b.n	800cc5a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc20:	f107 030c 	add.w	r3, r7, #12
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fd fbe3 	bl	800a3f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2c:	b29a      	uxth	r2, r3
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc38:	e00f      	b.n	800cc5a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc3a:	f107 030c 	add.w	r3, r7, #12
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fd fbd6 	bl	800a3f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc46:	0a5a      	lsrs	r2, r3, #9
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc52:	e002      	b.n	800cc5a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cc54:	2304      	movs	r3, #4
 800cc56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cc5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3730      	adds	r7, #48	; 0x30
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	20000005 	.word	0x20000005

0800cc6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cc72:	2300      	movs	r3, #0
 800cc74:	607b      	str	r3, [r7, #4]
 800cc76:	4b10      	ldr	r3, [pc, #64]	; (800ccb8 <HAL_MspInit+0x4c>)
 800cc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc7a:	4a0f      	ldr	r2, [pc, #60]	; (800ccb8 <HAL_MspInit+0x4c>)
 800cc7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cc80:	6453      	str	r3, [r2, #68]	; 0x44
 800cc82:	4b0d      	ldr	r3, [pc, #52]	; (800ccb8 <HAL_MspInit+0x4c>)
 800cc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc8a:	607b      	str	r3, [r7, #4]
 800cc8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cc8e:	2300      	movs	r3, #0
 800cc90:	603b      	str	r3, [r7, #0]
 800cc92:	4b09      	ldr	r3, [pc, #36]	; (800ccb8 <HAL_MspInit+0x4c>)
 800cc94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc96:	4a08      	ldr	r2, [pc, #32]	; (800ccb8 <HAL_MspInit+0x4c>)
 800cc98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc9c:	6413      	str	r3, [r2, #64]	; 0x40
 800cc9e:	4b06      	ldr	r3, [pc, #24]	; (800ccb8 <HAL_MspInit+0x4c>)
 800cca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cca6:	603b      	str	r3, [r7, #0]
 800cca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ccaa:	bf00      	nop
 800ccac:	370c      	adds	r7, #12
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	40023800 	.word	0x40023800

0800ccbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08c      	sub	sp, #48	; 0x30
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccc4:	f107 031c 	add.w	r3, r7, #28
 800ccc8:	2200      	movs	r2, #0
 800ccca:	601a      	str	r2, [r3, #0]
 800cccc:	605a      	str	r2, [r3, #4]
 800ccce:	609a      	str	r2, [r3, #8]
 800ccd0:	60da      	str	r2, [r3, #12]
 800ccd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a4b      	ldr	r2, [pc, #300]	; (800ce08 <HAL_CAN_MspInit+0x14c>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d13e      	bne.n	800cd5c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800ccde:	4b4b      	ldr	r3, [pc, #300]	; (800ce0c <HAL_CAN_MspInit+0x150>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	3301      	adds	r3, #1
 800cce4:	4a49      	ldr	r2, [pc, #292]	; (800ce0c <HAL_CAN_MspInit+0x150>)
 800cce6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800cce8:	4b48      	ldr	r3, [pc, #288]	; (800ce0c <HAL_CAN_MspInit+0x150>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d10d      	bne.n	800cd0c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	61bb      	str	r3, [r7, #24]
 800ccf4:	4b46      	ldr	r3, [pc, #280]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800ccf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf8:	4a45      	ldr	r2, [pc, #276]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800ccfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ccfe:	6413      	str	r3, [r2, #64]	; 0x40
 800cd00:	4b43      	ldr	r3, [pc, #268]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cd02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd08:	61bb      	str	r3, [r7, #24]
 800cd0a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	617b      	str	r3, [r7, #20]
 800cd10:	4b3f      	ldr	r3, [pc, #252]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cd12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd14:	4a3e      	ldr	r2, [pc, #248]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cd16:	f043 0301 	orr.w	r3, r3, #1
 800cd1a:	6313      	str	r3, [r2, #48]	; 0x30
 800cd1c:	4b3c      	ldr	r3, [pc, #240]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd20:	f003 0301 	and.w	r3, r3, #1
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cd28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cd2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd2e:	2302      	movs	r3, #2
 800cd30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd36:	2303      	movs	r3, #3
 800cd38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800cd3a:	2309      	movs	r3, #9
 800cd3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd3e:	f107 031c 	add.w	r3, r7, #28
 800cd42:	4619      	mov	r1, r3
 800cd44:	4833      	ldr	r0, [pc, #204]	; (800ce14 <HAL_CAN_MspInit+0x158>)
 800cd46:	f7f4 fd65 	bl	8001814 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	2014      	movs	r0, #20
 800cd50:	f7f4 fd29 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800cd54:	2014      	movs	r0, #20
 800cd56:	f7f4 fd42 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800cd5a:	e050      	b.n	800cdfe <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a2d      	ldr	r2, [pc, #180]	; (800ce18 <HAL_CAN_MspInit+0x15c>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d14b      	bne.n	800cdfe <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800cd66:	2300      	movs	r3, #0
 800cd68:	613b      	str	r3, [r7, #16]
 800cd6a:	4b29      	ldr	r3, [pc, #164]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd6e:	4a28      	ldr	r2, [pc, #160]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cd70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd74:	6413      	str	r3, [r2, #64]	; 0x40
 800cd76:	4b26      	ldr	r3, [pc, #152]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cd7e:	613b      	str	r3, [r7, #16]
 800cd80:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800cd82:	4b22      	ldr	r3, [pc, #136]	; (800ce0c <HAL_CAN_MspInit+0x150>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	3301      	adds	r3, #1
 800cd88:	4a20      	ldr	r2, [pc, #128]	; (800ce0c <HAL_CAN_MspInit+0x150>)
 800cd8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800cd8c:	4b1f      	ldr	r3, [pc, #124]	; (800ce0c <HAL_CAN_MspInit+0x150>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d10d      	bne.n	800cdb0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800cd94:	2300      	movs	r3, #0
 800cd96:	60fb      	str	r3, [r7, #12]
 800cd98:	4b1d      	ldr	r3, [pc, #116]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd9c:	4a1c      	ldr	r2, [pc, #112]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cd9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cda2:	6413      	str	r3, [r2, #64]	; 0x40
 800cda4:	4b1a      	ldr	r3, [pc, #104]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdac:	60fb      	str	r3, [r7, #12]
 800cdae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	60bb      	str	r3, [r7, #8]
 800cdb4:	4b16      	ldr	r3, [pc, #88]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cdb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdb8:	4a15      	ldr	r2, [pc, #84]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cdba:	f043 0302 	orr.w	r3, r3, #2
 800cdbe:	6313      	str	r3, [r2, #48]	; 0x30
 800cdc0:	4b13      	ldr	r3, [pc, #76]	; (800ce10 <HAL_CAN_MspInit+0x154>)
 800cdc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc4:	f003 0302 	and.w	r3, r3, #2
 800cdc8:	60bb      	str	r3, [r7, #8]
 800cdca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800cdcc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800cdd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdd2:	2302      	movs	r3, #2
 800cdd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdda:	2303      	movs	r3, #3
 800cddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800cdde:	2309      	movs	r3, #9
 800cde0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cde2:	f107 031c 	add.w	r3, r7, #28
 800cde6:	4619      	mov	r1, r3
 800cde8:	480c      	ldr	r0, [pc, #48]	; (800ce1c <HAL_CAN_MspInit+0x160>)
 800cdea:	f7f4 fd13 	bl	8001814 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800cdee:	2200      	movs	r2, #0
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	2041      	movs	r0, #65	; 0x41
 800cdf4:	f7f4 fcd7 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800cdf8:	2041      	movs	r0, #65	; 0x41
 800cdfa:	f7f4 fcf0 	bl	80017de <HAL_NVIC_EnableIRQ>
}
 800cdfe:	bf00      	nop
 800ce00:	3730      	adds	r7, #48	; 0x30
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	40006400 	.word	0x40006400
 800ce0c:	20000260 	.word	0x20000260
 800ce10:	40023800 	.word	0x40023800
 800ce14:	40020000 	.word	0x40020000
 800ce18:	40006800 	.word	0x40006800
 800ce1c:	40020400 	.word	0x40020400

0800ce20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b08a      	sub	sp, #40	; 0x28
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce28:	f107 0314 	add.w	r3, r7, #20
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	601a      	str	r2, [r3, #0]
 800ce30:	605a      	str	r2, [r3, #4]
 800ce32:	609a      	str	r2, [r3, #8]
 800ce34:	60da      	str	r2, [r3, #12]
 800ce36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a28      	ldr	r2, [pc, #160]	; (800cee0 <HAL_SD_MspInit+0xc0>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d14a      	bne.n	800ced8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800ce42:	2300      	movs	r3, #0
 800ce44:	613b      	str	r3, [r7, #16]
 800ce46:	4b27      	ldr	r3, [pc, #156]	; (800cee4 <HAL_SD_MspInit+0xc4>)
 800ce48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce4a:	4a26      	ldr	r2, [pc, #152]	; (800cee4 <HAL_SD_MspInit+0xc4>)
 800ce4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ce50:	6453      	str	r3, [r2, #68]	; 0x44
 800ce52:	4b24      	ldr	r3, [pc, #144]	; (800cee4 <HAL_SD_MspInit+0xc4>)
 800ce54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce5a:	613b      	str	r3, [r7, #16]
 800ce5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ce5e:	2300      	movs	r3, #0
 800ce60:	60fb      	str	r3, [r7, #12]
 800ce62:	4b20      	ldr	r3, [pc, #128]	; (800cee4 <HAL_SD_MspInit+0xc4>)
 800ce64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce66:	4a1f      	ldr	r2, [pc, #124]	; (800cee4 <HAL_SD_MspInit+0xc4>)
 800ce68:	f043 0304 	orr.w	r3, r3, #4
 800ce6c:	6313      	str	r3, [r2, #48]	; 0x30
 800ce6e:	4b1d      	ldr	r3, [pc, #116]	; (800cee4 <HAL_SD_MspInit+0xc4>)
 800ce70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce72:	f003 0304 	and.w	r3, r3, #4
 800ce76:	60fb      	str	r3, [r7, #12]
 800ce78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	60bb      	str	r3, [r7, #8]
 800ce7e:	4b19      	ldr	r3, [pc, #100]	; (800cee4 <HAL_SD_MspInit+0xc4>)
 800ce80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce82:	4a18      	ldr	r2, [pc, #96]	; (800cee4 <HAL_SD_MspInit+0xc4>)
 800ce84:	f043 0308 	orr.w	r3, r3, #8
 800ce88:	6313      	str	r3, [r2, #48]	; 0x30
 800ce8a:	4b16      	ldr	r3, [pc, #88]	; (800cee4 <HAL_SD_MspInit+0xc4>)
 800ce8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce8e:	f003 0308 	and.w	r3, r3, #8
 800ce92:	60bb      	str	r3, [r7, #8]
 800ce94:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800ce96:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800ce9a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce9c:	2302      	movs	r3, #2
 800ce9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cea0:	2300      	movs	r3, #0
 800cea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cea4:	2303      	movs	r3, #3
 800cea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800cea8:	230c      	movs	r3, #12
 800ceaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ceac:	f107 0314 	add.w	r3, r7, #20
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	480d      	ldr	r0, [pc, #52]	; (800cee8 <HAL_SD_MspInit+0xc8>)
 800ceb4:	f7f4 fcae 	bl	8001814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ceb8:	2304      	movs	r3, #4
 800ceba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cebc:	2302      	movs	r3, #2
 800cebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cec0:	2300      	movs	r3, #0
 800cec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cec4:	2303      	movs	r3, #3
 800cec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800cec8:	230c      	movs	r3, #12
 800ceca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cecc:	f107 0314 	add.w	r3, r7, #20
 800ced0:	4619      	mov	r1, r3
 800ced2:	4806      	ldr	r0, [pc, #24]	; (800ceec <HAL_SD_MspInit+0xcc>)
 800ced4:	f7f4 fc9e 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800ced8:	bf00      	nop
 800ceda:	3728      	adds	r7, #40	; 0x28
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	40012c00 	.word	0x40012c00
 800cee4:	40023800 	.word	0x40023800
 800cee8:	40020800 	.word	0x40020800
 800ceec:	40020c00 	.word	0x40020c00

0800cef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08a      	sub	sp, #40	; 0x28
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cef8:	f107 0314 	add.w	r3, r7, #20
 800cefc:	2200      	movs	r2, #0
 800cefe:	601a      	str	r2, [r3, #0]
 800cf00:	605a      	str	r2, [r3, #4]
 800cf02:	609a      	str	r2, [r3, #8]
 800cf04:	60da      	str	r2, [r3, #12]
 800cf06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a28      	ldr	r2, [pc, #160]	; (800cfb0 <HAL_SPI_MspInit+0xc0>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d149      	bne.n	800cfa6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800cf12:	2300      	movs	r3, #0
 800cf14:	613b      	str	r3, [r7, #16]
 800cf16:	4b27      	ldr	r3, [pc, #156]	; (800cfb4 <HAL_SPI_MspInit+0xc4>)
 800cf18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf1a:	4a26      	ldr	r2, [pc, #152]	; (800cfb4 <HAL_SPI_MspInit+0xc4>)
 800cf1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cf20:	6453      	str	r3, [r2, #68]	; 0x44
 800cf22:	4b24      	ldr	r3, [pc, #144]	; (800cfb4 <HAL_SPI_MspInit+0xc4>)
 800cf24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cf2a:	613b      	str	r3, [r7, #16]
 800cf2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf2e:	2300      	movs	r3, #0
 800cf30:	60fb      	str	r3, [r7, #12]
 800cf32:	4b20      	ldr	r3, [pc, #128]	; (800cfb4 <HAL_SPI_MspInit+0xc4>)
 800cf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf36:	4a1f      	ldr	r2, [pc, #124]	; (800cfb4 <HAL_SPI_MspInit+0xc4>)
 800cf38:	f043 0301 	orr.w	r3, r3, #1
 800cf3c:	6313      	str	r3, [r2, #48]	; 0x30
 800cf3e:	4b1d      	ldr	r3, [pc, #116]	; (800cfb4 <HAL_SPI_MspInit+0xc4>)
 800cf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf42:	f003 0301 	and.w	r3, r3, #1
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	60bb      	str	r3, [r7, #8]
 800cf4e:	4b19      	ldr	r3, [pc, #100]	; (800cfb4 <HAL_SPI_MspInit+0xc4>)
 800cf50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf52:	4a18      	ldr	r2, [pc, #96]	; (800cfb4 <HAL_SPI_MspInit+0xc4>)
 800cf54:	f043 0302 	orr.w	r3, r3, #2
 800cf58:	6313      	str	r3, [r2, #48]	; 0x30
 800cf5a:	4b16      	ldr	r3, [pc, #88]	; (800cfb4 <HAL_SPI_MspInit+0xc4>)
 800cf5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5e:	f003 0302 	and.w	r3, r3, #2
 800cf62:	60bb      	str	r3, [r7, #8]
 800cf64:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800cf66:	2310      	movs	r3, #16
 800cf68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf72:	2303      	movs	r3, #3
 800cf74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800cf76:	2305      	movs	r3, #5
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf7a:	f107 0314 	add.w	r3, r7, #20
 800cf7e:	4619      	mov	r1, r3
 800cf80:	480d      	ldr	r0, [pc, #52]	; (800cfb8 <HAL_SPI_MspInit+0xc8>)
 800cf82:	f7f4 fc47 	bl	8001814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800cf86:	2338      	movs	r3, #56	; 0x38
 800cf88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf8a:	2302      	movs	r3, #2
 800cf8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf92:	2303      	movs	r3, #3
 800cf94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800cf96:	2305      	movs	r3, #5
 800cf98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf9a:	f107 0314 	add.w	r3, r7, #20
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	4806      	ldr	r0, [pc, #24]	; (800cfbc <HAL_SPI_MspInit+0xcc>)
 800cfa2:	f7f4 fc37 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800cfa6:	bf00      	nop
 800cfa8:	3728      	adds	r7, #40	; 0x28
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	40013000 	.word	0x40013000
 800cfb4:	40023800 	.word	0x40023800
 800cfb8:	40020000 	.word	0x40020000
 800cfbc:	40020400 	.word	0x40020400

0800cfc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfd0:	d10d      	bne.n	800cfee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60fb      	str	r3, [r7, #12]
 800cfd6:	4b09      	ldr	r3, [pc, #36]	; (800cffc <HAL_TIM_Base_MspInit+0x3c>)
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	4a08      	ldr	r2, [pc, #32]	; (800cffc <HAL_TIM_Base_MspInit+0x3c>)
 800cfdc:	f043 0301 	orr.w	r3, r3, #1
 800cfe0:	6413      	str	r3, [r2, #64]	; 0x40
 800cfe2:	4b06      	ldr	r3, [pc, #24]	; (800cffc <HAL_TIM_Base_MspInit+0x3c>)
 800cfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe6:	f003 0301 	and.w	r3, r3, #1
 800cfea:	60fb      	str	r3, [r7, #12]
 800cfec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800cfee:	bf00      	nop
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	40023800 	.word	0x40023800

0800d000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b088      	sub	sp, #32
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d008:	f107 030c 	add.w	r3, r7, #12
 800d00c:	2200      	movs	r2, #0
 800d00e:	601a      	str	r2, [r3, #0]
 800d010:	605a      	str	r2, [r3, #4]
 800d012:	609a      	str	r2, [r3, #8]
 800d014:	60da      	str	r2, [r3, #12]
 800d016:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d020:	d11d      	bne.n	800d05e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d022:	2300      	movs	r3, #0
 800d024:	60bb      	str	r3, [r7, #8]
 800d026:	4b10      	ldr	r3, [pc, #64]	; (800d068 <HAL_TIM_MspPostInit+0x68>)
 800d028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d02a:	4a0f      	ldr	r2, [pc, #60]	; (800d068 <HAL_TIM_MspPostInit+0x68>)
 800d02c:	f043 0302 	orr.w	r3, r3, #2
 800d030:	6313      	str	r3, [r2, #48]	; 0x30
 800d032:	4b0d      	ldr	r3, [pc, #52]	; (800d068 <HAL_TIM_MspPostInit+0x68>)
 800d034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d036:	f003 0302 	and.w	r3, r3, #2
 800d03a:	60bb      	str	r3, [r7, #8]
 800d03c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB2     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = FansPWM_Pin;
 800d03e:	2304      	movs	r3, #4
 800d040:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d042:	2302      	movs	r3, #2
 800d044:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d046:	2300      	movs	r3, #0
 800d048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d04a:	2300      	movs	r3, #0
 800d04c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d04e:	2301      	movs	r3, #1
 800d050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 800d052:	f107 030c 	add.w	r3, r7, #12
 800d056:	4619      	mov	r1, r3
 800d058:	4804      	ldr	r0, [pc, #16]	; (800d06c <HAL_TIM_MspPostInit+0x6c>)
 800d05a:	f7f4 fbdb 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800d05e:	bf00      	nop
 800d060:	3720      	adds	r7, #32
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	40023800 	.word	0x40023800
 800d06c:	40020400 	.word	0x40020400

0800d070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d070:	b480      	push	{r7}
 800d072:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d074:	bf00      	nop
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr

0800d07e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d07e:	b480      	push	{r7}
 800d080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d082:	e7fe      	b.n	800d082 <HardFault_Handler+0x4>

0800d084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d084:	b480      	push	{r7}
 800d086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d088:	e7fe      	b.n	800d088 <MemManage_Handler+0x4>

0800d08a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d08a:	b480      	push	{r7}
 800d08c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d08e:	e7fe      	b.n	800d08e <BusFault_Handler+0x4>

0800d090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d090:	b480      	push	{r7}
 800d092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d094:	e7fe      	b.n	800d094 <UsageFault_Handler+0x4>

0800d096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d096:	b480      	push	{r7}
 800d098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d09a:	bf00      	nop
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d0a8:	bf00      	nop
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr

0800d0b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d0b2:	b480      	push	{r7}
 800d0b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d0b6:	bf00      	nop
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d0c4:	f7fd fdd4 	bl	800ac70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d0c8:	bf00      	nop
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800d0d0:	4802      	ldr	r0, [pc, #8]	; (800d0dc <CAN1_RX0_IRQHandler+0x10>)
 800d0d2:	f7f4 f86e 	bl	80011b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800d0d6:	bf00      	nop
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	200000c4 	.word	0x200000c4

0800d0e0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800d0e4:	4802      	ldr	r0, [pc, #8]	; (800d0f0 <CAN2_RX1_IRQHandler+0x10>)
 800d0e6:	f7f4 f864 	bl	80011b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800d0ea:	bf00      	nop
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	200000ec 	.word	0x200000ec

0800d0f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	af00      	add	r7, sp, #0
	return 1;
 800d0f8:	2301      	movs	r3, #1
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <_kill>:

int _kill(int pid, int sig)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800d10e:	f000 fa2f 	bl	800d570 <__errno>
 800d112:	4602      	mov	r2, r0
 800d114:	2316      	movs	r3, #22
 800d116:	6013      	str	r3, [r2, #0]
	return -1;
 800d118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <_exit>:

void _exit (int status)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800d12c:	f04f 31ff 	mov.w	r1, #4294967295
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7ff ffe7 	bl	800d104 <_kill>
	while (1) {}		/* Make sure we hang here */
 800d136:	e7fe      	b.n	800d136 <_exit+0x12>

0800d138 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d140:	4b11      	ldr	r3, [pc, #68]	; (800d188 <_sbrk+0x50>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d102      	bne.n	800d14e <_sbrk+0x16>
		heap_end = &end;
 800d148:	4b0f      	ldr	r3, [pc, #60]	; (800d188 <_sbrk+0x50>)
 800d14a:	4a10      	ldr	r2, [pc, #64]	; (800d18c <_sbrk+0x54>)
 800d14c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d14e:	4b0e      	ldr	r3, [pc, #56]	; (800d188 <_sbrk+0x50>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d154:	4b0c      	ldr	r3, [pc, #48]	; (800d188 <_sbrk+0x50>)
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4413      	add	r3, r2
 800d15c:	466a      	mov	r2, sp
 800d15e:	4293      	cmp	r3, r2
 800d160:	d907      	bls.n	800d172 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d162:	f000 fa05 	bl	800d570 <__errno>
 800d166:	4602      	mov	r2, r0
 800d168:	230c      	movs	r3, #12
 800d16a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d16c:	f04f 33ff 	mov.w	r3, #4294967295
 800d170:	e006      	b.n	800d180 <_sbrk+0x48>
	}

	heap_end += incr;
 800d172:	4b05      	ldr	r3, [pc, #20]	; (800d188 <_sbrk+0x50>)
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4413      	add	r3, r2
 800d17a:	4a03      	ldr	r2, [pc, #12]	; (800d188 <_sbrk+0x50>)
 800d17c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d17e:	68fb      	ldr	r3, [r7, #12]
}
 800d180:	4618      	mov	r0, r3
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	20000264 	.word	0x20000264
 800d18c:	200006e8 	.word	0x200006e8

0800d190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d190:	b480      	push	{r7}
 800d192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d194:	4b16      	ldr	r3, [pc, #88]	; (800d1f0 <SystemInit+0x60>)
 800d196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d19a:	4a15      	ldr	r2, [pc, #84]	; (800d1f0 <SystemInit+0x60>)
 800d19c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d1a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d1a4:	4b13      	ldr	r3, [pc, #76]	; (800d1f4 <SystemInit+0x64>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a12      	ldr	r2, [pc, #72]	; (800d1f4 <SystemInit+0x64>)
 800d1aa:	f043 0301 	orr.w	r3, r3, #1
 800d1ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d1b0:	4b10      	ldr	r3, [pc, #64]	; (800d1f4 <SystemInit+0x64>)
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d1b6:	4b0f      	ldr	r3, [pc, #60]	; (800d1f4 <SystemInit+0x64>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a0e      	ldr	r2, [pc, #56]	; (800d1f4 <SystemInit+0x64>)
 800d1bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800d1c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d1c6:	4b0b      	ldr	r3, [pc, #44]	; (800d1f4 <SystemInit+0x64>)
 800d1c8:	4a0b      	ldr	r2, [pc, #44]	; (800d1f8 <SystemInit+0x68>)
 800d1ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d1cc:	4b09      	ldr	r3, [pc, #36]	; (800d1f4 <SystemInit+0x64>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a08      	ldr	r2, [pc, #32]	; (800d1f4 <SystemInit+0x64>)
 800d1d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d1d8:	4b06      	ldr	r3, [pc, #24]	; (800d1f4 <SystemInit+0x64>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d1de:	4b04      	ldr	r3, [pc, #16]	; (800d1f0 <SystemInit+0x60>)
 800d1e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d1e4:	609a      	str	r2, [r3, #8]
#endif
}
 800d1e6:	bf00      	nop
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr
 800d1f0:	e000ed00 	.word	0xe000ed00
 800d1f4:	40023800 	.word	0x40023800
 800d1f8:	24003010 	.word	0x24003010

0800d1fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d1fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d234 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d200:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d202:	e003      	b.n	800d20c <LoopCopyDataInit>

0800d204 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d204:	4b0c      	ldr	r3, [pc, #48]	; (800d238 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d206:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d208:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d20a:	3104      	adds	r1, #4

0800d20c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d20c:	480b      	ldr	r0, [pc, #44]	; (800d23c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d20e:	4b0c      	ldr	r3, [pc, #48]	; (800d240 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d210:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d212:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d214:	d3f6      	bcc.n	800d204 <CopyDataInit>
  ldr  r2, =_sbss
 800d216:	4a0b      	ldr	r2, [pc, #44]	; (800d244 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d218:	e002      	b.n	800d220 <LoopFillZerobss>

0800d21a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d21a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d21c:	f842 3b04 	str.w	r3, [r2], #4

0800d220 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d220:	4b09      	ldr	r3, [pc, #36]	; (800d248 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d222:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d224:	d3f9      	bcc.n	800d21a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d226:	f7ff ffb3 	bl	800d190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d22a:	f000 f9a7 	bl	800d57c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d22e:	f7fd fdcf 	bl	800add0 <main>
  bx  lr    
 800d232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d234:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d238:	0800db04 	.word	0x0800db04
  ldr  r0, =_sdata
 800d23c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d240:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800d244:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800d248:	200006e4 	.word	0x200006e4

0800d24c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d24c:	e7fe      	b.n	800d24c <ADC_IRQHandler>

0800d24e <_Znwj>:
 800d24e:	b510      	push	{r4, lr}
 800d250:	2800      	cmp	r0, #0
 800d252:	bf14      	ite	ne
 800d254:	4604      	movne	r4, r0
 800d256:	2401      	moveq	r4, #1
 800d258:	4620      	mov	r0, r4
 800d25a:	f000 f9b3 	bl	800d5c4 <malloc>
 800d25e:	b930      	cbnz	r0, 800d26e <_Znwj+0x20>
 800d260:	f000 f806 	bl	800d270 <_ZSt15get_new_handlerv>
 800d264:	b908      	cbnz	r0, 800d26a <_Znwj+0x1c>
 800d266:	f000 f97b 	bl	800d560 <abort>
 800d26a:	4780      	blx	r0
 800d26c:	e7f4      	b.n	800d258 <_Znwj+0xa>
 800d26e:	bd10      	pop	{r4, pc}

0800d270 <_ZSt15get_new_handlerv>:
 800d270:	4b02      	ldr	r3, [pc, #8]	; (800d27c <_ZSt15get_new_handlerv+0xc>)
 800d272:	6818      	ldr	r0, [r3, #0]
 800d274:	f3bf 8f5b 	dmb	ish
 800d278:	4770      	bx	lr
 800d27a:	bf00      	nop
 800d27c:	20000268 	.word	0x20000268

0800d280 <logf>:
 800d280:	b510      	push	{r4, lr}
 800d282:	ed2d 8b02 	vpush	{d8}
 800d286:	b08a      	sub	sp, #40	; 0x28
 800d288:	eeb0 8a40 	vmov.f32	s16, s0
 800d28c:	f000 f86e 	bl	800d36c <__ieee754_logf>
 800d290:	4b31      	ldr	r3, [pc, #196]	; (800d358 <logf+0xd8>)
 800d292:	f993 4000 	ldrsb.w	r4, [r3]
 800d296:	1c63      	adds	r3, r4, #1
 800d298:	d059      	beq.n	800d34e <logf+0xce>
 800d29a:	eeb4 8a48 	vcmp.f32	s16, s16
 800d29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a2:	d654      	bvs.n	800d34e <logf+0xce>
 800d2a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ac:	dc4f      	bgt.n	800d34e <logf+0xce>
 800d2ae:	4b2b      	ldr	r3, [pc, #172]	; (800d35c <logf+0xdc>)
 800d2b0:	9301      	str	r3, [sp, #4]
 800d2b2:	ee18 0a10 	vmov	r0, s16
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	9308      	str	r3, [sp, #32]
 800d2ba:	f7f3 f909 	bl	80004d0 <__aeabi_f2d>
 800d2be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2c6:	b994      	cbnz	r4, 800d2ee <logf+0x6e>
 800d2c8:	4b25      	ldr	r3, [pc, #148]	; (800d360 <logf+0xe0>)
 800d2ca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d2ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2da:	d025      	beq.n	800d328 <logf+0xa8>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	2c02      	cmp	r4, #2
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	d116      	bne.n	800d312 <logf+0x92>
 800d2e4:	f000 f944 	bl	800d570 <__errno>
 800d2e8:	2321      	movs	r3, #33	; 0x21
 800d2ea:	6003      	str	r3, [r0, #0]
 800d2ec:	e016      	b.n	800d31c <logf+0x9c>
 800d2ee:	4b1d      	ldr	r3, [pc, #116]	; (800d364 <logf+0xe4>)
 800d2f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2fe:	d1ed      	bne.n	800d2dc <logf+0x5c>
 800d300:	2302      	movs	r3, #2
 800d302:	429c      	cmp	r4, r3
 800d304:	9300      	str	r3, [sp, #0]
 800d306:	d111      	bne.n	800d32c <logf+0xac>
 800d308:	f000 f932 	bl	800d570 <__errno>
 800d30c:	2322      	movs	r3, #34	; 0x22
 800d30e:	6003      	str	r3, [r0, #0]
 800d310:	e011      	b.n	800d336 <logf+0xb6>
 800d312:	4668      	mov	r0, sp
 800d314:	f000 f918 	bl	800d548 <matherr>
 800d318:	2800      	cmp	r0, #0
 800d31a:	d0e3      	beq.n	800d2e4 <logf+0x64>
 800d31c:	4812      	ldr	r0, [pc, #72]	; (800d368 <logf+0xe8>)
 800d31e:	f000 f917 	bl	800d550 <nan>
 800d322:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d326:	e006      	b.n	800d336 <logf+0xb6>
 800d328:	2302      	movs	r3, #2
 800d32a:	9300      	str	r3, [sp, #0]
 800d32c:	4668      	mov	r0, sp
 800d32e:	f000 f90b 	bl	800d548 <matherr>
 800d332:	2800      	cmp	r0, #0
 800d334:	d0e8      	beq.n	800d308 <logf+0x88>
 800d336:	9b08      	ldr	r3, [sp, #32]
 800d338:	b11b      	cbz	r3, 800d342 <logf+0xc2>
 800d33a:	f000 f919 	bl	800d570 <__errno>
 800d33e:	9b08      	ldr	r3, [sp, #32]
 800d340:	6003      	str	r3, [r0, #0]
 800d342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d346:	f7f3 f91b 	bl	8000580 <__aeabi_d2f>
 800d34a:	ee00 0a10 	vmov	s0, r0
 800d34e:	b00a      	add	sp, #40	; 0x28
 800d350:	ecbd 8b02 	vpop	{d8}
 800d354:	bd10      	pop	{r4, pc}
 800d356:	bf00      	nop
 800d358:	2000000c 	.word	0x2000000c
 800d35c:	0800daec 	.word	0x0800daec
 800d360:	c7efffff 	.word	0xc7efffff
 800d364:	fff00000 	.word	0xfff00000
 800d368:	0800daf0 	.word	0x0800daf0

0800d36c <__ieee754_logf>:
 800d36c:	ee10 3a10 	vmov	r3, s0
 800d370:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d374:	d106      	bne.n	800d384 <__ieee754_logf+0x18>
 800d376:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800d50c <__ieee754_logf+0x1a0>
 800d37a:	eddf 7a65 	vldr	s15, [pc, #404]	; 800d510 <__ieee754_logf+0x1a4>
 800d37e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d382:	4770      	bx	lr
 800d384:	2b00      	cmp	r3, #0
 800d386:	da02      	bge.n	800d38e <__ieee754_logf+0x22>
 800d388:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d38c:	e7f5      	b.n	800d37a <__ieee754_logf+0xe>
 800d38e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d392:	db02      	blt.n	800d39a <__ieee754_logf+0x2e>
 800d394:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d398:	4770      	bx	lr
 800d39a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d39e:	bfbf      	itttt	lt
 800d3a0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800d514 <__ieee754_logf+0x1a8>
 800d3a4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d3a8:	f06f 0118 	mvnlt.w	r1, #24
 800d3ac:	ee17 3a90 	vmovlt	r3, s15
 800d3b0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800d3b4:	bfa8      	it	ge
 800d3b6:	2100      	movge	r1, #0
 800d3b8:	3a7f      	subs	r2, #127	; 0x7f
 800d3ba:	440a      	add	r2, r1
 800d3bc:	4956      	ldr	r1, [pc, #344]	; (800d518 <__ieee754_logf+0x1ac>)
 800d3be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d3c2:	4419      	add	r1, r3
 800d3c4:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800d3c8:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800d3cc:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800d3d0:	4319      	orrs	r1, r3
 800d3d2:	ee07 1a90 	vmov	s15, r1
 800d3d6:	f103 010f 	add.w	r1, r3, #15
 800d3da:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800d3de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d3e2:	290f      	cmp	r1, #15
 800d3e4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d3e8:	dc31      	bgt.n	800d44e <__ieee754_logf+0xe2>
 800d3ea:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f2:	d10f      	bne.n	800d414 <__ieee754_logf+0xa8>
 800d3f4:	2a00      	cmp	r2, #0
 800d3f6:	f000 8085 	beq.w	800d504 <__ieee754_logf+0x198>
 800d3fa:	ee07 2a90 	vmov	s15, r2
 800d3fe:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800d51c <__ieee754_logf+0x1b0>
 800d402:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800d520 <__ieee754_logf+0x1b4>
 800d406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d40a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d40e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800d412:	4770      	bx	lr
 800d414:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d524 <__ieee754_logf+0x1b8>
 800d418:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d41c:	eea0 7a67 	vfms.f32	s14, s0, s15
 800d420:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d424:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d428:	b912      	cbnz	r2, 800d430 <__ieee754_logf+0xc4>
 800d42a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d42e:	4770      	bx	lr
 800d430:	ee07 2a90 	vmov	s15, r2
 800d434:	eddf 6a39 	vldr	s13, [pc, #228]	; 800d51c <__ieee754_logf+0x1b0>
 800d438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d43c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d440:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d444:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d520 <__ieee754_logf+0x1b4>
 800d448:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800d44c:	4770      	bx	lr
 800d44e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d452:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d456:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d528 <__ieee754_logf+0x1bc>
 800d45a:	eddf 4a34 	vldr	s9, [pc, #208]	; 800d52c <__ieee754_logf+0x1c0>
 800d45e:	4934      	ldr	r1, [pc, #208]	; (800d530 <__ieee754_logf+0x1c4>)
 800d460:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800d464:	4419      	add	r1, r3
 800d466:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800d46a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d46e:	430b      	orrs	r3, r1
 800d470:	2b00      	cmp	r3, #0
 800d472:	ee07 2a90 	vmov	s15, r2
 800d476:	ee26 5a06 	vmul.f32	s10, s12, s12
 800d47a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d47e:	ee25 7a05 	vmul.f32	s14, s10, s10
 800d482:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800d534 <__ieee754_logf+0x1c8>
 800d486:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d48a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800d538 <__ieee754_logf+0x1cc>
 800d48e:	eee7 5a87 	vfma.f32	s11, s15, s14
 800d492:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d53c <__ieee754_logf+0x1d0>
 800d496:	eee7 7a24 	vfma.f32	s15, s14, s9
 800d49a:	eddf 4a29 	vldr	s9, [pc, #164]	; 800d540 <__ieee754_logf+0x1d4>
 800d49e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800d4a2:	eddf 7a28 	vldr	s15, [pc, #160]	; 800d544 <__ieee754_logf+0x1d8>
 800d4a6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800d4aa:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d4ae:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d4b2:	dd1c      	ble.n	800d4ee <__ieee754_logf+0x182>
 800d4b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d4b8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d4bc:	ee27 7a00 	vmul.f32	s14, s14, s0
 800d4c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d4c8:	b922      	cbnz	r2, 800d4d4 <__ieee754_logf+0x168>
 800d4ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d4d2:	4770      	bx	lr
 800d4d4:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800d51c <__ieee754_logf+0x1b0>
 800d4d8:	eee6 7a86 	vfma.f32	s15, s13, s12
 800d4dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d4e4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d520 <__ieee754_logf+0x1b4>
 800d4e8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800d4ec:	4770      	bx	lr
 800d4ee:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d4f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d4f6:	2a00      	cmp	r2, #0
 800d4f8:	d0e9      	beq.n	800d4ce <__ieee754_logf+0x162>
 800d4fa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d51c <__ieee754_logf+0x1b0>
 800d4fe:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d502:	e7ed      	b.n	800d4e0 <__ieee754_logf+0x174>
 800d504:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800d510 <__ieee754_logf+0x1a4>
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	cc000000 	.word	0xcc000000
 800d510:	00000000 	.word	0x00000000
 800d514:	4c000000 	.word	0x4c000000
 800d518:	004afb20 	.word	0x004afb20
 800d51c:	3717f7d1 	.word	0x3717f7d1
 800d520:	3f317180 	.word	0x3f317180
 800d524:	3eaaaaab 	.word	0x3eaaaaab
 800d528:	3e1cd04f 	.word	0x3e1cd04f
 800d52c:	3e178897 	.word	0x3e178897
 800d530:	ffcf5c30 	.word	0xffcf5c30
 800d534:	3e638e29 	.word	0x3e638e29
 800d538:	3ecccccd 	.word	0x3ecccccd
 800d53c:	3e3a3325 	.word	0x3e3a3325
 800d540:	3e924925 	.word	0x3e924925
 800d544:	3f2aaaab 	.word	0x3f2aaaab

0800d548 <matherr>:
 800d548:	2000      	movs	r0, #0
 800d54a:	4770      	bx	lr
 800d54c:	0000      	movs	r0, r0
	...

0800d550 <nan>:
 800d550:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d558 <nan+0x8>
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop
 800d558:	00000000 	.word	0x00000000
 800d55c:	7ff80000 	.word	0x7ff80000

0800d560 <abort>:
 800d560:	b508      	push	{r3, lr}
 800d562:	2006      	movs	r0, #6
 800d564:	f000 f8dc 	bl	800d720 <raise>
 800d568:	2001      	movs	r0, #1
 800d56a:	f7ff fddb 	bl	800d124 <_exit>
	...

0800d570 <__errno>:
 800d570:	4b01      	ldr	r3, [pc, #4]	; (800d578 <__errno+0x8>)
 800d572:	6818      	ldr	r0, [r3, #0]
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	20000010 	.word	0x20000010

0800d57c <__libc_init_array>:
 800d57c:	b570      	push	{r4, r5, r6, lr}
 800d57e:	4e0d      	ldr	r6, [pc, #52]	; (800d5b4 <__libc_init_array+0x38>)
 800d580:	4c0d      	ldr	r4, [pc, #52]	; (800d5b8 <__libc_init_array+0x3c>)
 800d582:	1ba4      	subs	r4, r4, r6
 800d584:	10a4      	asrs	r4, r4, #2
 800d586:	2500      	movs	r5, #0
 800d588:	42a5      	cmp	r5, r4
 800d58a:	d109      	bne.n	800d5a0 <__libc_init_array+0x24>
 800d58c:	4e0b      	ldr	r6, [pc, #44]	; (800d5bc <__libc_init_array+0x40>)
 800d58e:	4c0c      	ldr	r4, [pc, #48]	; (800d5c0 <__libc_init_array+0x44>)
 800d590:	f000 f8e4 	bl	800d75c <_init>
 800d594:	1ba4      	subs	r4, r4, r6
 800d596:	10a4      	asrs	r4, r4, #2
 800d598:	2500      	movs	r5, #0
 800d59a:	42a5      	cmp	r5, r4
 800d59c:	d105      	bne.n	800d5aa <__libc_init_array+0x2e>
 800d59e:	bd70      	pop	{r4, r5, r6, pc}
 800d5a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d5a4:	4798      	blx	r3
 800d5a6:	3501      	adds	r5, #1
 800d5a8:	e7ee      	b.n	800d588 <__libc_init_array+0xc>
 800d5aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d5ae:	4798      	blx	r3
 800d5b0:	3501      	adds	r5, #1
 800d5b2:	e7f2      	b.n	800d59a <__libc_init_array+0x1e>
 800d5b4:	0800dafc 	.word	0x0800dafc
 800d5b8:	0800dafc 	.word	0x0800dafc
 800d5bc:	0800dafc 	.word	0x0800dafc
 800d5c0:	0800db00 	.word	0x0800db00

0800d5c4 <malloc>:
 800d5c4:	4b02      	ldr	r3, [pc, #8]	; (800d5d0 <malloc+0xc>)
 800d5c6:	4601      	mov	r1, r0
 800d5c8:	6818      	ldr	r0, [r3, #0]
 800d5ca:	f000 b817 	b.w	800d5fc <_malloc_r>
 800d5ce:	bf00      	nop
 800d5d0:	20000010 	.word	0x20000010

0800d5d4 <memcpy>:
 800d5d4:	b510      	push	{r4, lr}
 800d5d6:	1e43      	subs	r3, r0, #1
 800d5d8:	440a      	add	r2, r1
 800d5da:	4291      	cmp	r1, r2
 800d5dc:	d100      	bne.n	800d5e0 <memcpy+0xc>
 800d5de:	bd10      	pop	{r4, pc}
 800d5e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5e8:	e7f7      	b.n	800d5da <memcpy+0x6>

0800d5ea <memset>:
 800d5ea:	4402      	add	r2, r0
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d100      	bne.n	800d5f4 <memset+0xa>
 800d5f2:	4770      	bx	lr
 800d5f4:	f803 1b01 	strb.w	r1, [r3], #1
 800d5f8:	e7f9      	b.n	800d5ee <memset+0x4>
	...

0800d5fc <_malloc_r>:
 800d5fc:	b570      	push	{r4, r5, r6, lr}
 800d5fe:	1ccd      	adds	r5, r1, #3
 800d600:	f025 0503 	bic.w	r5, r5, #3
 800d604:	3508      	adds	r5, #8
 800d606:	2d0c      	cmp	r5, #12
 800d608:	bf38      	it	cc
 800d60a:	250c      	movcc	r5, #12
 800d60c:	2d00      	cmp	r5, #0
 800d60e:	4606      	mov	r6, r0
 800d610:	db01      	blt.n	800d616 <_malloc_r+0x1a>
 800d612:	42a9      	cmp	r1, r5
 800d614:	d903      	bls.n	800d61e <_malloc_r+0x22>
 800d616:	230c      	movs	r3, #12
 800d618:	6033      	str	r3, [r6, #0]
 800d61a:	2000      	movs	r0, #0
 800d61c:	bd70      	pop	{r4, r5, r6, pc}
 800d61e:	f000 f89b 	bl	800d758 <__malloc_lock>
 800d622:	4a21      	ldr	r2, [pc, #132]	; (800d6a8 <_malloc_r+0xac>)
 800d624:	6814      	ldr	r4, [r2, #0]
 800d626:	4621      	mov	r1, r4
 800d628:	b991      	cbnz	r1, 800d650 <_malloc_r+0x54>
 800d62a:	4c20      	ldr	r4, [pc, #128]	; (800d6ac <_malloc_r+0xb0>)
 800d62c:	6823      	ldr	r3, [r4, #0]
 800d62e:	b91b      	cbnz	r3, 800d638 <_malloc_r+0x3c>
 800d630:	4630      	mov	r0, r6
 800d632:	f000 f83d 	bl	800d6b0 <_sbrk_r>
 800d636:	6020      	str	r0, [r4, #0]
 800d638:	4629      	mov	r1, r5
 800d63a:	4630      	mov	r0, r6
 800d63c:	f000 f838 	bl	800d6b0 <_sbrk_r>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d124      	bne.n	800d68e <_malloc_r+0x92>
 800d644:	230c      	movs	r3, #12
 800d646:	6033      	str	r3, [r6, #0]
 800d648:	4630      	mov	r0, r6
 800d64a:	f000 f886 	bl	800d75a <__malloc_unlock>
 800d64e:	e7e4      	b.n	800d61a <_malloc_r+0x1e>
 800d650:	680b      	ldr	r3, [r1, #0]
 800d652:	1b5b      	subs	r3, r3, r5
 800d654:	d418      	bmi.n	800d688 <_malloc_r+0x8c>
 800d656:	2b0b      	cmp	r3, #11
 800d658:	d90f      	bls.n	800d67a <_malloc_r+0x7e>
 800d65a:	600b      	str	r3, [r1, #0]
 800d65c:	50cd      	str	r5, [r1, r3]
 800d65e:	18cc      	adds	r4, r1, r3
 800d660:	4630      	mov	r0, r6
 800d662:	f000 f87a 	bl	800d75a <__malloc_unlock>
 800d666:	f104 000b 	add.w	r0, r4, #11
 800d66a:	1d23      	adds	r3, r4, #4
 800d66c:	f020 0007 	bic.w	r0, r0, #7
 800d670:	1ac3      	subs	r3, r0, r3
 800d672:	d0d3      	beq.n	800d61c <_malloc_r+0x20>
 800d674:	425a      	negs	r2, r3
 800d676:	50e2      	str	r2, [r4, r3]
 800d678:	e7d0      	b.n	800d61c <_malloc_r+0x20>
 800d67a:	428c      	cmp	r4, r1
 800d67c:	684b      	ldr	r3, [r1, #4]
 800d67e:	bf16      	itet	ne
 800d680:	6063      	strne	r3, [r4, #4]
 800d682:	6013      	streq	r3, [r2, #0]
 800d684:	460c      	movne	r4, r1
 800d686:	e7eb      	b.n	800d660 <_malloc_r+0x64>
 800d688:	460c      	mov	r4, r1
 800d68a:	6849      	ldr	r1, [r1, #4]
 800d68c:	e7cc      	b.n	800d628 <_malloc_r+0x2c>
 800d68e:	1cc4      	adds	r4, r0, #3
 800d690:	f024 0403 	bic.w	r4, r4, #3
 800d694:	42a0      	cmp	r0, r4
 800d696:	d005      	beq.n	800d6a4 <_malloc_r+0xa8>
 800d698:	1a21      	subs	r1, r4, r0
 800d69a:	4630      	mov	r0, r6
 800d69c:	f000 f808 	bl	800d6b0 <_sbrk_r>
 800d6a0:	3001      	adds	r0, #1
 800d6a2:	d0cf      	beq.n	800d644 <_malloc_r+0x48>
 800d6a4:	6025      	str	r5, [r4, #0]
 800d6a6:	e7db      	b.n	800d660 <_malloc_r+0x64>
 800d6a8:	2000026c 	.word	0x2000026c
 800d6ac:	20000270 	.word	0x20000270

0800d6b0 <_sbrk_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	4c06      	ldr	r4, [pc, #24]	; (800d6cc <_sbrk_r+0x1c>)
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	4608      	mov	r0, r1
 800d6ba:	6023      	str	r3, [r4, #0]
 800d6bc:	f7ff fd3c 	bl	800d138 <_sbrk>
 800d6c0:	1c43      	adds	r3, r0, #1
 800d6c2:	d102      	bne.n	800d6ca <_sbrk_r+0x1a>
 800d6c4:	6823      	ldr	r3, [r4, #0]
 800d6c6:	b103      	cbz	r3, 800d6ca <_sbrk_r+0x1a>
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	bd38      	pop	{r3, r4, r5, pc}
 800d6cc:	200006e0 	.word	0x200006e0

0800d6d0 <_raise_r>:
 800d6d0:	291f      	cmp	r1, #31
 800d6d2:	b538      	push	{r3, r4, r5, lr}
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	460d      	mov	r5, r1
 800d6d8:	d904      	bls.n	800d6e4 <_raise_r+0x14>
 800d6da:	2316      	movs	r3, #22
 800d6dc:	6003      	str	r3, [r0, #0]
 800d6de:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}
 800d6e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d6e6:	b112      	cbz	r2, 800d6ee <_raise_r+0x1e>
 800d6e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6ec:	b94b      	cbnz	r3, 800d702 <_raise_r+0x32>
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f000 f830 	bl	800d754 <_getpid_r>
 800d6f4:	462a      	mov	r2, r5
 800d6f6:	4601      	mov	r1, r0
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6fe:	f000 b817 	b.w	800d730 <_kill_r>
 800d702:	2b01      	cmp	r3, #1
 800d704:	d00a      	beq.n	800d71c <_raise_r+0x4c>
 800d706:	1c59      	adds	r1, r3, #1
 800d708:	d103      	bne.n	800d712 <_raise_r+0x42>
 800d70a:	2316      	movs	r3, #22
 800d70c:	6003      	str	r3, [r0, #0]
 800d70e:	2001      	movs	r0, #1
 800d710:	e7e7      	b.n	800d6e2 <_raise_r+0x12>
 800d712:	2400      	movs	r4, #0
 800d714:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d718:	4628      	mov	r0, r5
 800d71a:	4798      	blx	r3
 800d71c:	2000      	movs	r0, #0
 800d71e:	e7e0      	b.n	800d6e2 <_raise_r+0x12>

0800d720 <raise>:
 800d720:	4b02      	ldr	r3, [pc, #8]	; (800d72c <raise+0xc>)
 800d722:	4601      	mov	r1, r0
 800d724:	6818      	ldr	r0, [r3, #0]
 800d726:	f7ff bfd3 	b.w	800d6d0 <_raise_r>
 800d72a:	bf00      	nop
 800d72c:	20000010 	.word	0x20000010

0800d730 <_kill_r>:
 800d730:	b538      	push	{r3, r4, r5, lr}
 800d732:	4c07      	ldr	r4, [pc, #28]	; (800d750 <_kill_r+0x20>)
 800d734:	2300      	movs	r3, #0
 800d736:	4605      	mov	r5, r0
 800d738:	4608      	mov	r0, r1
 800d73a:	4611      	mov	r1, r2
 800d73c:	6023      	str	r3, [r4, #0]
 800d73e:	f7ff fce1 	bl	800d104 <_kill>
 800d742:	1c43      	adds	r3, r0, #1
 800d744:	d102      	bne.n	800d74c <_kill_r+0x1c>
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	b103      	cbz	r3, 800d74c <_kill_r+0x1c>
 800d74a:	602b      	str	r3, [r5, #0]
 800d74c:	bd38      	pop	{r3, r4, r5, pc}
 800d74e:	bf00      	nop
 800d750:	200006e0 	.word	0x200006e0

0800d754 <_getpid_r>:
 800d754:	f7ff bcce 	b.w	800d0f4 <_getpid>

0800d758 <__malloc_lock>:
 800d758:	4770      	bx	lr

0800d75a <__malloc_unlock>:
 800d75a:	4770      	bx	lr

0800d75c <_init>:
 800d75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75e:	bf00      	nop
 800d760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d762:	bc08      	pop	{r3}
 800d764:	469e      	mov	lr, r3
 800d766:	4770      	bx	lr

0800d768 <_fini>:
 800d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76a:	bf00      	nop
 800d76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d76e:	bc08      	pop	{r3}
 800d770:	469e      	mov	lr, r3
 800d772:	4770      	bx	lr
